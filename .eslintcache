[{"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\PrivateRoute.js":"1","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\VerifyUser.js":"2","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\AllFaqs.js":"3","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\NewRecipe.js":"4","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\PlayerVideoBrowser.js":"5","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\UpdatePost.js":"6","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\tags.js":"7","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\CommentSection.js":"8","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomExercisePanel.js":"9","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\reportWebVitals.js":"10","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Magazine.js":"11","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserUpdate.js":"12","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\PlayerControls.js":"13","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\NewFaq.js":"14","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\AllProducts.js":"15","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\TextEditor.js":"16","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\UpdateProduct.js":"17","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\UpdateCoupon.js":"18","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteModal.js":"19","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\index.js":"20","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\UserStore.js":"21","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Nutrition.js":"22","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Login.js":"23","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\goals.js":"24","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\NewBlog.js":"25","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\AllExercises.js":"26","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeAdditionalTab.js":"27","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Common\\ReviewsModal.js":"28","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\EditTypeName.js":"29","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\HowItWork.js":"30","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ResetNewPassword.js":"31","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengePlayer.js":"32","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\RenderedVideoPlayer.js":"33","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Challenges.js":"34","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\AllCoupons.js":"35","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\recipes.js":"36","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Nutrition\\SearchNutrition.js":"37","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\shop.js":"38","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\mediaManagerUtils.js":"39","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\PaymentProcessStore.js":"40","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\NewCoupon.js":"41","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallenge.js":"42","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\EditCategoryName.js":"43","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\FullScreenPlayerVideosBrowser.js":"44","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\App.js":"45","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Home.js":"46","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\AllRecipes.js":"47","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\EditTypeName.js":"48","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\NonRenderedVideoPlayer.js":"49","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\RecipeProfile.js":"50","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\UpdateRecipe.js":"51","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Pricing.js":"52","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\adminRequests.js":"53","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWeekPanel.js":"54","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Cards\\ChallengeCard.js":"55","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\ScrollToTop.js":"56","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\AllUsers.js":"57","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeReviewModal.js":"58","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\MusicPlayer.js":"59","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\LanguageContext.js":"60","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Challenges.js":"61","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\LanguageSelector\\LanguageSelector.js":"62","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\NewPost.js":"63","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MembershipManager\\NewMembership.js":"64","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutTab.js":"65","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\CreatePayment.js":"66","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\LoggedinNavbar.js":"67","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Feed.js":"68","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Community.js":"69","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\NewUser.js":"70","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\users.js":"71","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\main.js":"72","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\faqs.js":"73","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\bodyFocus.js":"74","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\UpdateFaq.js":"75","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\EditTypeName.js":"76","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\UpdateUser.js":"77","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\AllBlogs.js":"78","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\AllChallenges.js":"79","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengeProfile.js":"80","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\HelpPopupPlayer.js":"81","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\products.js":"82","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\UpdateChallenge.js":"83","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\TrainerProfile.js":"84","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\customer.js":"85","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserDashboard.js":"86","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AdminDashboard.js":"87","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\RemoteMediaManager.js":"88","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\MediaManager.js":"89","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeMainTab.js":"90","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AllChallenges.js":"91","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\PackageSelector.js":"92","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\UpdateBlog.js":"93","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\Player.js":"94","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ReplaceFreeChallengePopup.js":"95","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Signup.js":"96","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\payment.js":"97","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteNextModal.js":"98","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\translationHelpers.js":"99","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\useWindowDimensions.js":"100","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MembershipManager\\AllMemberships.js":"101","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWorkoutPanel.js":"102"},{"size":484,"mtime":1640692961639,"results":"103","hashOfConfig":"104"},{"size":4257,"mtime":1640544512435,"results":"105","hashOfConfig":"104"},{"size":3440,"mtime":1656668516226,"results":"106","hashOfConfig":"104"},{"size":37334,"mtime":1671729009043,"results":"107","hashOfConfig":"104"},{"size":8721,"mtime":1657659007734,"results":"108","hashOfConfig":"104"},{"size":4465,"mtime":1649704306844,"results":"109","hashOfConfig":"104"},{"size":1247,"mtime":1657280739221,"results":"110","hashOfConfig":"104"},{"size":6680,"mtime":1650063633769,"results":"111","hashOfConfig":"104"},{"size":3876,"mtime":1671209414938,"results":"112","hashOfConfig":"104"},{"size":375,"mtime":1612865032814,"results":"113","hashOfConfig":"104"},{"size":6772,"mtime":1656711898205,"results":"114","hashOfConfig":"104"},{"size":23619,"mtime":1656365468718,"results":"115","hashOfConfig":"104"},{"size":17226,"mtime":1633894232712,"results":"116","hashOfConfig":"104"},{"size":7404,"mtime":1656275468292,"results":"117","hashOfConfig":"104"},{"size":3800,"mtime":1650063734049,"results":"118","hashOfConfig":"104"},{"size":378,"mtime":1640879242652,"results":"119","hashOfConfig":"104"},{"size":9080,"mtime":1650063740335,"results":"120","hashOfConfig":"104"},{"size":5887,"mtime":1641210443873,"results":"121","hashOfConfig":"104"},{"size":6086,"mtime":1657660404645,"results":"122","hashOfConfig":"104"},{"size":1319,"mtime":1656168899351,"results":"123","hashOfConfig":"104"},{"size":770,"mtime":1636919810994,"results":"124","hashOfConfig":"104"},{"size":8251,"mtime":1657576680578,"results":"125","hashOfConfig":"104"},{"size":8477,"mtime":1656660222840,"results":"126","hashOfConfig":"104"},{"size":1298,"mtime":1657281238209,"results":"127","hashOfConfig":"104"},{"size":14213,"mtime":1656363619016,"results":"128","hashOfConfig":"104"},{"size":5648,"mtime":1656433905770,"results":"129","hashOfConfig":"104"},{"size":8252,"mtime":1656363884895,"results":"130","hashOfConfig":"104"},{"size":8304,"mtime":1631621507122,"results":"131","hashOfConfig":"104"},{"size":2076,"mtime":1635795065832,"results":"132","hashOfConfig":"104"},{"size":11152,"mtime":1656367496133,"results":"133","hashOfConfig":"104"},{"size":3805,"mtime":1656366326446,"results":"134","hashOfConfig":"104"},{"size":17439,"mtime":1666125870156,"results":"135","hashOfConfig":"104"},{"size":7084,"mtime":1666125865249,"results":"136","hashOfConfig":"104"},{"size":17661,"mtime":1656368340947,"results":"137","hashOfConfig":"104"},{"size":4814,"mtime":1643493140469,"results":"138","hashOfConfig":"104"},{"size":17162,"mtime":1657280366144,"results":"139","hashOfConfig":"104"},{"size":16990,"mtime":1663425397250,"results":"140","hashOfConfig":"104"},{"size":3022,"mtime":1657280240780,"results":"141","hashOfConfig":"104"},{"size":3421,"mtime":1618777961923,"results":"142","hashOfConfig":"104"},{"size":474,"mtime":1624652706332,"results":"143","hashOfConfig":"104"},{"size":5962,"mtime":1643493328009,"results":"144","hashOfConfig":"104"},{"size":18693,"mtime":1671125739498,"results":"145","hashOfConfig":"104"},{"size":1547,"mtime":1631394709982,"results":"146","hashOfConfig":"104"},{"size":1183,"mtime":1628373451719,"results":"147","hashOfConfig":"104"},{"size":7277,"mtime":1663529535983,"results":"148","hashOfConfig":"104"},{"size":20624,"mtime":1671738659341,"results":"149","hashOfConfig":"104"},{"size":3881,"mtime":1663510198559,"results":"150","hashOfConfig":"104"},{"size":1593,"mtime":1631447061929,"results":"151","hashOfConfig":"104"},{"size":4130,"mtime":1666122414297,"results":"152","hashOfConfig":"104"},{"size":16495,"mtime":1671269950503,"results":"153","hashOfConfig":"104"},{"size":40596,"mtime":1663406235022,"results":"154","hashOfConfig":"104"},{"size":13226,"mtime":1656366470594,"results":"155","hashOfConfig":"104"},{"size":739,"mtime":1657461364927,"results":"156","hashOfConfig":"104"},{"size":6305,"mtime":1657658473124,"results":"157","hashOfConfig":"104"},{"size":2110,"mtime":1663425217725,"results":"158","hashOfConfig":"104"},{"size":355,"mtime":1612865032711,"results":"159","hashOfConfig":"104"},{"size":6014,"mtime":1641313113665,"results":"160","hashOfConfig":"104"},{"size":3355,"mtime":1656367239100,"results":"161","hashOfConfig":"104"},{"size":5030,"mtime":1663530918847,"results":"162","hashOfConfig":"104"},{"size":1365,"mtime":1656169163698,"results":"163","hashOfConfig":"104"},{"size":14123,"mtime":1663524318147,"results":"164","hashOfConfig":"104"},{"size":1170,"mtime":1656183413396,"results":"165","hashOfConfig":"104"},{"size":3739,"mtime":1640718252701,"results":"166","hashOfConfig":"104"},{"size":2517,"mtime":1615808687460,"results":"167","hashOfConfig":"104"},{"size":43353,"mtime":1671209392168,"results":"168","hashOfConfig":"104"},{"size":31027,"mtime":1663439111162,"results":"169","hashOfConfig":"104"},{"size":3495,"mtime":1663439215044,"results":"170","hashOfConfig":"104"},{"size":7153,"mtime":1663439608327,"results":"171","hashOfConfig":"104"},{"size":7286,"mtime":1663439654789,"results":"172","hashOfConfig":"104"},{"size":23447,"mtime":1663513615300,"results":"173","hashOfConfig":"104"},{"size":5221,"mtime":1663445107590,"results":"174","hashOfConfig":"104"},{"size":8395,"mtime":1663526471232,"results":"175","hashOfConfig":"104"},{"size":3375,"mtime":1657280528885,"results":"176","hashOfConfig":"104"},{"size":1677,"mtime":1657281307309,"results":"177","hashOfConfig":"104"},{"size":7671,"mtime":1631447235491,"results":"178","hashOfConfig":"104"},{"size":2323,"mtime":1671728324720,"results":"179","hashOfConfig":"104"},{"size":17627,"mtime":1651353850311,"results":"180","hashOfConfig":"104"},{"size":3961,"mtime":1671389163654,"results":"181","hashOfConfig":"104"},{"size":6855,"mtime":1663510243847,"results":"182","hashOfConfig":"104"},{"size":39974,"mtime":1671214429571,"results":"183","hashOfConfig":"104"},{"size":6278,"mtime":1649104273475,"results":"184","hashOfConfig":"104"},{"size":507,"mtime":1619158649307,"results":"185","hashOfConfig":"104"},{"size":23292,"mtime":1671126064714,"results":"186","hashOfConfig":"104"},{"size":12972,"mtime":1671214453742,"results":"187","hashOfConfig":"104"},{"size":1320,"mtime":1663526347563,"results":"188","hashOfConfig":"104"},{"size":6761,"mtime":1657139319287,"results":"189","hashOfConfig":"104"},{"size":23312,"mtime":1656433575944,"results":"190","hashOfConfig":"104"},{"size":709,"mtime":1623854620132,"results":"191","hashOfConfig":"104"},{"size":25651,"mtime":1651331432916,"results":"192","hashOfConfig":"104"},{"size":29851,"mtime":1671125916534,"results":"193","hashOfConfig":"104"},{"size":12202,"mtime":1657462393751,"results":"194","hashOfConfig":"104"},{"size":5858,"mtime":1626038935485,"results":"195","hashOfConfig":"104"},{"size":14591,"mtime":1656687407075,"results":"196","hashOfConfig":"104"},{"size":1714,"mtime":1629616326530,"results":"197","hashOfConfig":"104"},{"size":1407,"mtime":1633502003437,"results":"198","hashOfConfig":"104"},{"size":13725,"mtime":1656366280357,"results":"199","hashOfConfig":"104"},{"size":10850,"mtime":1633858841310,"results":"200","hashOfConfig":"104"},{"size":2361,"mtime":1649103673980,"results":"201","hashOfConfig":"104"},{"size":395,"mtime":1656169167550,"results":"202","hashOfConfig":"104"},{"size":617,"mtime":1612865032711,"results":"203","hashOfConfig":"104"},{"size":3327,"mtime":1641306131454,"results":"204","hashOfConfig":"104"},{"size":6969,"mtime":1657658500437,"results":"205","hashOfConfig":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},"72nilk",{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"208"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"246"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"255"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"225"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"242"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"208"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"208"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"251"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"293"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"246"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"314"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"317"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"242"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"246"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"246"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"262"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"225"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"255"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"366"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"225"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"376","messages":"377","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"378","messages":"379","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"255"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"385","messages":"386","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"225"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"246"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"409","messages":"410","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"411","messages":"412","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"424","messages":"425","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"426","messages":"427","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"428","messages":"429","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"430","messages":"431","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"432","messages":"433","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"438","messages":"439","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"444","messages":"445","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"246"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\PrivateRoute.js",[],["456","457"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\VerifyUser.js",["458"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\AllFaqs.js",[],["459","460"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\NewRecipe.js",["461","462","463","464","465","466","467","468","469"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\PlayerVideoBrowser.js",["470"],"import React, { useContext } from \"react\";\r\n\r\nimport Carousel from \"react-multi-carousel\";\r\nimport VideoThumbnail from \"react-video-thumbnail\";\r\nimport SquarePT from \"../../assets/icons/player-video-browser-whistle-icon.svg\";\r\nimport SquarePlay from \"../../assets/icons/player-video-browser-play-icon.svg\";\r\nimport { exerciseWorkoutTimeTrackContext } from \"../../contexts/PlayerState\";\r\n\r\nconst responsive = {\r\n  superLargeDesktop: {\r\n    // the naming can be any, depends on you.\r\n    breakpoint: { max: 4000, min: 3000 },\r\n    items: 4,\r\n  },\r\n  desktop3: {\r\n    breakpoint: { max: 3000, min: 1600 },\r\n    items: 4,\r\n  },\r\n  desktop2: {\r\n    breakpoint: { max: 1600, min: 1350 },\r\n    items: 3.5,\r\n  },\r\n  desktop: {\r\n    breakpoint: { max: 1350, min: 1100 },\r\n    items: 3,\r\n  },\r\n  tablet: {\r\n    breakpoint: { max: 1100, min: 850 },\r\n    items: 2.5,\r\n  },\r\n  mobile2: {\r\n    breakpoint: { max: 850, min: 600 },\r\n    items: 1,\r\n  },\r\n  mobile: {\r\n    breakpoint: { max: 600, min: 0 },\r\n    items: 1,\r\n  },\r\n};\r\n\r\nfunction PlayerVideoBrowser({\r\n  workout,\r\n  playerState,\r\n  setPlayerState,\r\n  setExerciseForHelpModal,\r\n  setOpenHelpModal,\r\n  setCurrentExercise,\r\n  currentExercise,\r\n  fullscreen,\r\n  fromFullScreen,\r\n}) {\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\r\n    exerciseWorkoutTimeTrackContext\r\n  );\r\n\r\n  const handleOpenExerciseForHelp = (e) => {\r\n    setPlayerState({ ...playerState, playing: false, muted: true });\r\n    setExerciseForHelpModal(e);\r\n    setOpenHelpModal(true);\r\n  };\r\n\r\n  const handleChangeExercise = (i) => {\r\n    setCurrentExercise({\r\n      exercise: workout.exercises[i],\r\n      index: i,\r\n      completed: Math.round((i / (workout.exercises.length - 1)) * 100),\r\n    });\r\n    setPlayerState({ ...playerState, playing: false, muted: false });\r\n    updateExerciseWorkoutTimer(i);\r\n  };\r\n\r\n  const updateExerciseWorkoutTimer = (index) => {\r\n    if (workout.isRendered) {\r\n      const allExercisesBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\r\n      const allBreaksBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\r\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current:\r\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"challenge-player-container-exercies\"\r\n      style={{\r\n        background: fromFullScreen && \"none\",\r\n        width: fromFullScreen && \"100%\",\r\n      }}\r\n    >\r\n      <div className=\"video-browser-container\">\r\n        <Carousel responsive={responsive}>\r\n          {workout.exercises &&\r\n            workout.exercises.map((e, i) => {\r\n              return i === 0 ? (\r\n                <div\r\n                  className={`${\r\n                    currentExercise.index === i\r\n                      ? \"exercise-browser-card challenge-player-container-exercies-box--currentRunning\"\r\n                      : \"exercise-browser-card\"\r\n                  }`}\r\n                >\r\n                  <div>\r\n                    <h4 className=\"challenge-player-container-exercies-round font-paragraph-white\">\r\n                      {e.exerciseGroupName ? (\r\n                        e.exerciseGroupName\r\n                      ) : (\r\n                        <span style={{ opacity: 0 }}>-</span>\r\n                      )}\r\n                    </h4>\r\n                  </div>\r\n                  {workout.isRendered && (\r\n                    <img\r\n                      src={SquarePlay}\r\n                      onClick={() =>\r\n                        setPlayerState({ ...playerState, playing: true })\r\n                      }\r\n                      alt=\"\"\r\n                      className=\"challenge-player-container-exercies-box-asktrainerbtn\"\r\n                      style={{ padding: \"8px\" }}\r\n                    />\r\n                  )}\r\n                  <div\r\n                    className=\"challenge-player-container-exercies-box\"\r\n                    key={e._id}\r\n                    onClick={() => handleChangeExercise(i)}\r\n                  >\r\n                    <div className=\"challenge-player-container-exercies-box-imagebox\">\r\n                      <VideoThumbnail\r\n                        videoUrl={\r\n                          e.videoURL\r\n                            ? `${process.env.REACT_APP_SERVER}/uploads/${e.videoURL}`\r\n                            : \"\"\r\n                        }\r\n                        width={250}\r\n                        height={200}\r\n                        cors={true}\r\n                      />\r\n                    </div>\r\n                    <div className=\"challenge-player-container-exercies-box-details font-paragraph-white\">\r\n                      <p style={{ lineHeight: \"10px\" }}>{e.title}</p>\r\n                      <p>\r\n                        {e.exerciseLength ? (\r\n                          <>\r\n                            <span style={{ marginRight: \"8px\" }}>\r\n                              {workout.isRendered\r\n                                ? `${e.exerciseLength} secs`\r\n                                : \"\"}\r\n                            </span>{\" \"}\r\n                          </>\r\n                        ) : (\r\n                          <span style={{ marginRight: \"8px\" }}></span>\r\n                        )}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div\r\n                  className={`${\r\n                    currentExercise.index === i\r\n                      ? \"exercise-browser-card challenge-player-container-exercies-box--currentRunning\"\r\n                      : \"exercise-browser-card\"\r\n                  }`}\r\n                >\r\n                  <div>\r\n                    <h4\r\n                      className=\"challenge-player-container-exercies-round font-paragraph-white\"\r\n                      style={{ opacity: !e.exerciseGroupName ? \"0\" : \"0.6\" }}\r\n                    >\r\n                      {e.exerciseGroupName ? (\r\n                        e.exerciseGroupName\r\n                      ) : (\r\n                        <span style={{ opacity: 0 }}>-</span>\r\n                      )}\r\n                    </h4>\r\n                  </div>\r\n                  {workout.isRendered && !fullscreen && (\r\n                    <img\r\n                      src={SquarePT}\r\n                      alt=\"\"\r\n                      className=\"challenge-player-container-exercies-box-asktrainerbtn\"\r\n                      onClick={() => handleOpenExerciseForHelp(e)}\r\n                    />\r\n                  )}\r\n                  <div\r\n                    className=\"challenge-player-container-exercies-box\"\r\n                    key={e._id}\r\n                    onClick={() => handleChangeExercise(i)}\r\n                  >\r\n                    <div className=\"challenge-player-container-exercies-box-imagebox\">\r\n                      <VideoThumbnail\r\n                        videoUrl={\r\n                          e.videoURL\r\n                            ? `${process.env.REACT_APP_SERVER}/uploads/${e.videoURL}`\r\n                            : \"\"\r\n                        }\r\n                        width={250}\r\n                        height={200}\r\n                        cors={true}\r\n                      />\r\n                    </div>\r\n                    <div className=\"challenge-player-container-exercies-box-details font-paragraph-white\">\r\n                      <p style={{ lineHeight: \"10px\" }}>{e.title}</p>\r\n                      <p>\r\n                        <span style={{ marginRight: \"8px\" }}>\r\n                          {e.exerciseLength ? `${e.exerciseLength} secs` : \"\"}\r\n                        </span>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n        </Carousel>\r\n      </div>\r\n      {!fromFullScreen && workout.isRendered && (\r\n        <>\r\n          <h3\r\n            className=\"challenge-player-container-exercies-heading font-paragraph-white\"\r\n            style={{ marginTop: \"20px\" }}\r\n          >\r\n            Exercises\r\n          </h3>\r\n\r\n          <h3 className=\"challenge-player-container-exercies-subheading font-paragraph-white\">\r\n            Navigate to each exercise or hit the personal trainer button for\r\n            audio explanation.\r\n          </h3>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlayerVideoBrowser;\r\n",["471","472"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\UpdatePost.js",["473","474"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Select, Modal } from \"antd\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { createPost } from \"../../../services/posts\";\r\n\r\nfunction UpdatePost({ postInfo, show, setShow, onUpdateComplete }) {\r\n  const [form] = Form.useForm();\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const [type, setType] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      name: postInfo.title,\r\n      description: postInfo.text,\r\n      category: postInfo.type,\r\n    });\r\n    setType(postInfo.type);\r\n    setImage({ name: postInfo.image, link: postInfo.image });\r\n  }, []);\r\n\r\n  const onFinish = async (values) => {\r\n    if (type && image) {\r\n      const data = {\r\n        id: postInfo._id,\r\n        title: values.name,\r\n        text: values.description,\r\n        image: typeof image === \"object\" ? image.link : \"\",\r\n        type: type,\r\n      };\r\n      onUpdateComplete(data);\r\n    } else {\r\n      window.alert(\"All values are requeired to create a post\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      width=\"60%\"\r\n      visible={show}\r\n      footer={false}\r\n      onCancel={() => setShow(false)}\r\n      onOk={onUpdateComplete}\r\n    >\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      <h2 className=\"font-heading-white\">Update Post</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Post Title\"\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input post title!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Post Description\"\r\n            name=\"description\"\r\n            rules={[\r\n              { required: true, message: \"Please input post description!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Post Image\" name=\"image\">\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"images\");\r\n                setMediaManagerActions([image, setImage]);\r\n              }}\r\n            >\r\n              Upload Image\r\n            </Button>\r\n            <div\r\n              className=\"font-paragraph-white\"\r\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\r\n            >\r\n              {image && (\r\n                <img\r\n                  src={`${process.env.REACT_APP_SERVER}/uploads/${image.link}`}\r\n                  alt=\"\"\r\n                  height=\"100px\"\r\n                />\r\n              )}\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item label=\"Post Category\" name=\"category\" required={true}>\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={type}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setType(e)}\r\n            >\r\n              {[\"Challenge\", \"Magazine\", \"Recipe\", \"News Updates\"].map(\r\n                (e, i) => (\r\n                  <Select.Option key={i + 1} value={e}>\r\n                    {e}\r\n                  </Select.Option>\r\n                )\r\n              )}\r\n            </Select>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default UpdatePost;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\tags.js",[],["475","476"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\CommentSection.js",["477","478"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { CloseOutlined, UserOutlined } from \"@ant-design/icons\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { Input, Button } from \"antd\";\r\nimport { addNewComment } from \"../../services/posts\";\r\nimport { addNewCommunityPostComment } from \"../../services/communityPosts\";\r\nimport Modal from \"react-modal\";\r\nimport \"../../assets/challengeReviewModal.css\";\r\nimport moment from \"moment\";\r\nimport { userInfoContext } from \"../../contexts/UserStore\";\r\nimport TopIcon from \"../../assets/icons/comment-header-icon.svg\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\nimport NoCommentBack from \"../../assets/icons/no-comments-background.svg\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\n\r\nfunction CommentSection({ post, updatePosts, visible, setVisible, community }) {\r\n  const userInfo = useContext(userInfoContext)[0];\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [allComments, setAllComments] = useState([]);\r\n  const { width } = useWindowDimensions();\r\n  const customStyles = {\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      width: width < 700 ? \"90%\" : \"60%\",\r\n      overflow: \"hidden\",\r\n      // height:\"600px\"\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(post);\r\n    setAllComments(post.comments ? post.comments : []);\r\n  }, [post]);\r\n\r\n  const addComment = async () => {\r\n    if (newComment.length > 0) {\r\n      if (community) {\r\n        var n = await addNewCommunityPostComment(post._id, {\r\n          text: newComment,\r\n        });\r\n      } else {\r\n        var n = await addNewComment(post._id, { text: newComment });\r\n      }\r\n\r\n      console.log(n);\r\n      setAllComments(n);\r\n      setNewComment(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      isOpen={visible}\r\n      onRequestClose={() => {\r\n        setVisible(false);\r\n        updatePosts(post._id, allComments);\r\n      }}\r\n      style={customStyles}\r\n      contentLabel=\"Comments\"\r\n    >\r\n      <div className=\"challenge-review-modal-header\">\r\n        <span>\r\n          <img src={TopIcon} alt=\"\" />\r\n          <span className=\"font-paragraph-white\" style={{ marginLeft: \"10px\" }}>\r\n            COMMENTS\r\n          </span>\r\n        </span>\r\n        <CloseOutlined\r\n          style={{ color: \"#fff\", fontSize: \"26px\", cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            setVisible(false);\r\n            updatePosts(post._id, allComments);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"challenge-review-modal\">\r\n        <Scrollbars style={{ height: \"400px\" }}>\r\n          {allComments.length > 0 ? (\r\n            allComments.map((comment) => (\r\n              // <div className=\"challenge-profile-comment font-paragraph-white\">\r\n              //   <span className=\"challenge-profile-comment-username\">\r\n              //     <UserOutlined /> {comment.username}\r\n              //   </span>\r\n              //   <span>{comment.text}</span>\r\n              // </div>\r\n              <div\r\n                className=\"comment-container\"\r\n                style={{ marginBottom: width < 700 ? \"20px\" : \"10px\" }}\r\n              >\r\n                <div\r\n                  className=\"comment-container-c1 font-paragraph-white\"\r\n                  style={{\r\n                    alignItems: \"flex-start\",\r\n                    flexDirection: width < 700 ? \"column\" : \"row\",\r\n                  }}\r\n                >\r\n                  <Avatar src={comment.user.avatarLink} shape=\"square\" />{\" \"}\r\n                  <span\r\n                    style={{\r\n                      marginLeft: \"5px\",\r\n                      fontWeight: \"bolder\",\r\n                      fontSize: \"16px\",\r\n                    }}\r\n                  >\r\n                    {comment.user.username}\r\n                  </span>\r\n                  <div style={{ paddingLeft: width < 700 ? \"0\" : \"20px\" }}>\r\n                    <div\r\n                      className=\"comment-container-c2 font-paragraph-white\"\r\n                      style={{\r\n                        padding: 0,\r\n                        fontWeight: \"200\",\r\n                        fontSize: \"14px\",\r\n                      }}\r\n                    >\r\n                      {comment.text}\r\n                    </div>\r\n                    <div\r\n                      className=\"font-paragraph-white comment-container-c3\"\r\n                      style={{ color: \"#82868b\", padding: 0 }}\r\n                    >\r\n                      {moment(comment.createdAt).format(\"MMM, Do YY\")}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <img\r\n              src={NoCommentBack}\r\n              alt=\"\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                transform: \"translate(-50%, -50%)\",\r\n              }}\r\n            />\r\n          )}\r\n        </Scrollbars>\r\n        <div style={{ marginTop: \"10px\" }}>\r\n          <div style={{ display: \"flex\", alignItems: \"flex-start\" }}>\r\n            <Avatar\r\n              src={`${process.env.REACT_APP_SERVER}/uploads/${userInfo.avatar}`}\r\n              shape=\"square\"\r\n              style={{ marginRight: \"10px\" }}\r\n            />{\" \"}\r\n            <Input.TextArea\r\n              rows=\"3\"\r\n              placeholder=\"Enter New Comment\"\r\n              value={newComment}\r\n              onChange={(e) => setNewComment(e.target.value)}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n              margin: \"10px 10px 10px 40px\",\r\n            }}\r\n          >\r\n            <Button\r\n              className=\"font-paragraph-white\"\r\n              style={{\r\n                padding: \"3px 20px\",\r\n                color: \"#fff\",\r\n                backgroundColor: \"transparent\",\r\n                border: \"2px solid #ff7700\",\r\n                borderRadius: \"0\",\r\n              }}\r\n              onClick={() => {\r\n                setVisible(false);\r\n                updatePosts(post._id, allComments);\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              className=\"common-orange-button font-paragraph-white\"\r\n              style={{ padding: \"3px 10px\", borderRadius: \"0\" }}\r\n              onClick={() => addComment()}\r\n            >\r\n              New Comment\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CommentSection;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomExercisePanel.js",["479"],"import React from \"react\";\r\nimport Collapsible from \"react-collapsible\";\r\nimport { Button, Input } from \"antd\";\r\nimport { MenuOutlined } from \"@ant-design/icons\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst dragHandle = {\r\n  width: \"15px\",\r\n  height: \"15px\",\r\n  fontSize: \"14px\",\r\n  fontWeight: \"600\",\r\n  float: \"right\",\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nfunction CustomExercisePanel({ w, t, e, i, duplicateExercise }) {\r\n  return (\r\n    <Draggable key={e.exerciseId} draggableId={e.exerciseId} index={i}>\r\n      {(provided, snapshot) => (\r\n        <div\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          style={getItemStyle(\r\n            snapshot.isDragging,\r\n            provided.draggableProps.style\r\n          )}\r\n        >\r\n          <Collapsible\r\n            trigger={`${i + 1}. ${e.exerciseName}`}\r\n            className=\"exercise-collapse\"\r\n            openedClassName=\"exercise-collapse\"\r\n            triggerTagName={(p) => {\r\n              console.log(p);\r\n              return (\r\n                <div onClick={p.onClick} style={{ cursor: \"pointer\" }}>\r\n                  {p.children}\r\n                  <div style={dragHandle} {...provided.dragHandleProps}>\r\n                    <MenuOutlined />\r\n                  </div>\r\n                </div>\r\n              );\r\n            }}\r\n            triggerStyle={{ cursor: \"pointer\" }}\r\n            key={e.exerciseId}\r\n          >\r\n            {/* {t.renderWorkout ? (\r\n              <Button\r\n                style={{ float: \"right\", marginTop: \"10px\" }}\r\n                onClick={() => duplicateExercise(w.weekId, t, e)}\r\n              >\r\n                Duplicate\r\n              </Button>\r\n            ) : (\r\n              \"\"\r\n            )} */}\r\n            <div className=\"display-workout-inside-week-container\">\r\n              <div>\r\n                <span className=\"font-paragraph-black\">Exercise Name</span>\r\n                <Input value={e.exerciseName} disabled={true} />\r\n              </div>\r\n              <div>\r\n                <span className=\"font-paragraph-black\">\r\n                  Exercise Video Name\r\n                </span>\r\n                <Input value={e.exerciseVideo} disabled={true} />\r\n              </div>\r\n              {t.renderWorkout && (\r\n                <div>\r\n                  <span className=\"font-paragraph-black\">\r\n                    Exercise Group Name\r\n                  </span>\r\n                  <Input value={e.exerciseGroupName} disabled={true} />\r\n                </div>\r\n              )}\r\n              {t.renderWorkout && (\r\n                <div>\r\n                  <span className=\"font-paragraph-black\">\r\n                    Exercise Video Length\r\n                  </span>\r\n                  <Input value={e.exerciseVideo?.videoLength} disabled={true} />\r\n                </div>\r\n              )}\r\n              {t.renderWorkout && (\r\n                <div>\r\n                  <span className=\"font-paragraph-black\">\r\n                    Exercise Audio File\r\n                  </span>\r\n                  <Input value={e.voiceOverFile} disabled={true} />\r\n                </div>\r\n              )}\r\n              {t.renderWorkout && (\r\n                <div>\r\n                  <span className=\"font-paragraph-black\">\r\n                    Break After Exercise\r\n                  </span>\r\n                  <Input value={e.breakAfterExercise} disabled={true} />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </Collapsible>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default CustomExercisePanel;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\reportWebVitals.js",[],["480","481"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Magazine.js",["482"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserUpdate.js",["483","484"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\PlayerControls.js",["485","486","487"],"import React, { forwardRef, useState, useContext, useEffect } from \"react\";\r\nimport FullScreenPlayerVideosBrowser from \"./FullScreenPlayerVideosBrowser\";\r\nimport { VideoSeekSlider } from \"react-video-seek-slider\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-video-seek-slider/lib/ui-video-seek-slider.css\";\r\nimport { PauseOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport PlayerAudioIcon from \"../../assets/icons/player-audio-icon.svg\";\r\nimport PlayerAudioMuteIcon from \"../../assets/icons/player-audio-mute-icon.svg\";\r\nimport PlayerChromeIcon from \"../../assets/icons/chrome-tv-icon.svg\";\r\nimport PlayerMusicIcon from \"../../assets/icons/player-music-icon.svg\";\r\nimport PlayerSmallFullscreenIcon from \"../../assets/icons/player-fullscreen-small-icon.svg\";\r\nimport SmPlayerAudioIcon from \"../../assets/icons/sm-player-audio-icon.svg\";\r\nimport SmPlayerAudioMuteIcon from \"../../assets/icons/sm-player-audio-mute-icon.svg\";\r\nimport SmPlayerChromeIcon from \"../../assets/icons/sm-chrome-tv-icon.svg\";\r\nimport SmPlayerMusicIcon from \"../../assets/icons/sm-player-music-icon.svg\";\r\nimport SmPlayerFullscreenIcon from \"../../assets/icons/sm-player-fullscreen-icon.svg\";\r\nimport {\r\n  exerciseWorkoutTimeTrackContext,\r\n  playerFullscreenContext,\r\n  playerStateContext,\r\n} from \"../../contexts/PlayerState\";\r\nimport screenfull from \"screenfull\";\r\nimport MusicPlayer from \"./MusicPlayer\";\r\nimport SkipLeftIcon from \"../../assets/icons/player-play-left-icon.svg\";\r\nimport SkipRightIcon from \"../../assets/icons/player-play-right-icon.svg\";\r\nimport PlayerPlayIcon from \"../../assets/icons/player-play-icon.svg\";\r\nimport PlayerPauseIcon from \"../../assets/icons/player-pause-icon.svg\";\r\nimport BackButton from \"../../assets/icons/big-back-button.svg\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\n\r\nconst playerIconStyle = {\r\n  // width: \"24px\",\r\n  cursor: \"pointer\",\r\n  marginRight: \"10px\",\r\n};\r\nconst formatTime = (seconds) => {\r\n  if (isNaN(seconds)) {\r\n    return \"00:00\";\r\n    // return \"0 sec\";\r\n  }\r\n\r\n  const date = new Date(seconds * 1000);\r\n  const hh = date.getUTCHours();\r\n  const mm = date.getUTCMinutes();\r\n  const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\r\n  if (hh) {\r\n    return `${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\r\n  }\r\n  return `${mm}:${ss}`;\r\n  // return `${Math.round(seconds)} sec`;\r\n};\r\n\r\nfunction PlayerControls(\r\n  {\r\n    playerRef,\r\n    playerContainerRef,\r\n    descriptionRef,\r\n    exerciseTitle,\r\n    exerciseLength,\r\n    breakTime,\r\n    musicList,\r\n    exerciseSeconds,\r\n    // for full screen player video browser\r\n    resumeSecondsCounter,\r\n    pauseSecondsCounter,\r\n    workout,\r\n    setExerciseForHelpModal,\r\n    setOpenHelpModal,\r\n    setCurrentExercise,\r\n    currentExercise,\r\n    moveToNextExercise,\r\n    moveToPrevExercise,\r\n    challengePageAddress,\r\n  },\r\n  ref\r\n) {\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [musicPlayerVisible, setMusicPlayerVisible] = useState(false);\r\n  const [fullscreen, setFullscreen] = useContext(playerFullscreenContext);\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\r\n    exerciseWorkoutTimeTrackContext\r\n  );\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  useEffect(() => {\r\n    console.log(\"lworkout\", exerciseWorkoutTimeTrack);\r\n  }, [exerciseWorkoutTimeTrack]);\r\n  useEffect(() => {\r\n    if (\r\n      width === playerContainerRef.current.clientWidth &&\r\n      height === playerContainerRef.current.clientHeight\r\n    ) {\r\n      setFullscreen(true);\r\n      console.log(\"in full screen\");\r\n    } else {\r\n      setFullscreen(false);\r\n    }\r\n  });\r\n  const currentTime = playerRef.current\r\n    ? playerRef.current.getCurrentTime()\r\n    : \"00:00\";\r\n  // const currentTime = playerRef.current\r\n  //   ? playerRef.current.getCurrentTime()\r\n  //   : \"0 sec\";\r\n  const duration = playerRef.current\r\n    ? playerRef.current.getDuration()\r\n    : \"00:00\";\r\n  // const duration = playerRef.current\r\n  //   ? playerRef.current.getDuration()\r\n  //   : \"0 sec\";\r\n  const elapsedTime = formatTime(currentTime);\r\n  const totalDuration = formatTime(duration);\r\n\r\n  const onMute = () => {\r\n    setPlayerState({ ...playerState, muted: !playerState.muted });\r\n  };\r\n\r\n  const onPlayPause = () => {\r\n    setPlayerState({ ...playerState, playing: !playerState.playing });\r\n  };\r\n\r\n  const toggleFullscreen = () => {\r\n    if (fullscreen) {\r\n      setFullscreen(false);\r\n    } else {\r\n      setFullscreen(true);\r\n    }\r\n\r\n    screenfull.toggle(playerContainerRef.current);\r\n    console.log(screenfull.isFullscreen, playerContainerRef.current);\r\n  };\r\n\r\n  const onSeek = (e) => {\r\n    setPlayerState({\r\n      ...playerState,\r\n      progress: { ...playerState.progress, played: parseFloat(e / 100) },\r\n    });\r\n    playerRef.current.seekTo(e / 100);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() - 15);\r\n  };\r\n\r\n  const handleFastforward = () => {\r\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() + 15);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"controls-details\" ref={descriptionRef}>\r\n        <div className=\"controls-details-top-title font-paragraph-white\">\r\n          <span>{exerciseTitle}</span>\r\n          {exerciseLength && (\r\n            <span style={{ marginTop: \"10px\" }}>\r\n              <span style={{ fontSize: \"26px\", marginRight: \"5px\" }}>\r\n                {Math.round(exerciseSeconds)}\r\n              </span>\r\n              Sec\r\n            </span>\r\n          )}\r\n        </div>\r\n        {console.log(workout, currentExercise)}\r\n        <div className=\"controls-details-bottom-title font-paragraph-white\">\r\n          {breakTime && (\r\n            <span>\r\n              Up next: Rest\r\n              <span style={{ fontSize: \"26px\", margin: \"0 5px\" }}>\r\n                {breakTime}\r\n              </span>\r\n              sec\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"controls-wrapper\" ref={ref}>\r\n        {fullscreen && (\r\n          <FullScreenPlayerVideosBrowser\r\n            showVideos={true}\r\n            workout={workout}\r\n            setExerciseForHelpModal={setExerciseForHelpModal}\r\n            setOpenHelpModal={setOpenHelpModal}\r\n            setCurrentExercise={setCurrentExercise}\r\n            currentExercise={currentExercise}\r\n          />\r\n        )}\r\n        <div>\r\n          <MusicPlayer\r\n            musicList={musicList}\r\n            setMusicPlayerVisible={setMusicPlayerVisible}\r\n            visible={musicPlayerVisible}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"controls-wrapper-top\">\r\n          <div>\r\n            {(fullscreen || width <= 768) && (\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Link\r\n                  to={challengePageAddress}\r\n                  style={{\r\n                    color: \"#ff7700\",\r\n                    alignSelf: \"flex-start\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={BackButton}\r\n                    alt=\"back-button\"\r\n                    className=\"player-back-button\"\r\n                  />\r\n                </Link>\r\n                <div className=\"player-back-text\">\r\n                  <span className=\"font-heading-white\">{workout.title}</span>\r\n                  <span className=\"font-paragraph-white\">\r\n                    {workout.subtitle}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"player-top-icons\">\r\n            {fullscreen ? (\r\n              <>\r\n                {playerState.muted ? (\r\n                  <img\r\n                    src={PlayerAudioMuteIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                    onClick={onMute}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    onClick={onMute}\r\n                    src={PlayerAudioIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                  />\r\n                )}\r\n                <img\r\n                  src={PlayerChromeIcon}\r\n                  alt=\"player-chrome-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={PlayerMusicIcon}\r\n                  onClick={() => setMusicPlayerVisible(!musicPlayerVisible)}\r\n                  alt=\"player-music-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={PlayerSmallFullscreenIcon}\r\n                  alt=\"player-fullscreen-icon\"\r\n                  style={playerIconStyle}\r\n                  onClick={toggleFullscreen}\r\n                />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {playerState.muted ? (\r\n                  <img\r\n                    src={SmPlayerAudioMuteIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                    onClick={onMute}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    onClick={onMute}\r\n                    src={SmPlayerAudioIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                  />\r\n                )}\r\n                <img\r\n                  src={SmPlayerChromeIcon}\r\n                  alt=\"player-chrome-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={SmPlayerMusicIcon}\r\n                  onClick={() => setMusicPlayerVisible(!musicPlayerVisible)}\r\n                  alt=\"player-music-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={SmPlayerFullscreenIcon}\r\n                  alt=\"player-fullscreen-icon\"\r\n                  style={playerIconStyle}\r\n                  onClick={toggleFullscreen}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* middle controls */}\r\n        {playerState.loading ? (\r\n          <span\r\n            style={{\r\n              height: \"100%\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <LoadingOutlined\r\n              style={{\r\n                color: \"var(--color-orange)\",\r\n              }}\r\n              className=\"middle-player-icons\"\r\n            />\r\n          </span>\r\n        ) : (\r\n          <div className=\"controls-wrapper-middle\">\r\n            <span className=\"controls-wrapper-middle-icons\"></span>\r\n\r\n            <span className=\"controls-wrapper-middle-icons\"></span>\r\n          </div>\r\n        )}\r\n\r\n        {!workout.isRendered ? (\r\n          <>\r\n            <div\r\n              className=\"controls-wrapper-bottom\"\r\n              style={{ position: \"relative\" }}\r\n            >\r\n              <span className=\"font-paragraph-white player-elasped-time-container\">\r\n                {elapsedTime}\r\n              </span>\r\n              <div>\r\n                <img\r\n                  src={SkipLeftIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={handleRewind}\r\n                />\r\n                <span className=\"font-paragraph-white\">15</span>\r\n                {playerState.playing ? (\r\n                  // PlayerPauseIcon\r\n                  <img\r\n                    src={PlayerPauseIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 20px 0 35px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src={PlayerPlayIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 20px 0 35px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                )}\r\n                <span className=\"font-paragraph-white\">15</span>\r\n                <img\r\n                  src={SkipRightIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={handleFastforward}\r\n                />\r\n              </div>\r\n              <span\r\n                className=\"font-paragraph-white player-elasped-time-container\"\r\n                style={{ textAlign: \"right\" }}\r\n              >\r\n                {totalDuration}\r\n              </span>\r\n            </div>\r\n            <div style={{ margin: \"0 30px 0 35px\", paddingBottom: \"20px\" }}>\r\n              <VideoSeekSlider\r\n                max={100}\r\n                currentTime={playerState.progress.played * 100}\r\n                progress={playerState.progress.loaded * 100}\r\n                onChange={onSeek}\r\n                offset={0}\r\n                limitTimeTooltipBySides={true}\r\n                hideSeekTimes={false}\r\n                secondsPrefix=\"00:00:\"\r\n                minutesPrefix=\"00:\"\r\n                tipFormatter={(v) => `${elapsedTime}`}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div\r\n              className=\"controls-wrapper-bottom\"\r\n              style={{ position: \"relative\" }}\r\n            >\r\n              <span className=\"font-paragraph-white player-elasped-time-container\">\r\n                {/* {elapsedTime} */}\r\n                {formatTime(exerciseWorkoutTimeTrack.current)}\r\n              </span>\r\n              <div>\r\n                <img\r\n                  src={SkipLeftIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    if (currentExercise && currentExercise.index !== 0) {\r\n                      const s =\r\n                        parseInt(exerciseLength) - parseInt(exerciseSeconds);\r\n                      // console.log(\"exerciseSeconds\",totalDurationTimer,s, parseInt(workout.exercises[currentExercise.index - 1].exerciseLength))\r\n                      // setTotalDurationTimer(totalDurationTimer - s - parseInt(workout.exercises[currentExercise.index - 1].exerciseLength));\r\n                      moveToPrevExercise();\r\n                    }\r\n                  }}\r\n                />\r\n                {/* PlayerPlayIcon */}\r\n                {playerState.playing ? (\r\n                  <img\r\n                    src={PlayerPauseIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 30px 0 30px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src={PlayerPlayIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 25px 0 35px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                )}\r\n                <img\r\n                  src={SkipRightIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    if (\r\n                      currentExercise &&\r\n                      currentExercise.index !== workout.exercises.length - 1\r\n                    ) {\r\n                      // const s = parseInt(exerciseLength);\r\n                      // console.log(\"exerciseSeconds\",totalDurationTimer,s)\r\n                      // setTotalDurationTimer(totalDurationTimer + s);\r\n                      moveToNextExercise();\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <span\r\n                className=\"font-paragraph-white player-elasped-time-container\"\r\n                style={{ textAlign: \"right\" }}\r\n              >\r\n                {/* {totalDuration} */}\r\n                {formatTime(exerciseWorkoutTimeTrack.total)}\r\n              </span>\r\n            </div>\r\n            <div\r\n              className=\"react-player-stepper-container\"\r\n              style={{\r\n                gridTemplateColumns: `repeat(${\r\n                  workout && workout.exercises.length\r\n                }, 1fr)`,\r\n              }}\r\n            >\r\n              {workout &&\r\n                workout.exercises.map((j, i) => (\r\n                  <div\r\n                    className=\"react-player-stepper\"\r\n                    style={{\r\n                      background:\r\n                        currentExercise &&\r\n                        currentExercise.index === i &&\r\n                        currentExercise.index !== -1\r\n                          ? \"#fff\"\r\n                          : \"#FB7600\",\r\n                    }}\r\n                  ></div>\r\n                ))}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default forwardRef(PlayerControls);\r\n",["488","489"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\NewFaq.js",["490","491","492"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Input, Button, Select, Modal, List, Checkbox } from \"antd\";\r\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\r\nimport { createPost } from \"../../../services/posts\";\r\nimport {\r\n  createFaq,\r\n  createFaqCategory,\r\n  getAllFaqCategories,\r\n  removeFaqCategory,\r\n} from \"../../../services/faqs\";\r\nimport EditTypeName from \"./EditTypeName\";\r\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\r\nimport LanguageSelector from \"../../LanguageSelector/LanguageSelector\";\r\nconst { Option } = Select;\r\n\r\nfunction NewFaq({ setCurrentSelection, home }) {\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryModal, setCategoryModal] = useState(false);\r\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n  const [allCategories, setAllCategories] = useState([]);\r\n  const [isPublic, setIsPublic] = useState(true);\r\n\r\n  // update stuff\r\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\r\n    useState(false);\r\n\r\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\r\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\r\n    useState(\"\");\r\n  const { language } = useContext(LanguageContext);\r\n\r\n  const fetchData = async () => {\r\n    const aC = await getAllFaqCategories(language);\r\n    // console.log(aC);\r\n    if (aC) {\r\n      setAllCategories(aC.categories);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [language]);\r\n\r\n  const removeCategory = async (id) => {\r\n    await removeFaqCategory(id);\r\n    fetchData();\r\n  };\r\n  const onFinish = async (values) => {\r\n    const data = {\r\n      ...values,\r\n      category,\r\n      isPublic,\r\n      language,\r\n    };\r\n    console.log(data);\r\n    await createFaq(data);\r\n    setCurrentSelection(home);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/*  */}\r\n      <EditTypeName\r\n        editItemNameModalVisible={editItemNameModalVisible}\r\n        setEditItemModelVisible={setEditItemNameModalVisible}\r\n        fethData={fetchData}\r\n        selectedItemForUpdate={selectedItemForUpdate}\r\n        titleName={selectedItemForUpdateTitle}\r\n      />\r\n      {/* modal to create a new goal */}\r\n      <Modal\r\n        onCancel={() => setCategoryModal(false)}\r\n        footer={false}\r\n        visible={categoryModal}\r\n      >\r\n        <p className=\"font-paragraph-white\">Categories</p>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Input\r\n            value={newCategoryName}\r\n            onChange={(e) => setNewCategoryName(e.target.value)}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            style={{\r\n              backgroundColor: \"var(--color-orange)\",\r\n              borderColor: \"var(--color-orange)\",\r\n              marginLeft: \"5px\",\r\n            }}\r\n            onClick={async () => {\r\n              if (newCategoryName.length > 0) {\r\n                await createFaqCategory({ name: newCategoryName, language });\r\n                // setShowGoalModal(false);\r\n                fetchData();\r\n              }\r\n            }}\r\n          >\r\n            Create Category\r\n          </Button>\r\n        </div>\r\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n          <span className=\"font-subheading-white\">All Categories</span>\r\n          <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={allCategories}\r\n            renderItem={(cat) => (\r\n              <List.Item\r\n                style={{\r\n                  backgroundColor: \"#fff\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n                key={cat._id}\r\n              >\r\n                <span>{cat.name}</span>\r\n\r\n                <span>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      removeCategory(cat._id);\r\n                    }}\r\n                    style={{ marginRight: \"10px\" }}\r\n                    type=\"primary\"\r\n                    danger\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => {\r\n                      setSelectedItemForUpdateTitle(\"Update Faq Category\");\r\n                      setSelectedItemForUpdate(cat);\r\n                      setEditItemNameModalVisible(true);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </span>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </div>\r\n      </Modal>\r\n      {/* ----------------- */}\r\n      <h2 className=\"font-heading-black\">New FAQ</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <div>\r\n            <span style={{ marginRight: \"10px\" }}>Select Language</span>\r\n            <LanguageSelector notFromNav={true} />\r\n          </div>\r\n          <Form.Item\r\n            label=\"Question\"\r\n            name=\"question\"\r\n            rules={[{ required: true, message: \"Please input question!\" }]}\r\n          >\r\n            <Input.TextArea rows={3} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Answer\"\r\n            name=\"answer\"\r\n            rules={[{ required: true, message: \"Please input answer!\" }]}\r\n          >\r\n            <Input.TextArea rows={6} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Category\" name=\"category\">\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Please select\"\r\n              value={category}\r\n              onChange={(e) => setCategory(e)}\r\n            >\r\n              {allCategories.map((cat) => (\r\n                <Option value={cat._id} key={cat._id}>\r\n                  {cat.name}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n            <Button\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                border: \"none\",\r\n                color: \"white\",\r\n                float: \"right\",\r\n                marginTop: \"5px\",\r\n              }}\r\n              onClick={() => setCategoryModal(true)}\r\n            >\r\n              Manage Category\r\n            </Button>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Checkbox\r\n              checked={isPublic}\r\n              onChange={(e) => setIsPublic(e.target.checked)}\r\n            >\r\n              Make public\r\n            </Checkbox>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewFaq;\r\n",["493","494"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\AllProducts.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\TextEditor.js",[],["495","496"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\UpdateProduct.js",["497","498","499","500"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Select, Checkbox, List, Modal } from \"antd\";\r\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { getAllCategories, updateProduct } from \"../../../services/shop\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\n\r\nfunction UpdateProduct(props) {\r\n  const [form] = Form.useForm();\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  // products\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productDesc, setProductDesc] = useState(\"\");\r\n  const [productImg, setProductImg] = useState([]);\r\n  const [category, setCategory] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [instock, setInstock] = useState(true);\r\n  const [weight, setWeight] = useState(0);\r\n  const [dimensions, setDimensions] = useState({\r\n    length: \"\",\r\n    width: \"\",\r\n    height: \"\",\r\n  });\r\n  const [allCategories, setAllCategories] = useState([]);\r\n\r\n  const fethData = async () => {\r\n    const data = await getAllCategories();\r\n    setAllCategories(data.categories);\r\n    // console.log(props.match.params.productId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(props.selectedProduct);\r\n    form.setFieldsValue({\r\n      productName: props.selectedProduct.name,\r\n      productDesc: props.selectedProduct.description,\r\n      category: props.selectedProduct._id,\r\n      price: props.selectedProduct.price,\r\n      weight: props.selectedProduct.weight,\r\n      inStock: props.selectedProduct.inStock,\r\n    });\r\n    props.selectedProduct.dimensions &&\r\n      setDimensions(props.selectedProduct.dimensions);\r\n    props.selectedProduct.inStock && setInstock(props.selectedProduct.inStock);\r\n    props.selectedProduct.uploadImages &&\r\n      setProductImg(props.selectedProduct.uploadImages);\r\n    fethData();\r\n  }, [props.selectedProduct]);\r\n  const onFinish = async (values) => {\r\n    console.log(\"Success:\", values);\r\n    const uploadImages = productImg.map((i) => {\r\n      if (typeof i === \"object\") {\r\n        return i.link;\r\n      }\r\n      return i;\r\n    });\r\n    const d = {\r\n      name: values.productName,\r\n      description: values.productDesc,\r\n      category: values.category,\r\n      price: values.price,\r\n      weight: values.weight,\r\n      dimensions: dimensions,\r\n      uploadImages: uploadImages,\r\n      instock: values.inStock,\r\n    };\r\n    await updateProduct(d, props.selectedProduct._id);\r\n    // console.log(d);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (link) => {\r\n    const imgs = productImg.filter((i) => i.link !== link);\r\n    setProductImg(imgs);\r\n  };\r\n  return (\r\n    <Modal\r\n      visible={props.visible}\r\n      onCancel={() => {\r\n        props.setVisible(!props.visible);\r\n        props.getAllProducts();\r\n      }}\r\n      width=\"80vw\"\r\n      key={props.key}\r\n      footer={false}\r\n    >\r\n      {/* media manager */}\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      {/*  */}\r\n\r\n      <h2 className=\"font-heading-white\">Update Product</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Product Name\"\r\n            name=\"productName\"\r\n            rules={[{ required: true, message: \"Please input product name!\" }]}\r\n          >\r\n            <Input\r\n              value={productName}\r\n              onChange={(e) => setProductName(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"productDesc\"\r\n            label=\"Product Description\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input description!\",\r\n              },\r\n            ]}\r\n          >\r\n            <TextArea\r\n              rows={4}\r\n              value={productDesc}\r\n              onChange={(e) => setProductDesc(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"category\" label=\"Category\">\r\n            <Select\r\n              className=\"field-focus-orange-border\"\r\n              placeholder=\"Select A Category\"\r\n              onChange={(e) => setCategory(e)}\r\n              allowClear\r\n            >\r\n              {allCategories.map((cat) => (\r\n                <Option value={cat._id}>{cat.name}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"price\"\r\n            label=\"Price\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input price!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              addonBefore=\"€\"\r\n              value={price}\r\n              type=\"number\"\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"weight\" label=\"Weight\">\r\n            <Input\r\n              addonBefore=\"Kg\"\r\n              value={weight}\r\n              type=\"number\"\r\n              onChange={(e) => setWeight(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"dimensions\" label=\"Dimensions\">\r\n            <Input\r\n              placeholder=\"Length\"\r\n              value={dimensions.length}\r\n              style={{ width: 100 }}\r\n              type=\"number\"\r\n              onChange={(e) =>\r\n                setDimensions({ ...dimensions, length: e.target.value })\r\n              }\r\n            />\r\n            <Input\r\n              placeholder=\"Width\"\r\n              style={{ width: 100 }}\r\n              value={dimensions.width}\r\n              type=\"number\"\r\n              onChange={(e) =>\r\n                setDimensions({ ...dimensions, width: e.target.value })\r\n              }\r\n            />\r\n            <Input\r\n              placeholder=\"Height\"\r\n              value={dimensions.height}\r\n              type=\"number\"\r\n              style={{ width: 100 }}\r\n              onChange={(e) =>\r\n                setDimensions({ ...dimensions, height: e.target.value })\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"uploadImg\"\r\n            valuePropName=\"checked\"\r\n            label=\"Upload Images\"\r\n          >\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"images\");\r\n                setMediaManagerActions([productImg, setProductImg, \"multiple\"]);\r\n              }}\r\n            >\r\n              Upload File\r\n            </Button>\r\n            <div style={{ display: \"flex\" }}>\r\n              {productImg.map((img) => (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    marginRight: \"15px\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    alt=\"\"\r\n                    src={`${process.env.REACT_APP_SERVER}/uploads/${\r\n                      typeof img === \"object\" ? img.link : img\r\n                    }`}\r\n                    height=\"100px\"\r\n                  />\r\n                  <span>\r\n                    <CloseSquareOutlined\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => removeImage(img.link)}\r\n                    />\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"inStock\"\r\n            valuePropName=\"inStock\"\r\n            label=\"In Stock\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please mark if the item is in stock!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              type=\"checkbox\"\r\n              checked={instock}\r\n              onChange={(e) => setInstock(e.target.checked)}\r\n            ></Input>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n              }}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default withRouter(UpdateProduct);\r\n",["501","502"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\UpdateCoupon.js",["503","504"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Input, Modal, Form, InputNumber, Switch, Select } from \"antd\";\r\nimport { updateCoupon } from \"../../../services/coupons\";\r\n\r\nfunction UpdateCoupon({\r\n  visible,\r\n  setVisible,\r\n  selectedCoupon,\r\n  fetchData,\r\n  allChallenges,\r\n}) {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState();\r\n  const [code, setCode] = useState(\"\");\r\n  const [active, setActive] = useState(null);\r\n  const [applicableOn, setApplicableOn] = useState([]);\r\n  const [challengesApplicableOn, setChallengesApplicableOn] = useState([]);\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      name: selectedCoupon.name,\r\n      couponCode: selectedCoupon.code,\r\n      usageCount: selectedCoupon.limitUsage,\r\n      discount: selectedCoupon.discountPercent,\r\n      active: selectedCoupon.isActive,\r\n      applicableOn: selectedCoupon.applicableOn,\r\n      challengesApplicableOn: selectedCoupon.challengesApplicableOn,\r\n    });\r\n    setCode(selectedCoupon.code);\r\n    setActive(selectedCoupon.isActive);\r\n    setApplicableOn(selectedCoupon.applicableOn);\r\n    setChallengesApplicableOn(\r\n      selectedCoupon.challengesApplicableOn ? challengesApplicableOn : []\r\n    );\r\n  }, [selectedCoupon]);\r\n  const onFinish = async (values) => {\r\n    setLoading(true);\r\n    if (code.length > 0) {\r\n      const s = {\r\n        name: values.name,\r\n        code: code,\r\n        discountPercent: parseInt(values.discount),\r\n        limitUsage: values.usageCount,\r\n        isActive: values.active,\r\n        applicableOn: values.applicableOn,\r\n        challengesApplicableOn:\r\n          challengesApplicableOn.length > 0 ? challengesApplicableOn : null,\r\n      };\r\n      const res = await updateCoupon(s, selectedCoupon._id);\r\n      fetchData();\r\n      console.log(res);\r\n    } else {\r\n      alert(\"Please enter coupon code\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      width=\"60%\"\r\n      visible={visible}\r\n      footer={false}\r\n      onCancel={() => setVisible(false)}\r\n    >\r\n      <h2 className=\"font-heading-white\">Update Coupon</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          form={form}\r\n        >\r\n          <Form.Item\r\n            label=\"Name\"\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input coupon name!\" }]}\r\n            type=\"number\"\r\n          >\r\n            <Input style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Coupon Code\" name=\"couponCode\">\r\n            <Input value={code} onChange={(e) => setCode(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Discount\"\r\n            name=\"discount\"\r\n            rules={[{ required: true, message: \"Please input discount!\" }]}\r\n            type=\"number\"\r\n          >\r\n            <Input\r\n              placeholder=\"Must be in percentage eg 10\"\r\n              type=\"number\"\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Usage Count\"\r\n            name=\"usageCount\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input number of times the code can be used!\",\r\n              },\r\n            ]}\r\n            type=\"number\"\r\n          >\r\n            <InputNumber style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n          <Form.Item label=\"Active\" name=\"active\">\r\n            <Switch\r\n              checkedChildren=\"is active\"\r\n              unCheckedChildren=\"not active\"\r\n              checked={active}\r\n              onChange={(e) => setActive(e)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\"Applicable On Specific Plan\" name=\"applicableOn\">\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={applicableOn}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setApplicableOn(e)}\r\n            >\r\n              {[\r\n                \"ALL\",\r\n                \"CHALLENGE ONE\",\r\n                \"CHALLENGE THREE\",\r\n                \"CHALLENGE TWELVE\",\r\n              ].map((e, i) => (\r\n                <Select.Option key={i + 1} value={e}>\r\n                  {e}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Applicable On Specific Challenge\"\r\n            name=\"challengesApplicableOn\"\r\n          >\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={challengesApplicableOn}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setChallengesApplicableOn(e)}\r\n            >\r\n              {allChallenges.map((e, i) => (\r\n                <Select.Option key={i + 1} value={e._id}>\r\n                  {e.challengeName}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default UpdateCoupon;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteModal.js",["505","506"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport ClappingIcon from \"../../assets/icons/large-clapping-icon.svg\";\r\nimport YelloIcon from \"../../assets/icons/yellow-diamond-icon.svg\";\r\nimport \"../../assets/challengeCompletedModal.css\";\r\nimport { Button, Input, Rate } from \"antd\";\r\nimport { ReactComponent as FacebookIcon } from \"../../assets/icons/complete-challenge-facebook-button.svg\";\r\nimport { ReactComponent as TwitterIcon } from \"../../assets/icons/complete-challenge-twitter-button.svg\";\r\nimport { ReactComponent as InstagramIcon } from \"../../assets/icons/complete-challenge-instagram-button.svg\";\r\nimport { ReactComponent as PintrestIcon } from \"../../assets/icons/complete-challenge-pinterest-button.svg\";\r\nimport { ReactComponent as LinkedinIcon } from \"../../assets/icons/complete-challenge-linkedin-button.svg\";\r\nimport { addChallengeReview } from \"../../services/createChallenge/main\";\r\nimport { getRecommandedChallenges } from \"../../services/users\";\r\nimport { userInfoContext } from \"../../contexts/UserStore\";\r\nimport ChallengeCompleteNextModal from \"./ChallengeCompleteNextModal\";\r\nimport { createPost } from \"../../services/communityPosts\";\r\nimport slug from \"elegant-slug\";\r\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\r\n\r\nconst ChallengeCompleteModal = ({\r\n  visible,\r\n  setVisible,\r\n  points,\r\n  challenge,\r\n  challengeId,\r\n  fetchData,\r\n}) => {\r\n  const userInfo = useContext(userInfoContext)[0];\r\n  const { language } = useContext(LanguageContext);\r\n  const [input, setInput] = useState(\"\");\r\n  const [rating, setRating] = useState(1);\r\n  const [currentLayout, setCurrentLayout] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [recommandedChallenges, setRecommandedChallenges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getNextChallenges();\r\n  }, []);\r\n\r\n  const getNextChallenges = async () => {\r\n    setLoading(true);\r\n    const rc = await getRecommandedChallenges(userInfo.id, language);\r\n    rc && setRecommandedChallenges(rc.recommendedchallenge);\r\n    setLoading(false);\r\n  };\r\n  const submitReview = async () => {\r\n    // console.log(challenge);\r\n    // return;\r\n    if (input.length > 0 && rating) {\r\n      const data = {\r\n        title: `I have completed ${challenge?.challengeName}`,\r\n        text: input,\r\n        image: challenge?.thumbnailLink,\r\n        type: \"Finished Completed\",\r\n        url: `/challenge/${slug(challenge?.challengeName)}/${challenge?._id}`,\r\n        language: language,\r\n      };\r\n\r\n      const res = await addChallengeReview(\r\n        challengeId,\r\n        rating,\r\n        input,\r\n        language\r\n      );\r\n      await createPost(data);\r\n\r\n      if (res.success) {\r\n        setVisible(false);\r\n        fetchData();\r\n      }\r\n      // console.log(\"ewvie\", res);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={visible}\r\n      onRequestClose={() => setVisible(false)}\r\n      contentLabel=\"Example Modal\"\r\n    >\r\n      {currentLayout === 1 ? (\r\n        <div className=\"challenge-complete-modal-container\">\r\n          <div className=\"challenge-complete-modal-container--c1\">\r\n            <img src={ClappingIcon} alt=\"clapping-icon\" />\r\n            <h3 className=\"font-heading-white\">Well done!</h3>\r\n            <p className=\"font-paragraph-white\">\r\n              {\" \"}\r\n              <img src={YelloIcon} alt=\"points-earned\" />{\" \"}\r\n              <span>{challenge?.points} points earned</span>\r\n            </p>\r\n            <span className=\"font-paragraph-white\">\r\n              You did it! Congratulations on finishing the challenge. Keep this\r\n              momentum going and continue creating these healthy habits for a\r\n              happy balanced healthy lifestyle\r\n            </span>\r\n          </div>\r\n          <div className=\"challenge-complete-modal-container--c2\">\r\n            <div className=\"challenge-complete-modal-container--c2--r1\">\r\n              <p className=\"font-paragraph-white\">\r\n                Please review this challenge.\r\n              </p>\r\n              <Input.TextArea\r\n                rows={3}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                value={input}\r\n              />\r\n              <Rate onChange={(e) => setRating(e)} value={rating} />\r\n              <button\r\n                className=\"common-transparent-button font-paragraph-white\"\r\n                onClick={submitReview}\r\n                style={{\r\n                  border: \"2px solid #ff7700\",\r\n                  display: \"block\",\r\n                  marginTop: \"10px\",\r\n                  padding: \"10px 50px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n            <div className=\"challenge-complete-modal-container--c2--r2\">\r\n              <p className=\"font-paragraph-white\">Spread the word :)</p>\r\n              <div>\r\n                <FacebookIcon className=\"challenge-completed-icon\" />\r\n                <TwitterIcon className=\"challenge-completed-icon\" />\r\n                <InstagramIcon className=\"challenge-completed-icon\" />\r\n                <LinkedinIcon className=\"challenge-completed-icon\" />\r\n                <PintrestIcon className=\"challenge-completed-icon\" />\r\n              </div>\r\n              <button\r\n                className=\"common-transparent-button font-paragraph-white\"\r\n                onClick={() => setCurrentLayout(2)}\r\n                style={{\r\n                  border: \"2px solid #ff7700\",\r\n                  display: \"block\",\r\n                  marginTop: \"10px\",\r\n                  padding: \"10px 50px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <ChallengeCompleteNextModal\r\n          goBack={() => setCurrentLayout(1)}\r\n          loading={loading}\r\n          recommandedChallenges={recommandedChallenges}\r\n        />\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\nexport default ChallengeCompleteModal;\r\n",["507","508"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\index.js",["509"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport UserStore from \"./contexts/UserStore\";\r\nimport LanguageStore, { LanguageProvider } from \"./contexts/LanguageContext\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"./App.css\";\r\nimport { setChonkyDefaults } from \"chonky\";\r\nimport { ChonkyIconFA } from \"chonky-icon-fontawesome\";\r\nimport \"react-modal-video/scss/modal-video.scss\";\r\nimport PaymentProcessStore from \"./contexts/PaymentProcessStore\";\r\nimport { fetchTranslations } from \"./helpers/translationHelpers\";\r\n\r\n// Somewhere in your `index.ts`:\r\nsetChonkyDefaults({ iconComponent: ChonkyIconFA, disableDragAndDrop: true });\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <UserStore>\r\n      <PaymentProcessStore>\r\n        <LanguageProvider fetchTranslations={fetchTranslations}>\r\n          <App />\r\n        </LanguageProvider>\r\n      </PaymentProcessStore>\r\n    </UserStore>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\UserStore.js",[],["510","511"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Nutrition.js",["512"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Login.js",["513","514","515","516","517","518"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Input, Form } from \"antd\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport \"../assets/login.css\";\r\nimport \"../assets/home.css\";\r\nimport FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport Logo from \"../images/logo.png\";\r\n\r\nimport {\r\n  loginUser,\r\n  loginUserWithGoogle,\r\n  loginUserWithFacebook,\r\n} from \"../services/authentication\";\r\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\r\nimport setAuthToken from \"../helpers/setAuthToken\";\r\nimport { getUserPoints } from \"../services/users\";\r\nimport { T } from \"../components/Translate\";\r\n\r\nfunction Login(props) {\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [userPoints, setUserPoints] = useContext(userPointsContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errror, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"jwtToken\")) {\r\n      props.history.push(\"/user/dashboard\");\r\n    }\r\n  }, []);\r\n\r\n  const responseFacebook = async (response) => {\r\n    // setLoading(true);\r\n    const res = await loginUserWithFacebook({\r\n      id: response.id,\r\n      email: response.email,\r\n    });\r\n    if (!res.success) {\r\n      console.log(res);\r\n      setError(\"Unable to login.\");\r\n      // setLoading(false);\r\n    } else {\r\n      setError(\"\");\r\n      // setLoading(false);\r\n      setUserInfo({\r\n        ...userInfo,\r\n        id: res.res.user_id,\r\n        role: res.res.role,\r\n        username: res.res.username,\r\n        authenticated: true,\r\n      });\r\n      console.log(res);\r\n      localStorage.setItem(\"jwtToken\", res.res.token);\r\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n      // localStorage.setItem(\"role\", res.res.role);\r\n      if (\r\n        res.res.role === \"admin\" ||\r\n        res.res.role === \"trainer\" ||\r\n        res.res.role === \"nutrist\" ||\r\n        res.res.role === \"blogger\" ||\r\n        res.res.role === \"shopmanager\"\r\n      ) {\r\n        props.history.push(\"/admin/dashboard\");\r\n        return;\r\n      }\r\n      // \"admin\",\r\n      //   \"trainer\",\r\n      //   \"nutrist\",\r\n      //   \"blogger\",\r\n      //   \"shopmanager\",\r\n      if (res.res.role === \"customer\") {\r\n        props.history.push(\"/user/dashboard\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const responseGoogle = async (response) => {\r\n    return;\r\n    // setLoading(true);\r\n    console.log(\"response google\");\r\n    const res = await loginUserWithGoogle({\r\n      googleId: response.googleId,\r\n      email: response.profileObj.email,\r\n    });\r\n    if (!res.success) {\r\n      console.log(res);\r\n      setError(\"Unable to login.\");\r\n      // setLoading(false);\r\n    } else {\r\n      setError(\"\");\r\n      // setLoading(false);\r\n      setUserInfo({\r\n        ...userInfo,\r\n        id: res.res.user_id,\r\n        role: res.res.role,\r\n        username: res.res.username,\r\n        authenticated: true,\r\n      });\r\n      console.log(res);\r\n      localStorage.setItem(\"jwtToken\", res.res.token);\r\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n      // localStorage.setItem(\"role\", res.res.role);\r\n      if (res.res.role === \"admin\") {\r\n        props.history.push(\"/admin/dashboard\");\r\n        return;\r\n      }\r\n      if (res.res.role === \"customer\") {\r\n        props.history.push(\"/user/dashboard\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = () => {};\r\n  const onFinish = async (values) => {\r\n    setLoading(true);\r\n    const res = await loginUser(values.username, values.password);\r\n    if (!res.success) {\r\n      console.log(res);\r\n      setError(\r\n        \"Unable to login. Please make sure you've entered correct username and password.\"\r\n      );\r\n      setLoading(false);\r\n    } else {\r\n      setError(\"\");\r\n      setLoading(false);\r\n      setUserInfo({\r\n        ...userInfo,\r\n        id: res.res.user_id,\r\n        email: res.res.email,\r\n        // isActive: ,\r\n        role: res.res.role,\r\n        username: res.res.username,\r\n        authenticated: true,\r\n      });\r\n      console.log(\"res from login\", res);\r\n      localStorage.setItem(\"jwtToken\", res.res.token);\r\n      localStorage.setItem(\"isActive\", res.res.isActive);\r\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n      getUserPoints(userPoints, setUserPoints);\r\n      // localStorage.setItem(\"role\", res.res.role);\r\n      if (\r\n        res.res.role === \"admin\" ||\r\n        res.res.role === \"trainer\" ||\r\n        res.res.role === \"nutrist\" ||\r\n        res.res.role === \"blogger\" ||\r\n        res.res.role === \"shopmanager\"\r\n      ) {\r\n        props.history.push(\"/admin/dashboard\");\r\n        return;\r\n      }\r\n      if (res.res.role === \"customer\") {\r\n        props.history.push(\"/user/dashboard\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"login-container\">\r\n        <div className=\"login-container-column1\">\r\n          <img className=\"login-logo\" src={Logo} alt=\"logo\" />\r\n          <h1 className=\"font-heading-white\">\r\n            <T>login.login</T>\r\n          </h1>\r\n          <Form\r\n            layout=\"vertical\"\r\n            name=\"basic\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <div className=\"login-textfield-box\">\r\n              <Form.Item\r\n                label={\r\n                  <span className=\"font-paragraph-white\">\r\n                    <T>login.username</T>\r\n                  </span>\r\n                }\r\n                name=\"username\"\r\n                rules={[\r\n                  { required: true, message: \"Please input your username!\" },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"login-textfield-box\">\r\n              <Form.Item\r\n                label={\r\n                  <span className=\"font-paragraph-white\">\r\n                    <T>login.password</T>\r\n                  </span>\r\n                }\r\n                name=\"password\"\r\n                rules={[\r\n                  { required: true, message: \"Please input your password!\" },\r\n                ]}\r\n                hasFeedback\r\n              >\r\n                <Input.Password />\r\n              </Form.Item>\r\n            </div>\r\n            <Link to=\"/forgot-password\" className=\"login-forgot-password\">\r\n              <T>login.forgot_pass</T>\r\n            </Link>\r\n            <div style={{ textAlign: \"center\", margin: \"10px 0\" }}>\r\n              {loading ? (\r\n                <LoadingOutlined\r\n                  style={{ color: \"#ff7700\", fontSize: \"30px\" }}\r\n                />\r\n              ) : (\r\n                <button\r\n                  className=\"common-orange-button signup-btn\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  <span className=\"font-paragraph-white\">\r\n                    <T>login.login</T>\r\n                  </span>\r\n                </button>\r\n              )}\r\n            </div>\r\n            <p\r\n              className=\"font-paragraph-white\"\r\n              style={{ color: \"#ff4d4f\", margin: \"5px\" }}\r\n            >\r\n              {errror}\r\n            </p>\r\n          </Form>\r\n\r\n          <FacebookLogin\r\n            appId={process.env.REACT_APP_FACEBOOK_APP_ID}\r\n            fields=\"name,email,picture\"\r\n            callback={responseFacebook}\r\n            render={(renderProps) => (\r\n              <button\r\n                class=\"loginBtn loginBtn--facebook\"\r\n                onClick={renderProps.onClick}\r\n              >\r\n                Login With Facebook\r\n              </button>\r\n            )}\r\n          />\r\n          <GoogleLogin\r\n            clientId={process.env.REACT_APP_GOOGLE_APP_ID}\r\n            render={(renderProps) => (\r\n              <button\r\n                class=\"loginBtn loginBtn--google\"\r\n                onClick={renderProps.onClick}\r\n                disabled={renderProps.disabled}\r\n              >\r\n                Login with Google\r\n              </button>\r\n            )}\r\n            buttonText=\"Login\"\r\n            onSuccess={responseGoogle}\r\n            onFailure={responseGoogle}\r\n          />\r\n        </div>\r\n        <div className=\"login-container-column2\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n",["519","520"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\goals.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\NewBlog.js",["521","522","523","524"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Input, Button, Select, Modal, List } from \"antd\";\r\nimport { CloseSquareOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport {\r\n  createBlog,\r\n  createBlogCategory,\r\n  getAllBlogCategories,\r\n  getAllBlogs,\r\n  getAllUserBlogs,\r\n  removeBlogCategory,\r\n  updateBlog,\r\n} from \"../../../services/blogs\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport EditCategoryName from \"./EditCategoryName\";\r\nimport TextEditor from \"../../TextEditor\";\r\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\r\nimport { createPost } from \"../../../services/posts\";\r\nimport slug from \"elegant-slug\";\r\nimport ReactHTMLParser from \"react-html-parser\";\r\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\r\nimport LanguageSelector from \"../../LanguageSelector/LanguageSelector\";\r\nimport { T } from \"../../Translate\";\r\nconst { Option } = Select;\r\n\r\nfunction NewBlog({ setCurrentSelection }) {\r\n  // user context\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const { language } = useContext(LanguageContext);\r\n\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [paragraph, setParagraph] = useState(\"\");\r\n  const [featuredImage, setFeaturedImage] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [videoLink, setVideLink] = useState(\"\");\r\n  //   category\r\n  const [category, setCategory] = useState(\"\");\r\n  const [allCategories, setAllCategories] = useState([]);\r\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n  const [categoryModalVisible, setCategoryModalVisible] = useState(false);\r\n  const [editCategoryNameModalVisible, setEditCategoryModelVisible] =\r\n    useState(false);\r\n\r\n  const [selectedCategoryForUpdate, setSelectedCategoryForUpdate] = useState(\r\n    {}\r\n  );\r\n  const [isPublic, setIsPublic] = useState(false);\r\n  const [allowComments, setAllowComments] = useState(false);\r\n  const [allowReviews, setAllowReviews] = useState(false);\r\n  const [userCreatePost, setUserCreatePost] = useState(false);\r\n  // ----\r\n  const [selectedBlog, setSelectedBlog] = useState(\"\");\r\n  const [allBlogs, setAllBlogs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fethData();\r\n    getAllBlogsFromBackend();\r\n  }, [language]);\r\n\r\n  const fethData = async () => {\r\n    const data = await getAllBlogCategories(language);\r\n    setAllCategories(data.categories);\r\n    console.log(data);\r\n  };\r\n\r\n  async function getAllBlogsFromBackend() {\r\n    const data = await getAllUserBlogs(\r\n      language === \"english\" ? \"dutch\" : \"english\"\r\n    );\r\n    // console.log(data);\r\n    if (data && data.blogs) {\r\n      setAllBlogs(data.blogs);\r\n    }\r\n  }\r\n\r\n  async function updateSelectedBlog(id) {\r\n    await updateBlog(\r\n      {\r\n        alternativeLanguage: id,\r\n      },\r\n      selectedBlog\r\n    );\r\n  }\r\n  const createNewBlog = async () => {\r\n    let flag = false;\r\n    if (title && paragraph && featuredImage && videoLink && category) {\r\n      flag = true;\r\n    }\r\n    if (!flag) {\r\n      alert(\"Please fill all the information\");\r\n    } else {\r\n      setLoading(true);\r\n      const vals = {\r\n        language: language,\r\n        title,\r\n        paragraph,\r\n        featuredImage: featuredImage.link,\r\n        videoLink: videoLink.link,\r\n        category,\r\n        user: userInfo.id,\r\n        isPublic: isPublic,\r\n        allowComments: allowComments,\r\n        allowReviews: allowReviews,\r\n      };\r\n      if (selectedBlog) vals.alternativeLanguage = selectedBlog;\r\n\r\n      const res = await createBlog(vals);\r\n      setLoading(false);\r\n      if (res) {\r\n        // return;\r\n        userCreatePost && createAPost(res.newBlog._id);\r\n        selectedBlog && updateSelectedBlog(res.newBlog._id);\r\n        setCurrentSelection(2.1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const createAPost = async (id) => {\r\n    const values = {\r\n      title: title,\r\n      image: featuredImage.link,\r\n      text: \"\",\r\n      type: \"Magazine\",\r\n      language: language,\r\n      url: `/magazine/${slug(title)}/${id}`,\r\n    };\r\n    await createPost(values);\r\n    // setCreatePostModalVisible(false);\r\n    // console.log(values);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(\"Success:\", values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* media manager */}\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      {/* edit category name modal */}\r\n      <EditCategoryName\r\n        editCategoryNameModalVisible={editCategoryNameModalVisible}\r\n        setEditCategoryModelVisible={setEditCategoryModelVisible}\r\n        fethData={fethData}\r\n        selectedForUpdate={selectedCategoryForUpdate}\r\n        titleName=\"Update Category\"\r\n      />\r\n      {/* modal to create a new meal type  */}\r\n      <Modal\r\n        onCancel={() => setCategoryModalVisible(false)}\r\n        footer={false}\r\n        visible={categoryModalVisible}\r\n      >\r\n        <p className=\"font-paragraph-white\">Manage Blog Category</p>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Input\r\n            value={newCategoryName}\r\n            onChange={(e) => setNewCategoryName(e.target.value)}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            onClick={async () => {\r\n              if (newCategoryName.length > 0) {\r\n                await createBlogCategory({\r\n                  name: newCategoryName,\r\n                  language: language,\r\n                });\r\n                // setEquipmentModal(false);\r\n                fethData();\r\n              }\r\n            }}\r\n            style={{\r\n              backgroundColor: \"var(--color-orange)\",\r\n              borderColor: \"var(--color-orange)\",\r\n              marginLeft: \"5px\",\r\n            }}\r\n          >\r\n            Create\r\n          </Button>\r\n        </div>\r\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n          <span className=\"font-subheading-white\">All Categories</span>\r\n          <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={allCategories}\r\n            renderItem={(cat) => (\r\n              <List.Item\r\n                style={{\r\n                  backgroundColor: \"#fff\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                <span>{cat.name}</span>\r\n                <span>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      await removeBlogCategory(cat._id);\r\n                      fethData();\r\n                    }}\r\n                    style={{ marginRight: \"10px\" }}\r\n                    type=\"primary\"\r\n                    danger\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => {\r\n                      setSelectedCategoryForUpdate(cat);\r\n                      setEditCategoryModelVisible(true);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </span>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </div>\r\n      </Modal>\r\n      <h2 className=\"font-heading-black\">New Blog</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <div style={{ marginTop: \"-40px\", marginBottom: \"20px\" }}>\r\n          <span style={{ marginRight: \"5px\" }}>Select Language:</span>\r\n          <LanguageSelector notFromNav={true} />\r\n          <div>\r\n            <span\r\n              style={{ marginRight: \"5px\" }}\r\n            >{`Select alternative language version`}</span>\r\n            <Select\r\n              style={{ width: \"500px\" }}\r\n              onChange={(e) => setSelectedBlog(e)}\r\n            >\r\n              <Option value={\"\"}>-</Option>\r\n              {allBlogs.map((r, i) => (\r\n                <Option key={i} value={r._id}>\r\n                  {r.title}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Title\"\r\n            name=\"recipeName\"\r\n            rules={[{ required: true, message: \"Please input title!\" }]}\r\n          >\r\n            <Input value={title} onChange={(e) => setTitle(e.target.value)} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Featured Image\"\r\n            name=\"featuredImage\"\r\n            rules={[\r\n              { required: true, message: \"Please input featured image!\" },\r\n            ]}\r\n          >\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"images\");\r\n                setMediaManagerActions([featuredImage, setFeaturedImage]);\r\n              }}\r\n            >\r\n              Upload File\r\n            </Button>\r\n            {featuredImage && (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  marginRight: \"15px\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                <img\r\n                  alt=\"\"\r\n                  src={`${process.env.REACT_APP_SERVER}/uploads/${featuredImage.link}`}\r\n                  height=\"auto\"\r\n                  width={\"80%\"}\r\n                />\r\n                <span>\r\n                  {featuredImage.name}{\" \"}\r\n                  <CloseSquareOutlined\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => setFeaturedImage(\"\")}\r\n                  />\r\n                </span>\r\n              </div>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Paragraph\"\r\n            name=\"paragraph\"\r\n            rules={[{ required: true }]}\r\n          >\r\n            {/* <Input.TextArea\r\n              rows={20}\r\n              value={paragraph}\r\n              onChange={(e) => setParagraph(e.target.value)}\r\n            /> */}\r\n            <TextEditor value={paragraph} setValue={setParagraph} />\r\n          </Form.Item>\r\n          <Form.Item label=\"Video Link\" name=\"videoLink\">\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"videos\");\r\n                setMediaManagerActions([videoLink, setVideLink]);\r\n              }}\r\n            >\r\n              Upload File\r\n            </Button>\r\n            {videoLink && (\r\n              <div className=\"font-paragraph-black\">\r\n                {videoLink.name}{\" \"}\r\n                <CloseSquareOutlined\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => setVideLink(\"\")}\r\n                />\r\n              </div>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item label=\"Category\" name=\"category\">\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Please select\"\r\n              value={category}\r\n              onChange={(e) => setCategory(e)}\r\n            >\r\n              {allCategories.map((cat) => (\r\n                <Option value={cat._id}>{cat.name}</Option>\r\n              ))}\r\n            </Select>\r\n            <Button\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                border: \"none\",\r\n                color: \"white\",\r\n                float: \"right\",\r\n                marginTop: \"5px\",\r\n              }}\r\n              onClick={() => setCategoryModalVisible(true)}\r\n            >\r\n              Manage Blog Categories\r\n            </Button>\r\n          </Form.Item>\r\n          {userInfo.role === \"admin\" && (\r\n            <>\r\n              {\" \"}\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={userCreatePost}\r\n                  onChange={(e) => setUserCreatePost(e.target.checked)}\r\n                >\r\n                  Create a post\r\n                </Checkbox>\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={isPublic}\r\n                  onChange={(e) => setIsPublic(e.target.checked)}\r\n                >\r\n                  Make Public\r\n                </Checkbox>\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={allowReviews}\r\n                  onChange={(e) => setAllowReviews(e.target.checked)}\r\n                >\r\n                  Allow Reviews\r\n                </Checkbox>\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={allowComments}\r\n                  onChange={(e) => setAllowComments(e.target.checked)}\r\n                >\r\n                  Allow Comments\r\n                </Checkbox>\r\n              </Form.Item>\r\n            </>\r\n          )}\r\n          {loading ? (\r\n            <LoadingOutlined style={{ color: \"#ff7700\", fontSize: \"30px\" }} />\r\n          ) : (\r\n            <Button\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                border: \"none\",\r\n                color: \"white\",\r\n                marginTop: \"5px\",\r\n              }}\r\n              onClick={() => createNewBlog()}\r\n            >\r\n              <T>adminDashboard.create</T>\r\n            </Button>\r\n          )}\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewBlog;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\AllExercises.js",["525"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Select, Table, Space, Input } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  getAllUserExercises,\r\n  removeExercise,\r\n} from \"../../../services/createChallenge/main\";\r\nimport UpdateExercise from \"./UpdateExercise\";\r\nimport { getAllTrainers } from \"../../../services/trainers\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport { T } from \"../../Translate\";\r\n// import UpdateExercises from \"./UpdateExercises\";\r\n\r\nfunction AllExercises() {\r\n  const [filterAllExercises, setFilterAllExercises] = useState([]);\r\n  const [allExercises, setAllExercises] = useState([]);\r\n  const [selectedExercisesForUpdate, setSelectedExercisesForUpdate] = useState(\r\n    {}\r\n  );\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [allTrainers, setAllTrainers] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n\r\n  useEffect(() => {\r\n    fetchExercises();\r\n    fetchTrainers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filter === \"all\") {\r\n      setFilterAllExercises(allExercises);\r\n      return;\r\n    }\r\n    // console.log(allExercises)\r\n    const admins = allExercises.filter((e) => e.trainer._id === filter);\r\n    setFilterAllExercises(admins);\r\n  }, [allExercises, filter]);\r\n\r\n  const fetchTrainers = async () => {\r\n    const res = await getAllTrainers();\r\n    if (res) {\r\n      setAllTrainers(res.trainers);\r\n    }\r\n  };\r\n\r\n  const fetchExercises = async () => {\r\n    const c = await getAllUserExercises(\"\");\r\n    console.log(\"===================>\", c);\r\n    setAllExercises(c.exercises);\r\n    setFilterAllExercises(c.exercises);\r\n  };\r\n\r\n  const openExercisesUpdater = (record) => {\r\n    setSelectedExercisesForUpdate(record);\r\n    setOpenModal(true);\r\n  };\r\n\r\n  const deleteExercises = async (c) => {\r\n    await removeExercise(c._id);\r\n    fetchExercises();\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Exercise ID\",\r\n      dataIndex: \"_id\",\r\n      key: \"_id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Exercise Name\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Trainer\",\r\n      dataIndex: \"trainer\",\r\n      key: \"trainer\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text.username}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Updated At\",\r\n      dataIndex: \"updatedAt\",\r\n      key: \"updatedAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Created By\",\r\n      dataIndex: \"user\",\r\n      key: \"user\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text && text.username}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"primary\" onClick={() => openExercisesUpdater(record)}>\r\n            <T>adminDashboard.edit</T>\r\n          </Button>\r\n          <Button type=\"danger\" onClick={() => deleteExercises(text)}>\r\n            <T>adminDashboard.delete</T>\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // const duplicateExercises = (i, r) => {\r\n  //   setAllExercises([...allExercises, { ...i, id: i.id + 10 }]);\r\n  // };\r\n  return (\r\n    <div>\r\n      <UpdateExercise\r\n        show={openModal}\r\n        setShow={setOpenModal}\r\n        key={selectedExercisesForUpdate ? selectedExercisesForUpdate._id : \"\"}\r\n        exerciseValues={selectedExercisesForUpdate}\r\n        fetchExercises={fetchExercises}\r\n        allTrainers={allTrainers}\r\n      />\r\n      <h2 className=\"font-heading-black\">All Exercises</h2>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        {userInfo.role === \"admin\" && (\r\n          <div>\r\n            <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\r\n              Filter By Trainer:\r\n            </span>\r\n\r\n            <Select\r\n              defaultValue=\"\"\r\n              style={{ width: 120, marginLeft: \"10px\" }}\r\n              onChange={(e) => setFilter(e)}\r\n            >\r\n              <Select.Option key={1} value={\"all\"}>\r\n                All\r\n              </Select.Option>\r\n              {allTrainers &&\r\n                allTrainers.map((t, i) => (\r\n                  <Select.Option key={i} value={t._id}>\r\n                    {t.username}\r\n                  </Select.Option>\r\n                ))}\r\n            </Select>\r\n          </div>\r\n        )}\r\n\r\n        <Input\r\n          placeholder=\"Search Exercises By Title\"\r\n          onChange={(e) =>\r\n            setFilterAllExercises(\r\n              allExercises.filter((exercise) =>\r\n                exercise.title\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n\r\n        <Input\r\n          style={{ marginTop: \"10px\" }}\r\n          placeholder=\"Search Exercises By ID\"\r\n          onChange={(e) =>\r\n            setFilterAllExercises(\r\n              allExercises.filter((exercise) =>\r\n                exercise._id\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Table columns={columns} dataSource={filterAllExercises} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllExercises;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeAdditionalTab.js",["526","527","528","529","530"],"import React, { useState, useContext } from \"react\";\r\nimport { Select, Input, Button, Checkbox, Upload, List, message } from \"antd\";\r\nimport { v4 } from \"uuid\";\r\nimport { UploadOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport { T } from \"../../Translate\";\r\n\r\nconst Option = Select.Option;\r\n\r\nfunction NewChallengeAdditionalTab({\r\n  results,\r\n  setResults,\r\n  allProducts,\r\n  setAllProducts,\r\n  makePublic,\r\n  setMakePublic,\r\n  allowComments,\r\n  setAllowComments,\r\n  allowReviews,\r\n  setAllowReviews,\r\n  additionalProducts,\r\n  setAdditionalProducts,\r\n  informationList,\r\n  setInformationList,\r\n  createChallenge,\r\n  update,\r\n  updateChallenge,\r\n  userCreatePost,\r\n  setUserCreatePost,\r\n}) {\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const userInfo = useContext(userInfoContext)[0];\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  var info = {\r\n    id: v4(),\r\n    icon: \"\",\r\n    thumbnailBase64: \"\",\r\n    text: \"\",\r\n  };\r\n\r\n  const handleInfoTextChange = (value, id) => {\r\n    let w = [...informationList];\r\n    w = w.map((i) => {\r\n      if (i.id === id) {\r\n        return {\r\n          ...i,\r\n          text: value,\r\n        };\r\n      }\r\n      return i;\r\n    });\r\n    setInformationList(w);\r\n  };\r\n  const addInfoToList = () => {\r\n    setInformationList((prev) => [...prev, info]);\r\n  };\r\n  const uploadIcon = (id, file) => {\r\n    var infoList = informationList.map((i) => {\r\n      if (i.id === id) {\r\n        return {\r\n          ...i,\r\n          file: file,\r\n        };\r\n      }\r\n      return i;\r\n    });\r\n    console.log(infoList);\r\n    setInformationList(infoList);\r\n  };\r\n\r\n  const removeListItem = (id) => {\r\n    var n = informationList.filter((i) => i.id !== id);\r\n    setInformationList(n);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <RemoteMediaManager\r\n          visible={mediaManagerVisible}\r\n          setVisible={setMediaManagerVisible}\r\n          type={mediaManagerType}\r\n          actions={mediaManagerActions}\r\n        />\r\n        <p className=\"font-subheading-black\">\r\n          <T>adminDashboard.challenges.sp</T>\r\n        </p>\r\n        <Select\r\n          mode=\"multiple\"\r\n          showSearch\r\n          style={{ width: \"100%\" }}\r\n          optionFilterProp=\"children\"\r\n          value={additionalProducts}\r\n          onChange={(e) => setAdditionalProducts(e)}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {allProducts.map((m, i) => (\r\n            <Option value={m._id}>{m.name}</Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      <div>\r\n        <p className=\"font-subheading-black\">Results</p>\r\n        <Input.TextArea\r\n          className=\"font-paragraph-black\"\r\n          value={results}\r\n          onChange={(e) => setResults(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <p className=\"font-subheading-black\">\r\n          <T>adminDashboard.challenges.il</T>\r\n        </p>\r\n        {/* <Input.TextArea\r\n          maxLength={200}\r\n          showCount\r\n          className=\"font-paragraph-black\"\r\n          value={info}\r\n          onChange={(e) => setInfo(e.target.value)}\r\n        /> */}\r\n        <List\r\n          header={\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n              <Button onClick={addInfoToList}>\r\n                <T>adminDashboard.challenges.af</T>\r\n              </Button>\r\n            </div>\r\n          }\r\n          footer={false}\r\n          bordered\r\n          dataSource={informationList}\r\n          renderItem={(info) => (\r\n            <List.Item\r\n              key={info.id}\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: \"0.1fr 1fr 1fr\",\r\n                gridGap: \"20px\",\r\n              }}\r\n            >\r\n              <Button type=\"danger\" onClick={() => removeListItem(info.id)}>\r\n                X\r\n              </Button>\r\n              <Input.TextArea\r\n                rows={4}\r\n                placeholder=\"Input Information\"\r\n                value={info.text}\r\n                onChange={(e) => handleInfoTextChange(e.target.value, info.id)}\r\n              />\r\n              <div>\r\n                {/* <Upload\r\n                  showUploadList={false}\r\n                  beforeUpload={beforeUpload}\r\n                  customRequest={dummyRequest}\r\n                  onChange={(e) => handleChange(e, info.id)}\r\n                  style={{ width: \"100px\" }}\r\n                > */}\r\n                {info.file ? (\r\n                  <img\r\n                    src={`${process.env.REACT_APP_SERVER}/uploads/${info.file.link}`}\r\n                    alt=\"\"\r\n                    height=\"100px\"\r\n                    width=\"120px\"\r\n                  />\r\n                ) : (\r\n                  <>\r\n                    <p\r\n                      className=\"font-paragraph-white\"\r\n                      style={{\r\n                        color: \"var(--color-orange)\",\r\n                        fontWeight: \"600\",\r\n                      }}\r\n                    >\r\n                      Upload Icon\r\n                    </p>\r\n                    <Button\r\n                      className=\"new-workout-creator-container-1-btn font-paragraph-white\"\r\n                      style={{ marginTop: 0 }}\r\n                      onClick={() => {\r\n                        setMediaManagerVisible(true);\r\n                        setMediaManagerType(\"images\");\r\n                        setMediaManagerActions([\"\", uploadIcon, info.id]);\r\n                      }}\r\n                      icon={<UploadOutlined />}\r\n                    >\r\n                      Click to Upload\r\n                    </Button>\r\n                  </>\r\n                )}\r\n\r\n                {/* </Upload> */}\r\n              </div>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </div>\r\n      {userInfo.role === \"admin\" && (\r\n        <>\r\n          <div>\r\n            <Checkbox\r\n              checked={allowComments}\r\n              onChange={(e) => setAllowComments(e.target.checked)}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              <T>adminDashboard.challenges.allowcb</T>\r\n            </Checkbox>\r\n          </div>\r\n          <div>\r\n            <Checkbox\r\n              checked={allowReviews}\r\n              onChange={(e) => setAllowReviews(e.target.checked)}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              <T>adminDashboard.challenges.allowrv</T>\r\n            </Checkbox>\r\n          </div>\r\n          <div>\r\n            <Checkbox\r\n              checked={makePublic}\r\n              onChange={(e) => setMakePublic(e.target.checked)}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              <T>adminDashboard.challenges.mp</T>\r\n            </Checkbox>\r\n          </div>\r\n          {!update && (\r\n            <div>\r\n              <Checkbox\r\n                checked={userCreatePost}\r\n                onChange={(e) => setUserCreatePost(e.target.checked)}\r\n                className=\"font-paragraph-black\"\r\n              >\r\n                Create a post\r\n              </Checkbox>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n      {update ? (\r\n        <Button\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            backgroundColor: \"var(--color-orange)\",\r\n            border: \"none\",\r\n            marginTop: \"20px\",\r\n          }}\r\n          onClick={updateChallenge}\r\n        >\r\n          Update Challenge\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            backgroundColor: \"var(--color-orange)\",\r\n            border: \"none\",\r\n            marginTop: \"20px\",\r\n          }}\r\n          onClick={createChallenge}\r\n        >\r\n          <T>adminDashboard.challenges.createAC</T>\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewChallengeAdditionalTab;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Common\\ReviewsModal.js",["531","532"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { Input, Button, Rate } from \"antd\";\r\n// import { addNewComment } from \"../../services/posts\";\r\nimport Modal from \"react-modal\";\r\nimport \"../../assets/challengeReviewModal.css\";\r\nimport moment from \"moment\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\nimport TopIcon from \"../../assets/icons/review-challenge-header-icon.svg\";\r\nimport BackIcon from \"../../assets/icons/review-challenge-icon.svg\";\r\nimport { addRecipeReview } from \"../../services/recipes\";\r\nimport { userInfoContext } from \"../../contexts/UserStore\";\r\n\r\nfunction ReviewsModal({ item, visible, setVisible, type, fetchData }) {\r\n  const [alreadyReviewd, setAlreadyReviewd] = useState(false);\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [newReview, setNewReview] = useState({ text: \"\", rating: 1 });\r\n  const [allReviews, setAllReviews] = useState([]);\r\n  const { width } = useWindowDimensions();\r\n  const customStyles = {\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      width: width < 700 ? \"90%\" : \"60%\",\r\n      overflow: \"hidden\",\r\n      // height:\"600px\"\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(item);\r\n    setAllReviews(item.reviews);\r\n    const g =\r\n      item.reviews && item.reviews.filter((f) => f.user._id === userInfo.id);\r\n    if (g && g.length > 0) {\r\n      setAlreadyReviewd(true);\r\n    } else {\r\n      setAlreadyReviewd(false);\r\n    }\r\n    //   setAllComments(post.comments ? post.comments : []);\r\n  }, [item]);\r\n\r\n  const addReview = async () => {\r\n    if (newReview.text.length > 0) {\r\n      if (type === \"recipes\") {\r\n        const n = await addRecipeReview(\r\n          item._id,\r\n          newReview.text,\r\n          newReview.rating\r\n        );\r\n        setVisible(false);\r\n        fetchData();\r\n        console.log(n);\r\n      }\r\n      // const n = await addNewComment(post._id, { text: newComment });\r\n      console.log(newReview);\r\n      // setAllComments(n);\r\n      // setNewComment(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={visible}\r\n      onRequestClose={() => {\r\n        setVisible(false);\r\n      }}\r\n      style={customStyles}\r\n      contentLabel=\"Comments\"\r\n    >\r\n      <div className=\"challenge-review-modal-header\">\r\n        <span>\r\n          <img src={TopIcon} alt=\"\" />\r\n          <span className=\"font-paragraph-white\" style={{ marginLeft: \"10px\" }}>\r\n            REVIEWS\r\n          </span>\r\n        </span>\r\n        <CloseOutlined\r\n          style={{ color: \"#fff\", fontSize: \"26px\", cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            setVisible(false);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"challenge-review-modal\">\r\n        <Scrollbars style={{ height: \"300px\" }}>\r\n          {allReviews.length > 0 ? (\r\n            allReviews.map((review) => (\r\n              // <div className=\"challenge-profile-comment font-paragraph-white\">\r\n              //   <span className=\"challenge-profile-comment-username\">\r\n              //     <UserOutlined /> {comment.username}\r\n              //   </span>\r\n              //   <span>{comment.text}</span>\r\n              // </div>\r\n              <div\r\n                className=\"comment-container\"\r\n                style={{ marginBottom: width < 700 ? \"20px\" : \"10px\" }}\r\n              >\r\n                <div\r\n                  className=\"comment-container-c1 font-paragraph-white\"\r\n                  style={{\r\n                    alignItems: \"flex-start\",\r\n                    flexDirection: width < 700 ? \"column\" : \"row\",\r\n                  }}\r\n                >\r\n                  <span>\r\n                    <Avatar src={review.user.avatarLink} shape=\"square\" />{\" \"}\r\n                    <p\r\n                      style={{\r\n                        marginLeft: \"5px\",\r\n                        fontWeight: \"bolder\",\r\n                        fontSize: \"16px\",\r\n                        marginTop: \"0\",\r\n                        // border: \"2px solid red\",\r\n                        width: \"140px\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    >\r\n                      {review.user.username}\r\n                    </p>\r\n                  </span>\r\n                  <div\r\n                    style={{\r\n                      paddingLeft: width < 700 ? \"0\" : \"20px\",\r\n                    }}\r\n                  >\r\n                    <Rate value={review.rating} disabled={true} />\r\n                    <div\r\n                      className=\"comment-container-c2 font-paragraph-white\"\r\n                      style={{\r\n                        padding: 0,\r\n                        fontWeight: \"200\",\r\n                        fontSize: \"14px\",\r\n                      }}\r\n                    >\r\n                      {review.comment}\r\n                    </div>\r\n                    <div\r\n                      className=\"font-paragraph-white comment-container-c3\"\r\n                      style={{ color: \"#82868b\", padding: 0 }}\r\n                    >\r\n                      {moment(review.createdAt).format(\"MMM, Do YY\")}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <img\r\n              src={BackIcon}\r\n              alt=\"\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                transform: \"translate(-50%, -50%)\",\r\n              }}\r\n            />\r\n          )}\r\n        </Scrollbars>\r\n        {localStorage.getItem(\"jwtToken\") ? (\r\n          !alreadyReviewd ? (\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Avatar\r\n                  src={`${process.env.REACT_APP_SERVER}/${userInfo.avatar}`}\r\n                  shape=\"square\"\r\n                  style={{ marginRight: \"10px\" }}\r\n                />\r\n                <span style={{ width: \"100%\" }}>\r\n                  <Rate\r\n                    style={{ marginBottom: \"10px\" }}\r\n                    onChange={(e) =>\r\n                      setNewReview((prevalue) => ({ ...prevalue, rating: e }))\r\n                    }\r\n                    value={newReview.rating}\r\n                  />\r\n\r\n                  <Input.TextArea\r\n                    rows=\"3\"\r\n                    placeholder=\"Write your review here\"\r\n                    value={newReview.text}\r\n                    onChange={(e) =>\r\n                      setNewReview((preValue) => ({\r\n                        ...preValue,\r\n                        text: e.target.value,\r\n                      }))\r\n                    }\r\n                  />\r\n                </span>\r\n              </span>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                  margin: \"10px\",\r\n                }}\r\n              >\r\n                <Button\r\n                  className=\"font-paragraph-white\"\r\n                  style={{\r\n                    padding: \"3px 20px\",\r\n                    color: \"#fff\",\r\n                    backgroundColor: \"transparent\",\r\n                    border: \"2px solid #ff7700\",\r\n                  }}\r\n                  onClick={() => {\r\n                    setVisible(false);\r\n                  }}\r\n                >\r\n                  Close\r\n                </Button>\r\n                <Button\r\n                  className=\"common-orange-button font-paragraph-white\"\r\n                  style={{ padding: \"3px 10px\" }}\r\n                  onClick={() => addReview()}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <p className=\"font-paragraph-white\">{\"Already Reviewed\"}</p>\r\n          )\r\n        ) : (\r\n          <p className=\"font-paragraph-white\">\r\n            Please signup or login to review\r\n          </p>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ReviewsModal;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\EditTypeName.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\HowItWork.js",[],["533","534"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ResetNewPassword.js",["535","536"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengePlayer.js",["537","538","539","540"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\RenderedVideoPlayer.js",["541","542","543","544"],"import React, { useContext, useRef, useEffect, useState } from \"react\";\r\nimport \"../../assets/video-player-design.css\";\r\nimport \"../../assets/player.css\";\r\nimport ReactPlayer from \"react-player\";\r\nimport BreakTimer from \"./BreakTimer\";\r\nimport PlayerControls from \"./PlayerControls\";\r\nimport tune from \"../../assets/music/break-start.wav\";\r\nimport {\r\n  breakContext,\r\n  exerciseWorkoutTimeTrackContext,\r\n  playerStateContext,\r\n  timerVisibleContext,\r\n} from \"../../contexts/PlayerState\";\r\n\r\nvar count = 0;\r\n\r\nconst playAudio = () => {\r\n  new Audio(tune).play();\r\n};\r\nfunction RenderedVideoPlayer({\r\n  exercise,\r\n  musics,\r\n  moveToNextExercise,\r\n  moveToPrevExercise,\r\n  nextExerciseTitle,\r\n  completed,\r\n  // for full screen player video browser\r\n  workout,\r\n  setExerciseForHelpModal,\r\n  setOpenHelpModal,\r\n  setCurrentExercise,\r\n  currentExercise,\r\n  challengePageAddress,\r\n}) {\r\n  const [timerVisible, setTimerVisible] = useContext(timerVisibleContext);\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  // const [currentBreak, setCurrentBreak] = useContext(breakContext);\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\r\n    exerciseWorkoutTimeTrackContext\r\n  );\r\n  const [exerciseSeconds, setExerciseSeconds] = useState(-1);\r\n  const playerRef = useRef(null);\r\n  const playerContainerRef = useRef(null);\r\n  const controlsRef = useRef(null);\r\n  const descriptionRef = useRef(null);\r\n  //   const time = new Date();\r\n  //   time.setSeconds(time.getSeconds() + 600);\r\n  //   const {\r\n  //     seconds,\r\n  //     minutes,\r\n  //     hours,\r\n  //     days,\r\n  //     isRunning,\r\n  //     start,\r\n  //     pause,\r\n  //     resume,\r\n  //     restart,\r\n  //   } = useTimer({\r\n  //     expiryTimestamp: time,\r\n  //     onExpire: () => console.warn(\"onExpire called\"),\r\n  //   });\r\n\r\n  useEffect(() => {\r\n    const sumAllBreakTime =\r\n      workout && workout.exercises.reduce((a, b) => a + (b[\"break\"] || 0), 0);\r\n    const sumAllExerciseDuration =\r\n      workout &&\r\n      workout.exercises.reduce(\r\n        (a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0),\r\n        0\r\n      );\r\n    console.log(\"sumAllBreakTime\", workout + sumAllExerciseDuration);\r\n    const d = sumAllExerciseDuration + sumAllBreakTime;\r\n    setExerciseWorkoutTimeTrack((prev) => ({ ...prev, total: d }));\r\n  }, [workout]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"ammammrmar\");\r\n    // start();\r\n\r\n    exercise.exerciseLength\r\n      ? setExerciseSeconds(parseInt(exercise.exerciseLength))\r\n      : setExerciseSeconds(Math.round(playerRef.current.getDuration()));\r\n  }, [exercise]);\r\n\r\n  useEffect(() => {\r\n    if (exerciseSeconds === 0) {\r\n      playAudio();\r\n      if (workout.exercises[currentExercise.index + 1]) {\r\n        console.log(\"IM CALLED\");\r\n        // this was how it was originall\r\n        setPlayerState({ ...playerState, playing: false });\r\n        // setTimerVisible(true);\r\n        // these are new stuff\r\n        // setPlayerState({ ...playerState, playing: false });\r\n        // moveToNextExercise();\r\n        // setTimerVisible(true);\r\n      } else {\r\n        moveToNextExercise();\r\n        // setPlayerState({ ...playerState, playing: true });\r\n      }\r\n      return;\r\n    }\r\n  }, [exerciseSeconds]);\r\n\r\n  const handleProgress = (changeState) => {\r\n    if (count > 1) {\r\n      controlsRef.current.style.visibility = \"hidden\";\r\n      descriptionRef.current.style.visibility = \"visible\";\r\n      count = 0;\r\n    }\r\n    if (controlsRef.current.style.visibility === \"visible\") {\r\n      count += 1;\r\n    }\r\n\r\n    // setPlayerState({ ...playerState, progress: changeState });\r\n    // seconds++;\r\n\r\n    if (exerciseSeconds > 0 && playerState.playing && !playerState.loading) {\r\n      setExerciseSeconds(exerciseSeconds - 1);\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current: prev.current + 1,\r\n      }));\r\n    }\r\n\r\n    setPlayerState({ ...playerState, progress: changeState });\r\n  };\r\n\r\n  const handleMouseMove = () => {\r\n    controlsRef.current.style.visibility = \"visible\";\r\n    descriptionRef.current.style.visibility = \"hidden\";\r\n    count = 0;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"player-wrapper\"\r\n      style={{ position: \"relative\", border: \"10px solid red\" }}\r\n      ref={playerContainerRef}\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      <ReactPlayer\r\n        ref={playerRef}\r\n        className=\"react-player\"\r\n        onBuffer={() => {\r\n          setPlayerState({ ...playerState, loading: true });\r\n        }}\r\n        onBufferEnd={() => {\r\n          setPlayerState({ ...playerState, loading: false });\r\n        }}\r\n        playing={playerState.playing}\r\n        muted={playerState.muted}\r\n        loop={true}\r\n        volume={playerState.volume}\r\n        url={\r\n          exercise.videoURL\r\n            ? `${process.env.REACT_APP_SERVER}/uploads/${exercise.videoURL}`\r\n            : \"\"\r\n        }\r\n        progress={playerState.progress}\r\n        onProgress={handleProgress}\r\n        // onEnded={() => {\r\n        //   if (currentExercise.index === 0) {\r\n        //     playAudio();\r\n        //     if (workout.exercises[currentExercise.index + 1]) {\r\n        //       // this was how it was originall\r\n        //       setPlayerState({ ...playerState, playing: false });\r\n        //       setTimerVisible(true);\r\n        //       // these are new stuff\r\n        //       // setPlayerState({ ...playerState, playing: false });\r\n        //       // moveToNextExercise();\r\n        //       // setTimerVisible(true);\r\n        //     } else {\r\n        //       moveToNextExercise();\r\n        //       // setPlayerState({ ...playerState, playing: true });\r\n        //     }\r\n        //   }\r\n        // }}\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        controls={false}\r\n      />\r\n      <PlayerControls\r\n        ref={controlsRef}\r\n        descriptionRef={descriptionRef}\r\n        playerRef={playerRef}\r\n        exerciseTitle={exercise.title ? exercise.title : \"\"}\r\n        exerciseLength={exercise.exerciseLength ? exercise.exerciseLength : \"\"}\r\n        breakTime={exercise.break ? exercise.break : \"\"}\r\n        playerContainerRef={playerContainerRef}\r\n        musicList={musics}\r\n        challengePageAddress={challengePageAddress}\r\n        exerciseSeconds={exerciseSeconds}\r\n        // for full screen player video browser\r\n        workout={workout}\r\n        setExerciseForHelpModal={setExerciseForHelpModal}\r\n        setOpenHelpModal={setOpenHelpModal}\r\n        setCurrentExercise={setCurrentExercise}\r\n        currentExercise={currentExercise}\r\n        moveToNextExercise={moveToNextExercise}\r\n        moveToPrevExercise={moveToPrevExercise}\r\n      />\r\n\r\n      {timerVisible && (\r\n        <BreakTimer\r\n          moveToNextExercise={moveToNextExercise}\r\n          nextExerciseTitle={nextExerciseTitle}\r\n          exercise={workout.exercises[currentExercise.index]}\r\n          timerVisible={timerVisible}\r\n          setTimerVisible={setTimerVisible}\r\n        />\r\n      )}\r\n      {/* music player */}\r\n\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RenderedVideoPlayer;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Challenges.js",["545","546"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\AllCoupons.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\recipes.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Nutrition\\SearchNutrition.js",["547"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\shop.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\mediaManagerUtils.js",["548","549"],"import React, { ReactElement, useMemo } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { ChonkyActions, ChonkyFileActionData } from \"chonky\";\r\nimport Noty from \"noty\";\r\nimport \"noty/lib/noty.css\";\r\nimport \"noty/lib/themes/relax.css\";\r\nimport \"../../../assets/override.css\";\r\n\r\n// We ignore some actions to avoid creating noise\r\nconst ignoredActions = new Set();\r\nignoredActions.add(ChonkyActions.MouseClickFile.id);\r\nignoredActions.add(ChonkyActions.KeyboardClickFile.id);\r\nignoredActions.add(ChonkyActions.StartDragNDrop.id);\r\nignoredActions.add(ChonkyActions.EndDragNDrop.id);\r\nignoredActions.add(ChonkyActions.ChangeSelection.id);\r\n\r\nexport const showActionNotification = (data) => {\r\n  if (ignoredActions.has(data.action.id)) return;\r\n\r\n  const textParts = [];\r\n  textParts.push(\r\n    `<div class=\"noty-action\">Action: <code>${data.action.id}</code></div>`\r\n  );\r\n\r\n  if (data.id === ChonkyActions.OpenFiles.id) {\r\n    const fileNames = data.payload.files.map((f) => `<code>${f.name}</code>`);\r\n    if (fileNames.length === 1) {\r\n      textParts.push(\"You opened a single file:\");\r\n    } else {\r\n      textParts.push(`You opened ${fileNames.length} files:`);\r\n    }\r\n    textParts.push(...fileNames);\r\n  }\r\n\r\n  if (data.id === ChonkyActions.MoveFiles.id) {\r\n    const fileCount = data.payload.files.length;\r\n    const countString = `${fileCount} file${fileCount !== 1 ? \"s\" : \"\"}`;\r\n    const source = `<code>${data.payload.source?.name ?? \"~\"}</code>`;\r\n    const destination = `<code>${data.payload.destination.name}</code>`;\r\n    textParts.push(\r\n      `You moved ${countString} from ${source} to ${destination}.`\r\n    );\r\n  }\r\n\r\n  if (data.id === ChonkyActions.DeleteFiles.id) {\r\n    const fileCount = data.state.selectedFilesForAction.length;\r\n    const countString = `${fileCount} file${fileCount !== 1 ? \"s\" : \"\"}`;\r\n    textParts.push(`You deleted ${countString} files.`);\r\n  }\r\n\r\n  const text = textParts[0] + textParts.slice(1).join(\"<br/>\");\r\n\r\n  new Noty({\r\n    text,\r\n    type: \"success\",\r\n    theme: \"relax\",\r\n    timeout: 3000,\r\n  }).show();\r\n};\r\n\r\nconst GIT_BRANCH = \"master\";\r\nexport const useStoryLinks = (links) => {\r\n  return useMemo(\r\n    () => {\r\n      const components = [];\r\n      for (let i = 0; i < links.length; ++i) {\r\n        const link = links[i];\r\n        let name = link.name;\r\n        let href = link.url;\r\n        if (link.docsUrl) {\r\n          href = link.docsUrl;\r\n          if (!name) name = \"Relevant docs\";\r\n        } else if (link.gitPath) {\r\n          href = getGitHubLink(link.gitPath);\r\n          if (!name) name = \"Story source code\";\r\n        } else if (!href) {\r\n          throw new Error(`Link \"${link.name}\" has no URL specified!`);\r\n        }\r\n\r\n        components.push(\r\n          <Button\r\n            href={href}\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            target=\"_blank\"\r\n            variant=\"contained\"\r\n            key={`story-link-${i}`}\r\n            rel=\"noreferrer noopener\"\r\n            style={{ marginBottom: 15, marginRight: 15 }}\r\n          >\r\n            {name}\r\n          </Button>\r\n        );\r\n      }\r\n      return components;\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n    // We deliberately leave hook deps empty as we don't exepct links to change.\r\n  );\r\n};\r\nexport const getGitHubLink = (filePath) =>\r\n  `https://github.com/TimboKZ/chonky-website/blob/${GIT_BRANCH}/${filePath}`;\r\n",["550","551"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\PaymentProcessStore.js",[],["552","553"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\NewCoupon.js",["554"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Switch, Select, InputNumber } from \"antd\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { createCoupon } from \"../../../services/coupons\";\r\nimport { getAllChallenges } from \"../../../services/createChallenge/main\";\r\n\r\nfunction NewCoupon() {\r\n  const [code, setCode] = useState(\"\");\r\n  const [active, setActive] = useState(false);\r\n  const [applicableOn, setApplicableOn] = useState([]);\r\n  const [challengesApplicableOn, setChallengesApplicableOn] = useState([]);\r\n  const [allChallenges, setAllChallenges] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const onFinish = async (values) => {\r\n    setLoading(true);\r\n    if (code.length > 0) {\r\n      const s = {\r\n        name: values.name,\r\n        code: code,\r\n        discountPercent: parseInt(values.discount),\r\n        limitUsage: values.usageCount,\r\n        isActive: values.active,\r\n        applicableOn: values.applicableOn,\r\n        challengesApplicableOn:\r\n          challengesApplicableOn.length > 0 ? challengesApplicableOn : null,\r\n      };\r\n      const res = await createCoupon(s);\r\n      console.log(res);\r\n    } else {\r\n      alert(\"Please enter coupon code\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n  // const selectBefore = (\r\n  //   <Select defaultValue=\"%\" className=\"select-before\">\r\n  //     <Option value=\"%\">%</Option>\r\n  //     <Option value=\"€\">€</Option>\r\n  //   </Select>\r\n  // );\r\n\r\n  useEffect(() => {\r\n    fetchChallenges();\r\n  }, []);\r\n\r\n  const fetchChallenges = async () => {\r\n    const c = await getAllChallenges(localStorage.getItem(\"locale\"));\r\n    setAllChallenges(c.challenges);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"font-heading-black\">New Coupon</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Name\"\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input coupon name!\" }]}\r\n            type=\"number\"\r\n          >\r\n            <Input style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Coupon Code\" name=\"couponCode\">\r\n            <Input value={code} onChange={(e) => setCode(e.target.value)} />\r\n            <Button\r\n              type=\"primary\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n                float: \"right\",\r\n              }}\r\n              onClick={() => {\r\n                setCode(\"RL\" + uuidv4().substring(1, 8));\r\n              }}\r\n            >\r\n              Generate Coupon Code\r\n            </Button>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Discount\"\r\n            name=\"discount\"\r\n            rules={[{ required: true, message: \"Please input discount!\" }]}\r\n            type=\"number\"\r\n          >\r\n            <Input\r\n              placeholder=\"Must be in percentage eg 10\"\r\n              type=\"number\"\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Usage Count\"\r\n            name=\"usageCount\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input number of times the code can be used!\",\r\n              },\r\n            ]}\r\n            type=\"number\"\r\n          >\r\n            <InputNumber style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n          <Form.Item label=\"Active\" name=\"active\">\r\n            <Switch\r\n              checkedChildren=\"is active\"\r\n              unCheckedChildren=\"not active\"\r\n              checked={active}\r\n              onChange={(e) => setActive(e)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\"Applicable On Specific Plan\" name=\"applicableOn\">\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={applicableOn}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setApplicableOn(e)}\r\n            >\r\n              {[\r\n                \"ALL\",\r\n                \"CHALLENGE ONE\",\r\n                \"CHALLENGE THREE\",\r\n                \"CHALLENGE TWELVE\",\r\n              ].map((e, i) => (\r\n                <Select.Option key={i + 1} value={e}>\r\n                  {e}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Applicable On Specific Challenge\"\r\n            name=\"challengesApplicableOn\"\r\n          >\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={challengesApplicableOn}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setChallengesApplicableOn(e)}\r\n            >\r\n              {allChallenges.map((e, i) => (\r\n                <Select.Option key={i + 1} value={e._id}>\r\n                  {e.challengeName}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewCoupon;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallenge.js",["555","556","557","558","559"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Tabs, Modal, Button } from \"antd\";\r\nimport NewChallengeMainTab from \"./NewChallengeMainTab\";\r\nimport NewChallengeWorkoutTab from \"./NewChallengeWorkoutTab\";\r\nimport NewChallengeMusicTab from \"./NewChallengeMusicTab\";\r\nimport NewChallengeAdditionalTab from \"./NewChallengeAdditionalTab\";\r\n\r\nimport { v4 } from \"uuid\";\r\n\r\n// services\r\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\r\nimport { getAllChallengeTags } from \"../../../services/createChallenge/tags\";\r\nimport { getAllChallengeEquipments } from \"../../../services/createChallenge/equipments\";\r\nimport { getAllBodyFocus } from \"../../../services/createChallenge/bodyFocus\";\r\nimport { getAllTrainers } from \"../../../services/trainers\";\r\nimport { getAllChallengeProducts } from \"../../../services/createChallenge/products\";\r\nimport {\r\n  createChallenge,\r\n  getAllUserChallenges,\r\n  updateChallenge,\r\n} from \"../../../services/createChallenge/main\";\r\nimport setAuthToken from \"../../../helpers/setAuthToken\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport { createPost } from \"../../../services/posts\";\r\nimport slug from \"elegant-slug\";\r\nimport { addChallengeToCustomerDetail } from \"../../../services/customer\";\r\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\r\nimport { T } from \"../../Translate\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction callback(key) {\r\n  console.log(key);\r\n}\r\n\r\nfunction NewChallenge() {\r\n  // state of main tab strats\r\n  const [name, setName] = useState(\"\");\r\n  const [access, setAccess] = useState([]);\r\n  const [price, setPrice] = useState(\"\");\r\n  const [points, setPoints] = useState(0);\r\n  const [currency, setCurrency] = useState(\"$\");\r\n  const [thumbnail, setThumbnail] = useState(\"\");\r\n  const [videoThumbnail, setVideoThumbnail] = useState(\"\");\r\n  const [videoTrailer, setVideoTrailer] = useState(\"\");\r\n  const [trainers, setTrainers] = useState([]);\r\n  const [allTrainers, setAllTrainers] = useState([]);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [difficulty, setDifficulty] = useState(\"\");\r\n  const [goals, setGoals] = useState([]);\r\n  const [bodyFocus, setBodyFocus] = useState([]);\r\n  const [equipments, setEquipments] = useState([]);\r\n  const [duration, setDuration] = useState(\"\");\r\n  // we get all goals from backend\r\n  const [allGoals, setAllGoals] = useState([]);\r\n  const [newGoalName, setNewGoalName] = useState(\"\");\r\n  const [showGoalModal, setShowGoalModal] = useState(false);\r\n  // we get all bodyfocus from backend\r\n  const [allBodyfocus, setAllBodyfocus] = useState([]);\r\n\r\n  const [newBodyfocusName, setNewBodyfocusName] = useState(\"\");\r\n  const [showBodyfocusModal, setShowBodyfocusModal] = useState(false);\r\n  //fitness interest\r\n  const [selectedFitnessInterest, setSelectedFitnessInterest] = useState([]);\r\n  // we get all equipments from backend\r\n  const [allEquipments, setAllEquipments] = useState([]);\r\n  const [newEquipmentName, setNewEquipmentName] = useState(\"\");\r\n  const [equipmentModal, setEquipmentModal] = useState(false);\r\n  const [newDurationName, setNewDurationName] = useState(\"\");\r\n  const [showDurationModal, setShowDurationModal] = useState(false);\r\n  // we get all tags from backend\r\n  const [tags, setTags] = useState([]);\r\n  const [allTags, setAllTags] = useState([]);\r\n  const [newTagName, setNewTagName] = useState(\"\");\r\n  const [showTagModal, setShowTagModal] = useState(false);\r\n  // state of main tab ends\r\n\r\n  // state pf the new challenge tab starts\r\n  const [weeks, setWeeks] = useState([]);\r\n  const [addWorkoutModalVisible, setAddWorkoutModalVisible] = useState(false);\r\n  const [workoutModalFullscreen, setWorkoutModalFullscreen] = useState(false);\r\n  const [allProducts, setAllProducts] = useState([\r\n    { id: 1, name: \"Carpet\" },\r\n    { id: 2, name: \"Mat\" },\r\n    { id: 3, name: \"Dumbell\" },\r\n  ]);\r\n  const [products, setProducts] = useState([]);\r\n  //   this is for new workout creation process\r\n  const [workoutToUpdate, setWorkoutToUpdate] = useState(\"\");\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [currentWeek, setCurrentWeek] = useState(\"\");\r\n  const [workoutTitle, setWorkoutTile] = useState(\"\");\r\n  const [workoutSubtitle, setWorkoutSubtile] = useState(\"\");\r\n  const [workoutIntroVideoLength, setWorkoutIntroVideoLength] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [infoTitle, setInfoTile] = useState(\"\");\r\n  const [infoFile, setInfoFile] = useState(\"\");\r\n  // const [points, setPoints] = useState(0);\r\n  const [workoutIntroVideoFile, setWorkoutIntroVideoFile] = useState(\"\");\r\n  const [relatedEquipments, setRelatedEquipments] = useState([]);\r\n  const [renderWorkout, setRenderWorkout] = useState(false);\r\n  // this is a rendered workout exercise it wonly takes in full video of the exercise\r\n  const [renderedWorkoutExercises, setRenderWorkoutExercises] = useState([\r\n    {\r\n      exerciseId: v4(),\r\n      exerciseName: \"\",\r\n      exerciseVideo: \"\",\r\n    },\r\n  ]);\r\n  // this is a non-rendered workout exercise it will take multiple videos and voiceeover\r\n  const [nonRenderedWorkoutExercises, setNonRenderedWorkoutExercises] =\r\n    useState([\r\n      {\r\n        exerciseId: v4(),\r\n        exerciseName: \"\",\r\n        exerciseVideo: \"\",\r\n        videoLength: \"\",\r\n        voiceOverFile: \"\",\r\n        breakAfterExercise: \"\",\r\n        exerciseGroupName: \"\",\r\n      },\r\n    ]);\r\n  const [musics, setMusics] = useState([]);\r\n  // state of the new cha;llenge ends\r\n\r\n  // state for additional inform\r\n  const [results, setResults] = useState(\"\");\r\n  // const [info, setInfo] = useState(\"\");\r\n  const [makePublic, setMakePublic] = useState(false);\r\n  const [allowComments, setAllowComments] = useState(false);\r\n  const [allowReviews, setAllowReviews] = useState(false);\r\n  const [additionalProducts, setAdditionalProducts] = useState([]);\r\n  const [informationList, setInformationList] = useState([]);\r\n  const [relatedProducts, setRelatedProducts] = useState([]);\r\n  // --------------------\r\n  const [userCreatePost, setUserCreatePost] = useState(false);\r\n\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const { language } = useContext(LanguageContext);\r\n  const [allChallenges, setAllChallenges] = useState([]);\r\n  const [selectedChallenge, setSelectedChallenge] = useState(\"\");\r\n\r\n  async function fethData() {\r\n    const bodyFocus = await getAllBodyFocus(language);\r\n    const goals = await getAllChallengeGoals(language);\r\n    const tags = await getAllChallengeTags(language);\r\n    const equipments = await getAllChallengeEquipments(language);\r\n    const trainers = await getAllTrainers(language);\r\n    const products = await getAllChallengeProducts(language);\r\n    const challenges = await getAllUserChallenges(\r\n      language === \"dutch\" ? \"english\" : \"dutch\"\r\n    );\r\n\r\n    setAllBodyfocus(bodyFocus.body);\r\n    setAllEquipments(equipments.equipments);\r\n    setAllGoals(goals.challengeGoals);\r\n    setAllTags(tags.tags);\r\n    // console.log(\"trainers\", trainers);\r\n    setAllTrainers(trainers.trainers);\r\n    setAllProducts(products.products);\r\n    setAllChallenges(challenges.challenges);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n    fethData();\r\n  }, [language]);\r\n\r\n  const createChallengeButton = async () => {\r\n    console.log(\"isRendered\", renderWorkout);\r\n    console.log(\"weeks\", weeks);\r\n\r\n    const obj = {\r\n      language: language,\r\n      challengeName: name,\r\n      description: description,\r\n      price: price,\r\n      points: points,\r\n      currency: currency,\r\n      thumbnailLink: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\r\n      videoThumbnailLink:\r\n        typeof videoThumbnail === \"object\" ? videoThumbnail.link : \"\",\r\n      trainers: trainers,\r\n      trainersFitnessInterest: selectedFitnessInterest,\r\n      challengeGoals: goals,\r\n      tags: tags,\r\n      difficulty: difficulty,\r\n      body: bodyFocus,\r\n      access: access,\r\n      duration: duration,\r\n      videoLink: typeof videoTrailer === \"object\" ? videoTrailer.link : \"\",\r\n      weeks: weeks.map((week) => {\r\n        var w = { ...week };\r\n        w[\"weekName\"] = week.weekTitle;\r\n        w[\"weekSubtitle\"] = week.weekSubtitle;\r\n        w[\"workout\"] = w.workouts.map((workout) => {\r\n          return {\r\n            title: workout.workoutTitle,\r\n            subtitle: workout.workoutSubtitle,\r\n            infotitle: workout.infoTitle,\r\n            infoFile:\r\n              typeof workout.infoFile === \"object\" ? workout.infoFile.link : \"\",\r\n            equipment: workout.relatedEquipments,\r\n            relatedProducts: workout.relatedProducts,\r\n            introVideoLink: workout.workoutIntroVideoFile\r\n              ? workout.workoutIntroVideoFile.link\r\n              : \"\",\r\n            introVideoLength: workout.workoutIntroVideoLength\r\n              ? workout.workoutIntroVideoLength\r\n              : \"\",\r\n            isRendered: workout.renderWorkout,\r\n            exercises: workout.renderWorkout\r\n              ? workout.exercises.map((e) => ({\r\n                  exerciseId: e._id,\r\n                  exerciseLength: e.videoLength,\r\n                  break: e.breakAfterExercise,\r\n                  groupName: e.exerciseGroupName,\r\n                }))\r\n              : workout.exercises.map((e) => ({\r\n                  renderedWorkoutExerciseName: e.exerciseName,\r\n                  renderedWorkoutExerciseVideo: e.exerciseVideo,\r\n                })),\r\n          };\r\n        });\r\n        delete w.id;\r\n        delete w.weekId;\r\n        delete w.weekTitle;\r\n        delete w.workouts;\r\n        return w;\r\n      }),\r\n      music: musics.map((m) => ({\r\n        name: m.name,\r\n        url: typeof m.file === \"object\" ? m.file.link : m.file,\r\n      })),\r\n      additionalProducts: additionalProducts,\r\n      results: results,\r\n      informationList: informationList\r\n        ? informationList.map((i) => ({\r\n            info: i.text,\r\n            icon: i.file ? i.file.link : \"\",\r\n          }))\r\n        : [],\r\n      allowComments,\r\n      allowReviews,\r\n      isPublic: makePublic,\r\n    };\r\n    console.log(\"create object\", obj);\r\n    if (selectedChallenge) {\r\n      obj.alternativeLanguage = selectedChallenge;\r\n    }\r\n    // return;\r\n    // return;\r\n    const res = await createChallenge(obj);\r\n    console.log(\"opp===========>\", res);\r\n\r\n    // console.log(error.response.data);\r\n    // console.log(error.response.status);\r\n    // console.log(error.response.headers);\r\n    if (res && res.weeks) {\r\n      await addChallengeToCustomerDetail(userInfo.id, res.weeks._id);\r\n      userCreatePost && createAPost(res.weeks._id);\r\n      selectedChallenge && updateSelectedChallenge(res.weeks._id);\r\n    }\r\n    console.log(\"create response\", res);\r\n    console.log(\"userCreatePost\", userCreatePost);\r\n  };\r\n\r\n  const createAPost = async (id) => {\r\n    const values = {\r\n      title: name,\r\n      text: description,\r\n      image: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\r\n      type: \"Challenge\",\r\n      url: `/challenge/${slug(name)}/${id}`,\r\n      language: language,\r\n    };\r\n    await createPost(values);\r\n    // setCreatePostModalVisible(false);\r\n    // console.log(values);\r\n  };\r\n\r\n  const updateSelectedChallenge = async (id) => {\r\n    await updateChallenge({ alternativeLanguage: id }, selectedChallenge);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* ask user to if they want to post challenge */}\r\n      {/* <Modal\r\n        onCancel={() => setCreatePostModalVisible(false)}\r\n        visible={createPostModalVisible}\r\n        footer={false}\r\n        style={{ textAlign: \"center\" }}\r\n      >\r\n        <h1 className=\"font-heading-white\">\r\n          Create a post about your challenge?\r\n        </h1>\r\n        <Button\r\n          className=\"common-orange-button font-paragraph-white\"\r\n          onClick={() => createAPost()}\r\n          style={{ padding: \"5px 10px\" }}\r\n        >\r\n          Create a Post\r\n        </Button>\r\n      </Modal> */}\r\n      <h2 className=\"font-heading-black\">\r\n        <T>adminDashboard.challenges.new</T>\r\n      </h2>\r\n      <div className=\"newchallenge-creator-container\">\r\n        <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n          <TabPane tab=\"Main\" key=\"1\">\r\n            <NewChallengeMainTab\r\n              allChallenges={allChallenges}\r\n              selectedChallenge={selectedChallenge}\r\n              setSelectedChallenge={setSelectedChallenge}\r\n              name={name}\r\n              setName={setName}\r\n              access={access}\r\n              setAccess={setAccess}\r\n              price={price}\r\n              points={points}\r\n              setPrice={setPrice}\r\n              selectedFitnessInterest={selectedFitnessInterest}\r\n              setSelectedFitnessInterest={setSelectedFitnessInterest}\r\n              setPoints={setPoints}\r\n              currency={currency}\r\n              setCurrency={setCurrency}\r\n              thumbnail={thumbnail}\r\n              setThumbnail={setThumbnail}\r\n              videoThumbnail={videoThumbnail}\r\n              setVideoThumbnail={setVideoThumbnail}\r\n              videoTrailer={videoTrailer}\r\n              setVideoTrailer={setVideoTrailer}\r\n              trainers={trainers}\r\n              setTrainers={setTrainers}\r\n              allTrainers={allTrainers}\r\n              setAllTrainers={setAllTrainers}\r\n              description={description}\r\n              setDescription={setDescription}\r\n              difficulty={difficulty}\r\n              setDifficulty={setDifficulty}\r\n              goals={goals}\r\n              setGoals={setGoals}\r\n              bodyFocus={bodyFocus}\r\n              setBodyFocus={setBodyFocus}\r\n              equipments={equipments}\r\n              setEquipments={setEquipments}\r\n              duration={duration}\r\n              setDuration={setDuration}\r\n              allGoals={allGoals}\r\n              setAllGoals={setAllGoals}\r\n              newGoalName={newGoalName}\r\n              setNewGoalName={setNewGoalName}\r\n              showGoalModal={showGoalModal}\r\n              setShowGoalModal={setShowGoalModal}\r\n              allBodyfocus={allBodyfocus}\r\n              setAllBodyfocus={setAllBodyfocus}\r\n              newBodyfocusName={newBodyfocusName}\r\n              setNewBodyfocusName={setNewBodyfocusName}\r\n              showBodyfocusModal={showBodyfocusModal}\r\n              setShowBodyfocusModal={setShowBodyfocusModal}\r\n              allEquipments={allEquipments}\r\n              setAllEquipments={setAllEquipments}\r\n              newEquipmentName={newEquipmentName}\r\n              setNewEquipmentName={setNewEquipmentName}\r\n              equipmentModal={equipmentModal}\r\n              setEquipmentModal={setEquipmentModal}\r\n              newDurationName={newDurationName}\r\n              setNewDurationName={setNewDurationName}\r\n              showDurationModal={showDurationModal}\r\n              setShowDurationModal={setShowDurationModal}\r\n              tags={tags}\r\n              setTags={setTags}\r\n              allTags={allTags}\r\n              setAllTags={setAllTags}\r\n              newTagName={newTagName}\r\n              setNewTagName={setNewTagName}\r\n              showTagModal={showTagModal}\r\n              setShowTagModal={setShowTagModal}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Workouts\" key=\"2\">\r\n            <NewChallengeWorkoutTab\r\n              weeks={weeks}\r\n              setWeeks={setWeeks}\r\n              addWorkoutModalVisible={addWorkoutModalVisible}\r\n              setAddWorkoutModalVisible={setAddWorkoutModalVisible}\r\n              workoutModalFullscreen={workoutModalFullscreen}\r\n              setWorkoutModalFullscreen={setWorkoutModalFullscreen}\r\n              allProducts={allProducts}\r\n              setAllProducts={setAllProducts}\r\n              setProducts={setProducts}\r\n              allEquipments={allEquipments}\r\n              setAllEquipments={setAllEquipments}\r\n              workoutToUpdate={workoutToUpdate}\r\n              setWorkoutToUpdate={setWorkoutToUpdate}\r\n              currentStep={currentStep}\r\n              setCurrentStep={setCurrentStep}\r\n              currentWeek={currentWeek}\r\n              setCurrentWeek={setCurrentWeek}\r\n              workoutTitle={workoutTitle}\r\n              setWorkoutTile={setWorkoutTile}\r\n              workoutSubtitle={workoutSubtitle}\r\n              workoutIntroVideoLength={workoutIntroVideoLength}\r\n              setWorkoutIntroVideoLength={setWorkoutIntroVideoLength}\r\n              setWorkoutSubtile={setWorkoutSubtile}\r\n              groupName={groupName}\r\n              setGroupName={setGroupName}\r\n              infoTitle={infoTitle}\r\n              setInfoTile={setInfoTile}\r\n              infoFile={infoFile}\r\n              setInfoFile={setInfoFile}\r\n              workoutIntroVideoFile={workoutIntroVideoFile}\r\n              setWorkoutIntroVideoFile={setWorkoutIntroVideoFile}\r\n              relatedProducts={relatedProducts}\r\n              setRelatedProducts={setRelatedProducts}\r\n              relatedEquipments={relatedEquipments}\r\n              setRelatedEquipments={setRelatedEquipments}\r\n              renderWorkout={renderWorkout}\r\n              setRenderWorkout={setRenderWorkout}\r\n              renderedWorkoutExercises={renderedWorkoutExercises}\r\n              setRenderWorkoutExercises={setRenderWorkoutExercises}\r\n              nonRenderedWorkoutExercises={nonRenderedWorkoutExercises}\r\n              setNonRenderedWorkoutExercises={setNonRenderedWorkoutExercises}\r\n              trainers={trainers}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Music\" key=\"3\">\r\n            <NewChallengeMusicTab musics={musics} setMusics={setMusics} />\r\n          </TabPane>\r\n          <TabPane tab=\"Additional\" key=\"4\">\r\n            <NewChallengeAdditionalTab\r\n              results={results}\r\n              setResults={setResults}\r\n              allProducts={allProducts}\r\n              setAllProducts={setAllProducts}\r\n              makePublic={makePublic}\r\n              setMakePublic={setMakePublic}\r\n              allowComments={allowComments}\r\n              setAllowComments={setAllowComments}\r\n              allowReviews={allowReviews}\r\n              setAllowReviews={setAllowReviews}\r\n              additionalProducts={additionalProducts}\r\n              setAdditionalProducts={setAdditionalProducts}\r\n              informationList={informationList}\r\n              setInformationList={setInformationList}\r\n              createChallenge={createChallengeButton}\r\n              userCreatePost={userCreatePost}\r\n              setUserCreatePost={setUserCreatePost}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewChallenge;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\EditCategoryName.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\FullScreenPlayerVideosBrowser.js",["560"],"import React, { useContext } from \"react\";\r\nimport \"../../assets/FullScreenPlayerVideoBrowser.css\";\r\nimport {\r\n  playerFullscreenContext,\r\n  playerStateContext,\r\n} from \"../../contexts/PlayerState\";\r\nimport PlayerVideoBrowser from \"./PlayerVideoBrowser\";\r\n\r\nfunction FullScreenPlayerVideosBrowser({\r\n  showVideos,\r\n  workout,\r\n  setExerciseForHelpModal,\r\n  setOpenHelpModal,\r\n  setCurrentExercise,\r\n  currentExercise,\r\n}) {\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [fullscreen, setFullscreen] = useContext(playerFullscreenContext);\r\n  return showVideos ? (\r\n    <div className=\"fspvb-container\">\r\n      {/* <h1 style={{ color: \"white\" }}>fAGGOT</h1> */}\r\n      <PlayerVideoBrowser\r\n        fullscreen={fullscreen}\r\n        workout={workout}\r\n        playerState={playerState}\r\n        setPlayerState={setPlayerState}\r\n        setExerciseForHelpModal={setExerciseForHelpModal}\r\n        setOpenHelpModal={setOpenHelpModal}\r\n        setCurrentExercise={setCurrentExercise}\r\n        currentExercise={currentExercise}\r\n        fromFullScreen={true}\r\n      />\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n\r\nexport default FullScreenPlayerVideosBrowser;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\App.js",["561"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Home.js",["562","563","564"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\AllRecipes.js",["565"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Table, Space, Input } from \"antd\";\r\nimport {\r\n  getAllRecipes,\r\n  deleteRecipeWithId,\r\n  getAllUserRecipes,\r\n} from \"../../../services/recipes\";\r\nimport moment from \"moment\";\r\nimport UpdateRecipe from \"./UpdateRecipe\";\r\n\r\nfunction AllRecipes() {\r\n  const [filterAllRecipes, setFilterAllRecipes] = useState([]);\r\n  const [allRecipes, setAllRecipes] = useState([]);\r\n  const [updateModal, setUpdateModal] = useState(false);\r\n  const [selectedProduct, setSelectedProduct] = useState({});\r\n\r\n  async function fetchData() {\r\n    const data = await getAllUserRecipes(\"\");\r\n    if (data) {\r\n      setAllRecipes(data.recipes);\r\n      setFilterAllRecipes(data.recipes);\r\n    }\r\n  }\r\n\r\n  async function deleteRecipe(id) {\r\n    await deleteRecipeWithId(id);\r\n    fetchData();\r\n  }\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  const columns = [\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"_id\",\r\n      key: \"_id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Calories\",\r\n      dataIndex: \"kCalPerPerson\",\r\n      key: \"kCalPerPerson\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Prepration Time\",\r\n      dataIndex: \"prepTime\",\r\n      key: \"prepTime\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Language\",\r\n      dataIndex: \"language\",\r\n      key: \"language\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Updated At\",\r\n      key: \"updatedAt\",\r\n      dataIndex: \"updatedAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Is Public\",\r\n      key: \"isPublic\",\r\n      dataIndex: \"isPublic\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text ? \"True\" : \"False\"}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              setSelectedProduct(text);\r\n              setUpdateModal(true);\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Button type=\"danger\" onClick={() => deleteRecipe(text._id)}>\r\n            Delete\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <UpdateRecipe\r\n        visible={updateModal}\r\n        setVisible={setUpdateModal}\r\n        selectedProduct={selectedProduct}\r\n        getAllProducts={fetchData}\r\n        key={Math.random()}\r\n      />\r\n      <h2 className=\"font-heading-black\">All Users</h2>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        <Input\r\n          placeholder=\"Search Recipe By Name\"\r\n          onChange={(e) =>\r\n            setFilterAllRecipes(\r\n              allRecipes.filter((recipe) =>\r\n                recipe.name.toUpperCase().includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Input\r\n          placeholder=\"Search Recipe By ID\"\r\n          style={{ marginTop: \"10px\" }}\r\n          onChange={(e) =>\r\n            setFilterAllRecipes(\r\n              allRecipes.filter((recipe) =>\r\n                recipe._id.toUpperCase().includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Table columns={columns} dataSource={filterAllRecipes} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllRecipes;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\EditTypeName.js",[],["566","567"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\NonRenderedVideoPlayer.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\RecipeProfile.js",["568","569","570","571","572","573","574"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"../assets/trainerprofile.css\";\r\nimport \"../assets/home.css\";\r\nimport \"../assets/challengeProfile.css\";\r\nimport \"../assets/recipeProfile.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport {\r\n  StarOutlined,\r\n  UserOutlined,\r\n  ArrowRightOutlined,\r\n  LikeOutlined,\r\n  ClockCircleOutlined,\r\n  LoadingOutlined,\r\n  HeartFilled,\r\n} from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Avatar, Input, Modal, Rate } from \"antd\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  getRecipeById,\r\n  favouriteRecipeById,\r\n  addRecipeComment,\r\n} from \"../services/recipes\";\r\nimport { userInfoContext } from \"../contexts/UserStore\";\r\nimport ChallengeReviewModal from \"../components/Challenge/ChallengeReviewModal\";\r\nimport ReviewsModal from \"../components/Common/ReviewsModal\";\r\nimport moment from \"moment\";\r\nimport slug from \"elegant-slug\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport { T } from \"../components/Translate\";\r\nimport { LanguageContext } from \"../contexts/LanguageContext\";\r\n\r\nfunction RecipeProfile(props) {\r\n  const { language, updateLanguage } = useContext(LanguageContext);\r\n  const [allComments, setAllComments] = useState([]);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const [commentButtonLoading, setCommentButtomLoading] = useState(false);\r\n  const [userInfo, serUserInfo] = useContext(userInfoContext);\r\n  const [reviewOpen, setReviewOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // eslint-disable-next-line\r\n  const [recipe, setRecipe] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [language]);\r\n\r\n  const fetchData = async () => {\r\n    if (Object.keys(recipe).length > 0) {\r\n      if (recipe.language === language) {\r\n      } else {\r\n        if (recipe.alternativeLanguage) {\r\n          window.location.href = `${\r\n            process.env.REACT_APP_FRONTEND_SERVER\r\n          }/recipe/${slug(recipe.alternativeLanguage.name)}/${\r\n            recipe.alternativeLanguage._id\r\n          }`;\r\n        }\r\n      }\r\n    } else {\r\n      const id = props.match.params.id;\r\n      setLoading(true);\r\n      const res = await getRecipeById(id);\r\n      if (res) {\r\n        setAllComments(res.comments);\r\n        setRecipe(res);\r\n        setLoading(false);\r\n        updateLanguage(res.language);\r\n        console.log(res);\r\n      }\r\n    }\r\n  };\r\n\r\n  const postCommentToBackend = async () => {\r\n    setCommentButtomLoading(true);\r\n    const res = await addRecipeComment(recipe._id, commentText);\r\n\r\n    if (res) {\r\n      setAllComments(res.comments);\r\n    }\r\n    setCommentButtomLoading(false);\r\n    setCommentText(\"\");\r\n  };\r\n\r\n  const favouriteRecipe = async (id) => {\r\n    await favouriteRecipeById({ recipeId: id }, userInfo.id);\r\n  };\r\n  return loading ? (\r\n    <div className=\"center-inpage\">\r\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <Helmet>\r\n        <title>{`Realchallenge: ${recipe.name}`}</title>\r\n        <meta name=\"description\" content={recipe.description} />\r\n        <meta property=\"og:title\" content={recipe.name} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:description\" content={recipe.description} />\r\n        <meta\r\n          property=\"og:url\"\r\n          content={`http://localhost:3001/recipe/${slug(recipe.name)}/${\r\n            recipe._id\r\n          }`}\r\n        />\r\n        <meta name=\"author\" content=\"Realchallenge\" />\r\n      </Helmet>\r\n      <Navbar color=\"dark\" />\r\n      <ReviewsModal\r\n        visible={reviewOpen}\r\n        setVisible={setReviewOpen}\r\n        item={recipe}\r\n        type=\"recipes\"\r\n        fetchData={fetchData}\r\n      />\r\n      <div className=\"trainer-profile-container\">\r\n        <div\r\n          className=\"trainer-profile-container-column1\"\r\n          style={{\r\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${\r\n              process.env.REACT_APP_SERVER\r\n            }/uploads/${\r\n              recipe.image ? recipe.image.replaceAll(\" \", \"%20\") : \"\"\r\n            })`,\r\n            backgroundSize: \"100% 100vh\",\r\n            backgroundPosition: \"10% 10%\",\r\n            backgroundRepeat: \"no-repeat\",\r\n          }}\r\n        >\r\n          <div className=\"profile-box\">\r\n            <div\r\n              className=\"challenge-profile-box-1\"\r\n              style={{ borderBottom: \"2px solid #222932\", textAlign: \"left\" }}\r\n            >\r\n              <h1\r\n                className=\"font-heading-white\"\r\n                style={{\r\n                  fontSize: \"4rem\",\r\n                }}\r\n              >\r\n                {recipe.name}\r\n              </h1>\r\n            </div>\r\n            <div className=\"challenge-profile-box-2\">\r\n              <div className=\"challenge-profile-box-2-rating\">\r\n                {console.log(\"rating\", recipe)}\r\n                <div style={{ padding: \"5px\" }}>\r\n                  <Rate value={recipe.rating} allowHalf disabled={true} />\r\n                  {/* {new Array(recipe.rating ? recipe.rating : 1)\r\n                    .fill(0)\r\n                    .map(() => (\r\n                      <StarOutlined\r\n                        style={{\r\n                          color: \"var(--color-orange)\",\r\n                          fontSize: \"2rem\",\r\n                        }}\r\n                      />\r\n                    ))} */}\r\n                </div>\r\n                <span onClick={() => setReviewOpen(true)}>\r\n                  <T>recipe_profile.reviews</T>\r\n                </span>\r\n                {localStorage.getItem(\"jwtToken\") ? (\r\n                  <div className=\"recipe-likes\">\r\n                    <HeartFilled\r\n                      onClick={() => favouriteRecipe(recipe._id)}\r\n                      style={{ fontSize: \"3rem\", cursor: \"pointer\" }}\r\n                    />{\" \"}\r\n                    {recipe.likes}\r\n                  </div>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </div>\r\n              <div className=\"challenge-profile-box-2-info\">\r\n                {recipe.mealTypes\r\n                  ? recipe.mealTypes.map((meal) => (\r\n                      <div\r\n                        className=\"challenge-profile-box-2-container\"\r\n                        style={{ opacity: \"0.7\" }}\r\n                      >\r\n                        {meal.name}\r\n                      </div>\r\n                    ))\r\n                  : \"\"}\r\n                {recipe.kCalPerPerson ? (\r\n                  <div\r\n                    className=\"challenge-profile-box-2-container\"\r\n                    style={{ opacity: \"0.7\" }}\r\n                  >\r\n                    {recipe.kCalPerPerson + \" KCAL\"}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n              <div className=\"challenge-profile-box-2-info\">\r\n                {recipe.prepTime ? (\r\n                  <div className=\"recipe-info-block\">\r\n                    <ClockCircleOutlined\r\n                      style={{ color: \"var(--color-orange)\" }}\r\n                    />{\" \"}\r\n                    {recipe.prepTime} <T>recipe_profile.minutes</T>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {recipe.persons ? (\r\n                  <div className=\"recipe-info-block\">\r\n                    <UserOutlined style={{ color: \"var(--color-orange)\" }} />{\" \"}\r\n                    {recipe.persons} <T>recipe_profile.persons</T>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"recipe-profile-container-column2\">\r\n          {/* hree we go */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              <T>recipe_profile.meal_values</T>\r\n            </div>\r\n            <div className=\"recipe-mealValues-container\">\r\n              {[\r\n                {\r\n                  type: \"Carbohydrates\",\r\n                  quantity: recipe.carbohydrate ? recipe.carbohydrate : \"\",\r\n                },\r\n                {\r\n                  type: \"Protein\",\r\n                  quantity: recipe.protein ? recipe.protein : \"\",\r\n                },\r\n                {\r\n                  type: \"Fat\",\r\n                  quantity: recipe.fat ? recipe.fat : \"\",\r\n                },\r\n                {\r\n                  type: \"Fiber\",\r\n                  quantity: recipe.fiber ? recipe.fiber : \"\",\r\n                },\r\n              ].map((value) => (\r\n                <div className=\"recipe-mealValues-container-box\">\r\n                  <span>{value.type}</span>\r\n                  <span>{value.quantity} g</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          {/* sdadasd */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              <T>recipe_profile.short_info</T>\r\n            </div>\r\n            <div className=\"recipe-mealValues-info\">\r\n              {recipe.description ? ReactHtmlParser(recipe.description) : \"\"}\r\n            </div>\r\n          </div>\r\n          {/* asdasdasd */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              <T>recipe_profile.ingredients</T>\r\n            </div>\r\n            <div className=\"recipe-ingredients-box\">\r\n              {recipe.ingredients &&\r\n                recipe.ingredients.map((line, i) => (\r\n                  <div className=\"recipe-mealValues-info recipe-ingredients-box-line\">\r\n                    <span>\r\n                      {line.name ? line.name.name : \"\"}{\" \"}\r\n                      {line.method && `(${line.method})`}\r\n                    </span>\r\n                    <span>\r\n                      {line.weight ? `${line.weight}g` : line.weight}{\" \"}\r\n                      {line.volume ? `${line.volume}ml` : line.volume}\r\n                      {line.pieces ? ` ${line.pieces} piece` : line.pieces}\r\n                    </span>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n          {/* sdcsadas */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              <T>recipe_profile.prepration</T>\r\n            </div>\r\n            <div className=\"recipe-prepration-box\">\r\n              {recipe.cookingProcess\r\n                ? recipe.cookingProcess.map((line, i) => (\r\n                    <div className=\"recipe-mealValues-info recipe-prepration-box-line\">\r\n                      <span className=\"recipe-mealValues-info-number\">\r\n                        {i + 1}\r\n                      </span>{\" \"}\r\n                      {line}\r\n                    </div>\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n          </div>\r\n          {/* dasdasdsad */}\r\n          {/* dasdasdsad */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              <T>recipe_profile.tips</T>\r\n            </div>\r\n            <div\r\n              className=\"recipe-mealValues-info\"\r\n              style={{\r\n                backgroundColor: \"#ffeee0\",\r\n                minHeight: \"100px\",\r\n                padding: \"10px\",\r\n              }}\r\n            >\r\n              {ReactHtmlParser(recipe?.tips)}\r\n            </div>\r\n          </div>\r\n          {/* sdasdasdas */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              <T>recipe_profile.notes</T>\r\n            </div>\r\n            <div\r\n              className=\"recipe-mealValues-info\"\r\n              style={{\r\n                backgroundColor: \"#ffeee0\",\r\n                minHeight: \"100px\",\r\n                padding: \"10px\",\r\n                listStyle: \"none\",\r\n              }}\r\n            >\r\n              {ReactHtmlParser(recipe?.notes)}\r\n            </div>\r\n          </div>\r\n          {/* sdasdasdas */}\r\n          {/* <div className=\"trainer-profile-goals\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              <T>recipe_profile.comments</T>\r\n            </div>\r\n            <div\r\n              className=\"trainer-profile-goals-container\"\r\n              style={{ backgroundColor: \"#e1e9f2\" }}\r\n            > */}\r\n          {/* {.map((comment) => (\r\n                <div\r\n                  className=\"challenge-profile-comment font-paragraph-white\"\r\n                  style={{ backgroundColor: \"transparent\" }}\r\n                >\r\n                  <span className=\"challenge-profile-comment-username\">\r\n                    <UserOutlined /> {comment.username}\r\n                  </span>\r\n                  <span style={{ color: \"black\" }}>{comment.comment}</span>\r\n                </div>\r\n              ))} */}\r\n          <div\r\n            className=\"trainer-profile-goals\"\r\n            style={{\r\n              borderBottom: \"1px solid transparent\",\r\n              backgroundColor: \"#e1e9f2\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{\r\n                color: \"#72777B\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              <T>challenge_profile.comments</T>\r\n            </div>\r\n            {allComments.map((c) => (\r\n              <div className=\"comment-container\">\r\n                <div className=\"comment-container-c1 font-paragraph-black\">\r\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\r\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\r\n                  <div className=\"comment-container-c2 font-paragraph-black\">\r\n                    {c.text}\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"font-paragraph-white comment-container-c3\"\r\n                  style={{ color: \"#82868b\" }}\r\n                >\r\n                  {moment(c.createdAt).format(\"MMM, Do YYYY\")}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {localStorage.getItem(\"jwtToken\") && (\r\n              <>\r\n                <div\r\n                  className=\"trainer-profile-goals-container\"\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    value={commentText}\r\n                    onChange={(e) => setCommentText(e.target.value)}\r\n                  />\r\n                </div>\r\n                {commentButtonLoading ? (\r\n                  <LoadingOutlined\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      fontSize: \"30px\",\r\n                      marginTop: \"10px\",\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <button\r\n                    className=\"common-transparent-button font-paragraph-white\"\r\n                    onClick={postCommentToBackend}\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      borderColor: \"#ff7700\",\r\n                      marginTop: \"10px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <T>common.postComment</T>\r\n                  </button>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          {/* </div>\r\n          </div> */}\r\n          {!localStorage.getItem(\"jwtToken\") && (\r\n            <div style={{ textAlign: \"center\", paddingTop: \"10px\" }}>\r\n              <Link\r\n                className=\"home-button font-paragraph-white\"\r\n                to=\"/challenges\"\r\n                style={{ width: \"80%\" }}\r\n              >\r\n                <span className=\"home-button-text\">\r\n                  <T>recipe_profile.start_today</T> <ArrowRightOutlined />\r\n                </span>\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {/* <Footer /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(RecipeProfile);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\UpdateRecipe.js",["575","576","577","578","579","580"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Pricing.js",["581"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\adminRequests.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWeekPanel.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Cards\\ChallengeCard.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\ScrollToTop.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\AllUsers.js",["582"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Table, Space, Input, Select } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { deleteUser, getAllUsers } from \"../../../services/users\";\r\nimport UpdateUser from \"./UpdateUser\";\r\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\r\n\r\nfunction AllUsers() {\r\n  const [filterAllUsers, setFilterAllUsers] = useState([]);\r\n  const [allChallengeGoals, setAllChallengeGoals] = useState([]);\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [selectedUser, setSelectedUser] = useState({});\r\n  const [show, setShow] = useState(\"\");\r\n\r\n  async function fetchUsers() {\r\n    const users = await getAllUsers();\r\n    const aCh = await getAllChallengeGoals();\r\n    if (aCh.challengeGoals) {\r\n      setAllChallengeGoals(aCh.challengeGoals);\r\n    }\r\n    setAllUsers(users.users);\r\n    setFilterAllUsers(users.users);\r\n  }\r\n\r\n  useEffect(async () => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filter === \"all\") {\r\n      setFilterAllUsers(allUsers);\r\n    }\r\n    if (filter === \"admin\") {\r\n      const admins = allUsers.filter((f) => f.role === \"admin\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"customer\") {\r\n      const admins = allUsers.filter((f) => f.role === \"customer\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"nutrist\") {\r\n      const admins = allUsers.filter((f) => f.role === \"nutrist\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"shopmanager\") {\r\n      const admins = allUsers.filter((f) => f.role === \"shopmanager\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"blogger\") {\r\n      const admins = allUsers.filter((f) => f.role === \"blogger\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"trainer\") {\r\n      const admins = allUsers.filter((f) => f.role === \"trainer\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n  }, [allUsers, filter]);\r\n\r\n  const removeUser = async (d) => {\r\n    await deleteUser(d._id);\r\n    fetchUsers();\r\n  };\r\n\r\n  const onUpdateComplete = async (setLoading, vals, blogId) => {\r\n    // await updateBlog(vals, blogId);\r\n    // setLoading(false);\r\n    // setShow(false);\r\n    // fetchData();\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"_id\",\r\n      key: \"_id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Username\",\r\n      dataIndex: \"username\",\r\n      key: \"username\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    // {\r\n    //   title: \"Firstname\",\r\n    //   dataIndex: \"firstName\",\r\n    //   key: \"firstname\",\r\n    //   render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    // },\r\n    // {\r\n    //   title: \"Lastname\",\r\n    //   dataIndex: \"lastName\",\r\n    //   key: \"lastname\",\r\n    //   render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    // },\r\n    {\r\n      title: \"Email\",\r\n      dataIndex: \"email\",\r\n      key: \"email\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n\r\n    {\r\n      title: \"Role\",\r\n      key: \"role\",\r\n      dataIndex: \"role\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\" style={{ color: \"#ff7700\" }}>\r\n          {text}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Created At\",\r\n      key: \"updatedAt\",\r\n      dataIndex: \"updatedAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              setSelectedUser(record);\r\n              setShow(true);\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Button type=\"danger\" onClick={() => removeUser(record)}>\r\n            Delete\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <UpdateUser\r\n        userInfo={selectedUser}\r\n        show={show}\r\n        setShow={setShow}\r\n        onUpdateComplete={onUpdateComplete}\r\n        allChallengeGoals={allChallengeGoals}\r\n        fetchUsers={fetchUsers}\r\n        key={selectedUser ? selectedUser._id : \"\"}\r\n      />\r\n      <h2 className=\"font-heading-black\">All Users</h2>\r\n      <div>\r\n        <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\r\n          Filter By Role:\r\n        </span>\r\n        <Select\r\n          defaultValue=\"\"\r\n          style={{ width: 120, marginLeft: \"10px\" }}\r\n          onChange={(e) => setFilter(e)}\r\n        >\r\n          {[\r\n            \"all\",\r\n            \"admin\",\r\n            \"customer\",\r\n            \"trainer\",\r\n            \"blogger\",\r\n            \"shopmanager\",\r\n            \"nutrist\",\r\n          ].map((t) => (\r\n            <Select.Option value={t}>{t}</Select.Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        <Input\r\n          placeholder=\"Search Users By Username\"\r\n          onChange={(e) =>\r\n            setFilterAllUsers(\r\n              allUsers.filter((user) =>\r\n                user.username\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Input\r\n          placeholder=\"Search User By ID\"\r\n          style={{ marginTop: \"10px\" }}\r\n          onChange={(e) =>\r\n            setFilterAllUsers(\r\n              allUsers.filter((user) =>\r\n                user._id.toUpperCase().includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Table columns={columns} dataSource={filterAllUsers} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllUsers;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeReviewModal.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\MusicPlayer.js",["583","584","585","586","587","588","589","590"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Modal, Slider } from \"antd\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { CloseOutlined, CustomerServiceOutlined } from \"@ant-design/icons\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\n\r\nimport MusicIcon from \"../../assets/icons/music-player-volume-icon.png\";\r\nimport MuteMusicIcon from \"../../assets/icons/music-player-volume-mute-icon.png\";\r\nimport MusicListIcon from \"../../assets/icons/music-list-icon.png\";\r\nimport PlayerState, {\r\n  breakContext,\r\n  playerStateContext,\r\n} from \"../../contexts/PlayerState\";\r\n\r\nfunction MusicPlayer({ visible, setMusicPlayerVisible, musicList }) {\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [currentBreak, setCurrentBreak] = useContext(breakContext);\r\n  const { height, width } = useWindowDimensions();\r\n  const [currentPlaying, setCurrentPLaying] = useState({\r\n    _id: 12345,\r\n    name: \"\",\r\n    url: \"\",\r\n  });\r\n  const [volume, setVolume] = useState(100);\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (playerState.playing) {\r\n      localStorage.setItem(\"music-playing\", true);\r\n      return;\r\n    }\r\n\r\n    // if (currentBreak && !playerState.playing) {\r\n    //   localStorage.setItem(\"music-playing\", true);\r\n    //   return;\r\n    // }\r\n\r\n    localStorage.removeItem(\"music-playing\");\r\n  }, [playerState.playing, currentBreak]);\r\n  const handleOnMusicSelect = (m) => {\r\n    if (m === \"stop\") {\r\n      console.log(\"hereere\");\r\n      // setPlaying(false);\r\n      setCurrentPLaying({\r\n        _id: 12345,\r\n        name: \"\",\r\n        url: \"\",\r\n      });\r\n      localStorage.removeItem(\"music-playing\");\r\n      return;\r\n    }\r\n\r\n    setCurrentPLaying(m);\r\n    localStorage.setItem(\"music-playing\", true);\r\n    // setPlaying(true);\r\n  };\r\n  const onVolumeChange = (e) => {\r\n    // volume needs to be between 0 and 1\r\n    setVolume(e / 100);\r\n  };\r\n  // const onPlayPause = () => {\r\n  //   setPlaying((prev) => !prev);\r\n  // };\r\n  return (\r\n    <div\r\n      className=\"music-player-modal-container\"\r\n      style={{ display: visible ? \"flex\" : \"none\" }}\r\n    >\r\n      {console.log(\"======================================>\", currentPlaying)}\r\n      <CloseOutlined\r\n        onClick={() => setMusicPlayerVisible(false)}\r\n        style={{\r\n          color: \"rgb(255, 255, 255)\",\r\n          top: \"20px\",\r\n          position: \"absolute\",\r\n          fontSize: \"30px\",\r\n          right: \"50px\",\r\n        }}\r\n      />\r\n      <ReactPlayer\r\n        width=\"100%\"\r\n        height=\"100px\"\r\n        url={`${process.env.REACT_APP_SERVER}/uploads/${currentPlaying.url}`}\r\n        style={{ outline: \"none\", border: \"none\", display: \"none\" }}\r\n        playing={localStorage.getItem(\"music-playing\")}\r\n        controls={false}\r\n        volume={volume}\r\n        loop={true}\r\n      />\r\n      <div className=\"music-player-slider-container\">\r\n        <img src={MuteMusicIcon} alt=\"\" />\r\n        <Slider\r\n          value={volume * 100}\r\n          min={0}\r\n          max={100}\r\n          style={{ width: \"70%\", display: \"inline-block\" }}\r\n          onChange={onVolumeChange}\r\n          onAfterChange={onVolumeChange}\r\n          tipFormatter={(v) => `${v}%`}\r\n        />\r\n        <img src={MusicIcon} alt=\"\" />\r\n      </div>\r\n      <div className=\"music-player-modal-container--list\">\r\n        <img src={MusicListIcon} alt=\"music-list-icon\" />{\" \"}\r\n        <h3 className=\"font-paragraph-white\">Choose your mood</h3>\r\n        <Scrollbars style={{ minHeight: \"100px\" }}>\r\n          <div className=\"music-player-modal-container--list-files\">\r\n            <div key={1234} onClick={() => handleOnMusicSelect(\"stop\")}>\r\n              <span\r\n                style={{\r\n                  color:\r\n                    currentPlaying._id !== 12345\r\n                      ? \"#fff\"\r\n                      : \"var(--color-orange)\",\r\n                  transform:\r\n                    currentPlaying._id !== 12345 ? \"scale(1)\" : \"scale(1.02)\",\r\n                }}\r\n                className=\"font-paragraph-white\"\r\n              >\r\n                <CustomerServiceOutlined /> No Music\r\n              </span>\r\n            </div>\r\n            {musicList.map((m) => (\r\n              <div key={m._id} onClick={() => handleOnMusicSelect(m)}>\r\n                <span\r\n                  className=\"font-paragraph-white\"\r\n                  style={{\r\n                    color:\r\n                      currentPlaying._id === m._id\r\n                        ? \"var(--color-orange)\"\r\n                        : \"#fff\",\r\n                    transform:\r\n                      currentPlaying._id === m._id ? \"scale(1.02)\" : \"scale(1)\",\r\n                  }}\r\n                >\r\n                  <CustomerServiceOutlined /> {m.name}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Scrollbars>\r\n      </div>\r\n    </div>\r\n    // </Modal>\r\n  );\r\n}\r\n\r\nexport default MusicPlayer;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\LanguageContext.js",[],["591","592"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Challenges.js",["593"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\LanguageSelector\\LanguageSelector.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\NewPost.js",["594"],"import React, { useState } from \"react\";\r\nimport { Form, Input, Button, Select } from \"antd\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { createPost } from \"../../../services/posts\";\r\nconst { Option } = Select;\r\n\r\nfunction NewPost() {\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const [type, setType] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n\r\n  const onFinish = async (values) => {\r\n    if (type && image) {\r\n      const data = {\r\n        title: values.name,\r\n        text: values.description,\r\n        image: typeof image === \"object\" ? image.link : \"\",\r\n        type: type,\r\n      };\r\n      await createPost(data);\r\n    } else {\r\n      window.alert(\"All values are requeired to create a post\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      <h2 className=\"font-heading-black\">New Post</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Post Title\"\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input post title!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Post Description\"\r\n            name=\"description\"\r\n            rules={[\r\n              { required: true, message: \"Please input post description!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Post Image\" name=\"image\">\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"images\");\r\n                setMediaManagerActions([image, setImage]);\r\n              }}\r\n            >\r\n              Upload Image\r\n            </Button>\r\n            <div\r\n              className=\"font-paragraph-white\"\r\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\r\n            >\r\n              {image && image.name}\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item label=\"Post Category\" name=\"category\" required={true}>\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={type}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setType(e)}\r\n            >\r\n              {[\"Challenge\", \"Magazine\", \"Recipe\", \"News Updates\"].map(\r\n                (e, i) => (\r\n                  <Select.Option key={i + 1} value={e}>\r\n                    {e}\r\n                  </Select.Option>\r\n                )\r\n              )}\r\n            </Select>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewPost;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MembershipManager\\NewMembership.js",["595","596","597"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutTab.js",["598","599","600","601","602"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\CreatePayment.js",["603","604","605","606"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\LoggedinNavbar.js",["607"],"import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../assets/navbar.css\";\r\nimport {\r\n  UserOutlined,\r\n  BellOutlined,\r\n  CaretDownOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Badge, Avatar, Popover } from \"antd\";\r\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\r\nimport Logo from \"../images/logo_orange.png\";\r\n\r\nimport Coins from \"../assets/icons/coins.svg\";\r\nimport { logoutUser } from \"../services/authentication\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { T } from \"./Translate\";\r\n\r\nfunction LoggedinNavbar(props) {\r\n  // eslint-disable-next-line\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const userPoints = useContext(userPointsContext)[0];\r\n\r\n  const content = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      <Link to=\"/user/dashboard\" className=\"font-paragraph-white hover-orange\">\r\n        <T>navbar.success_overview</T>\r\n      </Link>\r\n      <Link to=\"/user/update\" className=\"font-paragraph-white hover-orange\">\r\n        <T>navbar.update</T>\r\n      </Link>\r\n      <Link to=\"/user/settings\" className=\"font-paragraph-white hover-orange\">\r\n        <T>navbar.setting</T>\r\n      </Link>\r\n      <Link\r\n        className=\"font-paragraphw-white hover-orange\"\r\n        onClick={() => logoutUser(props.history, setUserInfo)}\r\n      >\r\n        <T>navbar.logout</T>\r\n      </Link>\r\n    </div>\r\n  );\r\n\r\n  const notificationContent = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      {userInfo.notifications.map((v) => (\r\n        <span className=\"font-paragraph-white\">{v.value}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"loggedin-nav-container\">\r\n        <div>\r\n          <Link to=\"/\" className=\"navbar-logo\">\r\n            <img src={Logo} alt=\"logo\" className=\"logo small-screenlogo\" />\r\n          </Link>\r\n        </div>\r\n        <div className=\"loggedin-nav-userinfo\">\r\n          <Popover\r\n            placement=\"bottom\"\r\n            content={notificationContent}\r\n            trigger=\"click\"\r\n          >\r\n            <Badge\r\n              count={userInfo.notifications.length}\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                marginRight: \"20px\",\r\n              }}\r\n            >\r\n              <BellOutlined\r\n                style={{\r\n                  fontSize: \"2.5rem\",\r\n                  color: \"#677182\",\r\n                  cursor: \"pointer\",\r\n                  backgroundColor: \"#171E27\",\r\n                  padding: \"5px\",\r\n                  marginRight: \"20px\",\r\n                }}\r\n              />\r\n            </Badge>\r\n          </Popover>\r\n          <Avatar\r\n            shape=\"square\"\r\n            src={userInfo.avatar}\r\n            icon={<UserOutlined />}\r\n            style={{\r\n              marginRight: \"20px\",\r\n            }}\r\n          />\r\n          <Popover placement=\"bottom\" content={content} trigger=\"click\">\r\n            <div className=\"loggedin-nav-name font-paragraph-white\">\r\n              <span>\r\n                {userInfo.username} <CaretDownOutlined />\r\n              </span>\r\n              <span style={{ color: \"#677182\", fontSize: \"1.6rem\" }}>\r\n                <img src={Coins} /> {userPoints}\r\n                {console.log(\"ammar\", userPoints)}\r\n              </span>\r\n            </div>\r\n          </Popover>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoggedinNavbar);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Feed.js",["608","609","610","611"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Community.js",["612","613","614","615","616","617","618","619"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  CommentOutlined,\r\n  FireOutlined,\r\n  UserOutlined,\r\n  ClockCircleOutlined,\r\n  FlagFilled,\r\n  LoadingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Avatar, Modal, Pagination } from \"antd\";\r\nimport CommentSection from \"./CommentSection\";\r\n\r\nimport ChatWhite from \"../../assets/icons/chat-white.svg\";\r\nimport Clap from \"../../assets/icons/clap-orange.svg\";\r\nimport Clock from \"../../assets/icons/feed-clock.svg\";\r\nimport ClapGray from \"../../assets/icons/clap-gray.svg\";\r\nimport {\r\n  addLikeToPost,\r\n  addUnlikePost,\r\n  getPostsWithPagination,\r\n} from \"../../services/communityPosts\";\r\nimport ReactHTMLParser from \"react-html-parser\";\r\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\r\n\r\nfunction Community({ userInfo }) {\r\n  const { language } = useContext(LanguageContext);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [totalPosts, setTotalPosts] = useState(0);\r\n  // eslint-disable-next-line\r\n  const [data, setData] = useState([]);\r\n  const [selectedPost, setSelectedPost] = useState({});\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    const res = await getPostsWithPagination(pageNumber, language);\r\n    setLoading(false);\r\n    setData(res.posts);\r\n    setTotalPosts(6 * res.lastPage);\r\n    console.log(res);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [pageNumber, language]);\r\n\r\n  const addLike = async (id) => {\r\n    const res = await addLikeToPost(id);\r\n    if (res) {\r\n      const d = data.map((i) => {\r\n        if (i._id === id) {\r\n          i.likes = res;\r\n        }\r\n        return i;\r\n      });\r\n      setData(d);\r\n    }\r\n    // fetchData();\r\n    console.log(\"like\", res);\r\n  };\r\n  const unlikePost = async (id) => {\r\n    const res = await addUnlikePost(id);\r\n    if (res) {\r\n      const d = data.map((i) => {\r\n        if (i._id === id) {\r\n          i.likes = res;\r\n        }\r\n        return i;\r\n      });\r\n      setData(d);\r\n    }\r\n  };\r\n  function itemRender(current, type, originalElement) {\r\n    if (type === \"prev\") {\r\n      return (\r\n        <a className=\"orange-button-pagination font-paragraph-white\">\r\n          Previous\r\n        </a>\r\n      );\r\n    }\r\n    if (type === \"next\") {\r\n      return (\r\n        <a className=\"green-button-pagination font-paragraph-white\">Next</a>\r\n      );\r\n    }\r\n    return originalElement;\r\n  }\r\n\r\n  const updatePosts = (id, comments) => {\r\n    const p = data.map((post) => {\r\n      if (post._id === id) {\r\n        post.comments = comments;\r\n        return post;\r\n      }\r\n      return post;\r\n    });\r\n    setData(p);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CommentSection\r\n        post={selectedPost}\r\n        updatePosts={updatePosts}\r\n        visible={open}\r\n        setVisible={setOpen}\r\n        community={true}\r\n      />\r\n      <div\r\n        className=\"dashboard-feed-container\"\r\n        style={{ justifyItems: \"center\" }}\r\n      >\r\n        {loading ? (\r\n          <LoadingOutlined style={{ fontSize: \"30px\", color: \"#ff7700\" }} />\r\n        ) : data ? (\r\n          data.map((d) => (\r\n            <div className=\"dashboard-feed-container-card\">\r\n              {console.log(\"d\", d)}\r\n              <Link to={`${d.url ? d.url : \"#\"}`}>\r\n                <div\r\n                  className=\"dashboard-feed-container-card-row1\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  <Avatar\r\n                    shape=\"square\"\r\n                    size=\"large\"\r\n                    src={d.avatar ? d.avatar : \"\"}\r\n                    icon={<UserOutlined />}\r\n                  />\r\n\r\n                  <div className=\"dashboard-feed-container-card-row1-col2 font-paragraph-white\">\r\n                    <span>{d.username ? d.username : \"\"}</span>\r\n                    <span\r\n                      style={{\r\n                        opacity: \"0.8\",\r\n                        color: \"#8e9298\",\r\n                        fontSize: \"13px\",\r\n                      }}\r\n                    >\r\n                      <img src={Clock} alt=\"\" /> {moment(d.date).fromNow()}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n              {/* <Link to={`/${d.type}/${d.id}`}> */}\r\n              <Link to={`${d.url ? d.url : \"#\"}`}>\r\n                <div\r\n                  className=\"dashboard-feed-container-card-row2\"\r\n                  style={{\r\n                    background: `url(${process.env.REACT_APP_SERVER}/uploads/${\r\n                      d.image ? d.image.replaceAll(\" \", \"%20\") : \"\"\r\n                    })`,\r\n                    backgroundSize: \"cover\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  <div className=\"dashboard-feed-container-card-row2-tag font-paragraph-white\">\r\n                    {d.type}\r\n                  </div>\r\n                </div>\r\n                {/* </Link> */}\r\n                <div className=\"dashboard-feed-container-card-row3\">\r\n                  <div className=\"dashboard-feed-container-card-row3-heading font-paragraph-white\">\r\n                    {ReactHTMLParser(d.title)}\r\n                  </div>\r\n                  <div className=\"dashboard-feed-container-card-row3-text font-paragraph-white\">\r\n                    {ReactHTMLParser(d.text)}\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n              <div className=\"dashboard-feed-container-card-row4\">\r\n                <span\r\n                  className=\"dashboard-feed-container-card-row4-click\"\r\n                  onClick={() => {\r\n                    if (d.likes.some((like) => like[\"user\"] === userInfo.id)) {\r\n                      unlikePost(d._id);\r\n                    } else {\r\n                      addLike(d._id);\r\n                    }\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={\r\n                      d.likes.some((like) => like[\"user\"] === userInfo.id)\r\n                        ? Clap\r\n                        : ClapGray\r\n                    }\r\n                    alt=\"\"\r\n                  />{\" \"}\r\n                  {d.likes.length}\r\n                </span>\r\n                <span\r\n                  className=\"dashboard-feed-container-card-row4-click\"\r\n                  onClick={() => {\r\n                    setOpen(true);\r\n                    setSelectedPost(d);\r\n                  }}\r\n                >\r\n                  <img src={ChatWhite} alt=\"\" /> {d.comments.length}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <h2 className=\"font-heading-white\">No posts here!</h2>\r\n        )}\r\n      </div>\r\n      <div className=\"pagination-container\">\r\n        <div className=\"pagination-container-inside\">\r\n          {data && (\r\n            <Pagination\r\n              current={pageNumber}\r\n              onChange={(page) => setPageNumber(page)}\r\n              itemRender={itemRender}\r\n              total={totalPosts}\r\n              pageSize={6}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Community;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\NewUser.js",["620","621","622","623","624","625","626","627","628","629","630"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\users.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\main.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\faqs.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\bodyFocus.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\UpdateFaq.js",["631","632","633"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\EditTypeName.js",["634"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Input, Modal } from \"antd\";\r\nimport { updateBlogCategory } from \"../../../services/blogs\";\r\nimport {\r\n  updateDiet,\r\n  updateFoodType,\r\n  updateIngredient,\r\n  updateMealType,\r\n} from \"../../../services/recipes\";\r\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\r\n\r\nfunction EditTypeName({\r\n  editCategoryNameModalVisible,\r\n  setEditCategoryModelVisible,\r\n  selectedForUpdate,\r\n  fethData,\r\n  titleName,\r\n}) {\r\n  const { language } = useContext(LanguageContext);\r\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n  React.useEffect(() => {\r\n    if (selectedForUpdate) {\r\n      setNewCategoryName(selectedForUpdate.name);\r\n    }\r\n  }, [selectedForUpdate]);\r\n\r\n  const updateItem = async () => {\r\n    if (newCategoryName.length > 0) {\r\n      if (titleName === \"Update Meal Type\") {\r\n        await updateMealType(\r\n          `${newCategoryName}___${language}`,\r\n          selectedForUpdate._id\r\n        );\r\n      }\r\n      if (titleName === \"Update Food Type\") {\r\n        await updateFoodType(\r\n          `${newCategoryName}___${language}`,\r\n          selectedForUpdate._id\r\n        );\r\n      }\r\n      if (titleName === \"Update Diet Type\") {\r\n        await updateDiet(newCategoryName, selectedForUpdate._id);\r\n      }\r\n\r\n      if (titleName === \"Update Ingredient\") {\r\n        await updateIngredient(newCategoryName, selectedForUpdate._id);\r\n      }\r\n      setEditCategoryModelVisible(false);\r\n      fethData();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onCancel={() => setEditCategoryModelVisible(false)}\r\n      footer={false}\r\n      visible={editCategoryNameModalVisible}\r\n    >\r\n      <p className=\"font-paragraph-white\">{titleName}</p>\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Input\r\n          value={newCategoryName}\r\n          onChange={(e) => setNewCategoryName(e.target.value)}\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          onClick={updateItem}\r\n          style={{\r\n            backgroundColor: \"var(--color-orange)\",\r\n            borderColor: \"var(--color-orange)\",\r\n            marginLeft: \"5px\",\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default EditTypeName;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\UpdateUser.js",["635","636","637","638","639","640","641"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\AllBlogs.js",["642"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\AllChallenges.js",["643"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengeProfile.js",["644","645","646","647","648"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\HelpPopupPlayer.js",["649","650","651","652","653","654"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\products.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\UpdateChallenge.js",["655","656","657","658","659","660","661"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Tabs, Modal, Button, Form } from \"antd\";\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\r\nimport NewChallengeMainTab from \"./NewChallengeMainTab\";\r\nimport NewChallengeWorkoutTab from \"./NewChallengeWorkoutTab\";\r\nimport NewChallengeMusicTab from \"./NewChallengeMusicTab\";\r\nimport NewChallengeAdditionalTab from \"./NewChallengeAdditionalTab\";\r\n\r\nimport { v4 } from \"uuid\";\r\n\r\n// services\r\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\r\nimport { getAllChallengeTags } from \"../../../services/createChallenge/tags\";\r\nimport { getAllChallengeEquipments } from \"../../../services/createChallenge/equipments\";\r\nimport { getAllBodyFocus } from \"../../../services/createChallenge/bodyFocus\";\r\nimport { getAllTrainers } from \"../../../services/trainers\";\r\nimport { getAllChallengeProducts } from \"../../../services/createChallenge/products\";\r\nimport {\r\n  createChallenge,\r\n  getAllChallenges,\r\n  getAllUserChallenges,\r\n  updateChallenge,\r\n} from \"../../../services/createChallenge/main\";\r\nimport setAuthToken from \"../../../helpers/setAuthToken\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport { createPost } from \"../../../services/posts\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction callback(key) {\r\n  console.log(key);\r\n}\r\n\r\nfunction UpdateChallenge({ selectedChallengeForUpdate, setCurrentSelection }) {\r\n  const [form] = Form.useForm();\r\n  // state of main tab strats\r\n  const [name, setName] = useState(\"\");\r\n  const [access, setAccess] = useState([]);\r\n  const [price, setPrice] = useState(\"\");\r\n  const [points, setPoints] = useState(0);\r\n  const [currency, setCurrency] = useState(\"$\");\r\n  const [thumbnail, setThumbnail] = useState(\"\");\r\n  const [videoThumbnail, setVideoThumbnail] = useState(\"\");\r\n  const [videoTrailer, setVideoTrailer] = useState(\"\");\r\n  const [trainers, setTrainers] = useState([]);\r\n  const [allTrainers, setAllTrainers] = useState([]);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [difficulty, setDifficulty] = useState(\"\");\r\n  const [goals, setGoals] = useState([]);\r\n  const [bodyFocus, setBodyFocus] = useState([]);\r\n  const [equipments, setEquipments] = useState([]);\r\n  const [duration, setDuration] = useState(\"\");\r\n  // we get all goals from backend\r\n  const [allGoals, setAllGoals] = useState([]);\r\n  const [newGoalName, setNewGoalName] = useState(\"\");\r\n  const [showGoalModal, setShowGoalModal] = useState(false);\r\n  // we get all bodyfocus from backend\r\n  const [allBodyfocus, setAllBodyfocus] = useState([]);\r\n  const [newBodyfocusName, setNewBodyfocusName] = useState(\"\");\r\n  const [showBodyfocusModal, setShowBodyfocusModal] = useState(false);\r\n  // we get all equipments from backend\r\n  const [allEquipments, setAllEquipments] = useState([]);\r\n  const [newEquipmentName, setNewEquipmentName] = useState(\"\");\r\n  const [equipmentModal, setEquipmentModal] = useState(false);\r\n  const [newDurationName, setNewDurationName] = useState(\"\");\r\n  const [showDurationModal, setShowDurationModal] = useState(false);\r\n  // we get all tags from backend\r\n  const [tags, setTags] = useState([]);\r\n  const [allTags, setAllTags] = useState([]);\r\n  const [newTagName, setNewTagName] = useState(\"\");\r\n  const [showTagModal, setShowTagModal] = useState(false);\r\n\r\n  //fitness interest\r\n  const [selectedFitnessInterest, setSelectedFitnessInterest] = useState([]);\r\n\r\n  // state of main tab ends\r\n\r\n  // state pf the new challenge tab starts\r\n  const [weeks, setWeeks] = useState([]);\r\n  const [addWorkoutModalVisible, setAddWorkoutModalVisible] = useState(false);\r\n  const [workoutModalFullscreen, setWorkoutModalFullscreen] = useState(false);\r\n  const [allProducts, setAllProducts] = useState([\r\n    { id: 1, name: \"Carpet\" },\r\n    { id: 2, name: \"Mat\" },\r\n    { id: 3, name: \"Dumbell\" },\r\n  ]);\r\n  const [products, setProducts] = useState([]);\r\n  //   this is for new workout creation process\r\n  const [workoutToUpdate, setWorkoutToUpdate] = useState(\"\");\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [currentWeek, setCurrentWeek] = useState(\"\");\r\n  const [workoutTitle, setWorkoutTile] = useState(\"\");\r\n  const [workoutSubtitle, setWorkoutSubtile] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [infoTitle, setInfoTile] = useState(\"\");\r\n  const [infoFile, setInfoFile] = useState(\"\");\r\n  // const [points, setPoints] = useState(0);\r\n  const [workoutIntroVideoFile, setWorkoutIntroVideoFile] = useState(\"\");\r\n  const [workoutIntroVideoLength, setWorkoutIntroVideoLength] = useState(\"\");\r\n  const [relatedEquipments, setRelatedEquipments] = useState([]);\r\n  const [renderWorkout, setRenderWorkout] = useState(false);\r\n  const [workoutIdsThatNeedToBeUpdated, setWorkoutIdsThatNeedToBeUpdated] =\r\n    useState([]);\r\n  // this is a rendered workout exercise it wonly takes in full video of the exercise\r\n  const [renderedWorkoutExercises, setRenderWorkoutExercises] = useState([\r\n    {\r\n      exerciseId: v4(),\r\n      exerciseName: \"\",\r\n      exerciseVideo: \"\",\r\n    },\r\n  ]);\r\n  // this is a non-rendered workout exercise it will take multiple videos and voiceeover\r\n  const [nonRenderedWorkoutExercises, setNonRenderedWorkoutExercises] =\r\n    useState([\r\n      {\r\n        exerciseId: v4(),\r\n        exerciseName: \"\",\r\n        exerciseVideo: \"\",\r\n        videoLength: \"\",\r\n        voiceOverFile: \"\",\r\n        breakAfterExercise: \"\",\r\n        exerciseGroupName: \"\",\r\n      },\r\n    ]);\r\n  const [musics, setMusics] = useState([]);\r\n  // state of the new cha;llenge ends\r\n\r\n  // state for additional inform\r\n  const [results, setResults] = useState(\"\");\r\n  // const [info, setInfo] = useState(\"\");\r\n  const [makePublic, setMakePublic] = useState(false);\r\n  const [allowComments, setAllowComments] = useState(false);\r\n  const [allowReviews, setAllowReviews] = useState(false);\r\n  const [additionalProducts, setAdditionalProducts] = useState([]);\r\n  const [informationList, setInformationList] = useState([]);\r\n  const [relatedProducts, setRelatedProducts] = useState([]);\r\n  // --------------------\r\n  const [createPostModalVisible, setCreatePostModalVisible] = useState(false);\r\n  const [weeksToBeUpdated, setWeeksToBeUpdated] = useState([]);\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  //\r\n  const [selectedChallenge, setSelectedChallenge] = useState(\"\");\r\n  const [allChallenges, setAllChallenges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n    addStuffToMainTabForm();\r\n    fethData();\r\n  }, []);\r\n\r\n  const addStuffToMainTabForm = () => {\r\n    console.log(\"selected challenge\", selectedChallengeForUpdate);\r\n    const {\r\n      challengeName,\r\n      description,\r\n      price,\r\n      points,\r\n      currency,\r\n      thumbnailLink,\r\n      videoThumbnailLink,\r\n      videoLink,\r\n      trainers,\r\n      access,\r\n      difficulty,\r\n      challengeGoals,\r\n      tags,\r\n      body,\r\n      duration,\r\n      music,\r\n      additionalProducts,\r\n      results,\r\n      allowComments,\r\n      allowReviews,\r\n      isPublic,\r\n      informationList,\r\n      weeks,\r\n      trainersFitnessInterest,\r\n      alternativeLanguage,\r\n    } = selectedChallengeForUpdate;\r\n\r\n    console.log(selectedChallengeForUpdate);\r\n    // return;\r\n    alternativeLanguage && setSelectedChallenge(alternativeLanguage._id);\r\n    setName(challengeName);\r\n    setAccess(access);\r\n    setPrice(price);\r\n    setPoints(points);\r\n    setCurrency(currency);\r\n    setThumbnail({ name: thumbnailLink, link: thumbnailLink });\r\n    setVideoThumbnail({ name: videoThumbnailLink, link: videoThumbnailLink });\r\n    setVideoTrailer({ name: videoLink, link: videoLink });\r\n    setTrainers(trainers.map((t) => t._id));\r\n    setDescription(description);\r\n    setDifficulty(difficulty);\r\n    setSelectedFitnessInterest(trainersFitnessInterest.map((t) => t._id));\r\n    setGoals(challengeGoals);\r\n    setBodyFocus(body.map((t) => t._id));\r\n    setDuration(duration);\r\n    setTags(tags.map((t) => t._id));\r\n    setMusics(\r\n      music\r\n        ? music.map((m) => ({\r\n            _id: m._id,\r\n            musicId: m._id,\r\n            file: { name: m.url, link: m.url },\r\n            name: m.name,\r\n          }))\r\n        : []\r\n    );\r\n    setAdditionalProducts(additionalProducts.map((t) => t._id));\r\n    setResults(results);\r\n    setAllowComments(allowComments);\r\n    setAllowReviews(allowReviews);\r\n    setMakePublic(isPublic);\r\n    setInformationList(\r\n      informationList.map((j) => ({\r\n        _id: j._id,\r\n        id: j._id,\r\n        text: j.info,\r\n        file: { link: j.icon },\r\n      }))\r\n    );\r\n    setWeeksToBeUpdated(weeks);\r\n    // setWeeks(weeks);\r\n    console.log(\"checking ammar\", weeks);\r\n    const w = weeks.map((week) => ({\r\n      _id: week._id,\r\n      id: week._id,\r\n      weekId: week._id,\r\n      weekTitle: week.weekName ? week.weekName : \"\",\r\n      weekSubtitle: week.weekSubtitle ? week.weekSubtitle : \"\",\r\n      workouts: week.workouts.map((workout) => ({\r\n        _id: workout._id,\r\n        workoutId: workout._id,\r\n        workoutTitle: workout.title ? workout.title : \"\",\r\n        workoutSubtitle: workout.subtitle ? workout.subtitle : \"\",\r\n        renderWorkout: workout.isRendered ? workout.isRendered : false,\r\n        workoutIntroVideoFile: workout.introVideoLink\r\n          ? {\r\n              name: workout.introVideoLink,\r\n              link: workout.introVideoLink,\r\n            }\r\n          : { name: \"\", link: \"\" },\r\n        workoutIntroVideoLength: workout.introVideoLength\r\n          ? workout.introVideoLength\r\n          : \"\",\r\n        relatedProducts: workout.relatedProducts\r\n          ? workout.relatedProducts.map((t) => t._id)\r\n          : \"\",\r\n        relatedEquipments: workout.relatedEquipments\r\n          ? workout.relatedEquipments.map((t) => t._id)\r\n          : \"\",\r\n        infoTitle: workout.infoTitle ? workout.infoTitle : \"\",\r\n        infoFile: workout.infoFile\r\n          ? { name: workout.infoFile, link: workout.infoFile }\r\n          : \"\",\r\n        groupName: workout.groupName ? workout.groupName : \"\",\r\n        exercises: workout.isRendered\r\n          ? workout.exercises.map((e) => ({\r\n              _id: e?._id,\r\n              exerciseId: e?.exerciseId?._id,\r\n              exerciseName: e?.exerciseId?.title ? e?.exerciseId?.title : \"\",\r\n              exerciseVideo: e?.exerciseId?.videoURL,\r\n              voiceOverFile: e?.exerciseId?.voiceOverLink,\r\n              videoLength: e?.exerciseLength ? e?.exerciseLength : \"\",\r\n              exerciseGroupName: e?.groupName ? e?.groupName : \"\",\r\n              breakAfterExercise: e?.break ? e?.break : \"\",\r\n            }))\r\n          : workout.exercises.map((e) => ({\r\n              exerciseName: e?.renderedWorkoutExerciseName,\r\n              exerciseVideo: e?.renderedWorkoutExerciseVideo,\r\n            })),\r\n      })),\r\n    }));\r\n    setWeeks(w);\r\n\r\n    form.setFieldsValue({\r\n      challengeName,\r\n      description,\r\n      price,\r\n      points,\r\n      currency: currency,\r\n      access: access,\r\n      duration,\r\n      goals: challengeGoals,\r\n    });\r\n  };\r\n  async function fethData() {\r\n    const bodyFocus = await getAllBodyFocus(\"\");\r\n    const goals = await getAllChallengeGoals(\"\");\r\n    const tags = await getAllChallengeTags(\"\");\r\n    const equipments = await getAllChallengeEquipments(\"\");\r\n    const trainers = await getAllTrainers(\"\");\r\n    const products = await getAllChallengeProducts(\"\");\r\n    const challenges = await getAllUserChallenges(\"\");\r\n\r\n    setAllBodyfocus(bodyFocus.body);\r\n    setAllEquipments(equipments.equipments);\r\n    setAllGoals(goals.challengeGoals);\r\n    setAllTags(tags.tags);\r\n    // console.log(\"trainers\", trainers);\r\n    setAllTrainers(trainers.trainers);\r\n    setAllProducts(products.products);\r\n    setAllChallenges(challenges.challenges);\r\n  }\r\n\r\n  // const updateWorkouts = (weeks) => {\r\n  //   weeks.map((week) => {\r\n  //     week.workout.map(async (workout) => {\r\n  //       await updateWorkout(workout, workout._id);\r\n  //     });\r\n  //   });\r\n  // };\r\n  const parseWeeksForBackend = (weeks) => {\r\n    const w = weeks.map((week) => {\r\n      let g = {\r\n        ...week,\r\n        weekName: week.weekTitle,\r\n        weekSubtitle: week.weekSubtitle,\r\n        workouts: week.workouts\r\n          .map((wo) => wo._id)\r\n          .filter(function (el) {\r\n            return el !== undefined && el !== null;\r\n          }),\r\n      };\r\n      workoutIdsThatNeedToBeUpdated\r\n        .map((woId) => {\r\n          if (g._id === woId.weelId || g.weekId === woId.weelId) {\r\n            g.workouts = [...g.workouts, woId.workout];\r\n          }\r\n        })\r\n        .filter(function (el) {\r\n          return el !== undefined && el !== null;\r\n        });\r\n      console.log(g);\r\n      return g;\r\n    });\r\n\r\n    console.log(w);\r\n    return w;\r\n  };\r\n  const updateChallengeButton = async () => {\r\n    const obj = {\r\n      challengeName: name,\r\n      description: description,\r\n      price: price,\r\n      points: points,\r\n      currency: currency,\r\n      thumbnailLink: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\r\n      videoThumbnailLink:\r\n        typeof videoThumbnail === \"object\" ? videoThumbnail.link : \"\",\r\n      trainers: trainers,\r\n      challengeGoals: goals,\r\n      trainersFitnessInterest: selectedFitnessInterest,\r\n      tags: tags,\r\n      body: bodyFocus,\r\n      access: access,\r\n      duration: duration,\r\n      difficulty: difficulty,\r\n      videoTrailer: typeof videoTrailer === \"object\" ? videoTrailer.link : \"\",\r\n      weeks: parseWeeksForBackend(weeks),\r\n      music: musics.map((m) => ({\r\n        ...m,\r\n        name: m.name,\r\n        url: typeof m.file === \"object\" ? m.file.link : m.file,\r\n      })),\r\n      additionalProducts: additionalProducts,\r\n      results: results,\r\n      informationList: informationList\r\n        ? informationList.map((i) => ({\r\n            ...i,\r\n            info: i.text,\r\n            icon: i.file ? i.file.link : \"\",\r\n          }))\r\n        : [],\r\n      allowComments,\r\n      allowReviews,\r\n      isPublic: makePublic,\r\n      alternativeLanguage: selectedChallenge ? selectedChallenge : null,\r\n    };\r\n    console.log(obj, selectedChallengeForUpdate._id);\r\n    // return;\r\n    const res = await updateChallenge(obj, selectedChallengeForUpdate._id);\r\n    selectedChallenge &&\r\n      (await updateChallenge(\r\n        { alternativeLanguage: selectedChallengeForUpdate._id },\r\n        selectedChallenge\r\n      ));\r\n    console.log(\"response\", res);\r\n    console.log(\"weeks\", workoutIdsThatNeedToBeUpdated);\r\n    // updateWorkouts(obj.weeks);\r\n    // if (res) {\r\n    //   setCreatePostModalVisible(true);\r\n    // }\r\n    console.log(obj);\r\n  };\r\n\r\n  const createAPost = async () => {\r\n    const values = {\r\n      title: name,\r\n      text: description,\r\n      image: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\r\n      type: \"Challenge\",\r\n    };\r\n    await createPost(values);\r\n    setCreatePostModalVisible(false);\r\n    // console.log(values);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* ask user to if they want to post challenge */}\r\n      <Modal\r\n        onCancel={() => setCreatePostModalVisible(false)}\r\n        visible={createPostModalVisible}\r\n        footer={false}\r\n        style={{ textAlign: \"center\" }}\r\n      >\r\n        <h1 className=\"font-heading-white\">\r\n          Create a post about your challenge?\r\n        </h1>\r\n        <Button\r\n          className=\"common-orange-button font-paragraph-white\"\r\n          onClick={() => createAPost()}\r\n          style={{ padding: \"5px 10px\" }}\r\n        >\r\n          Create a Post\r\n        </Button>\r\n      </Modal>\r\n      <h2 className=\"font-heading-black\">\r\n        <ArrowLeftOutlined\r\n          onClick={() => setCurrentSelection(6.1)}\r\n          style={{ fontSize: \"30px\", cursor: \"pointer\", marginRight: \"10px\" }}\r\n        />\r\n        Update Challenge\r\n        <Button\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            backgroundColor: \"var(--color-orange)\",\r\n            border: \"none\",\r\n            marginTop: \"10px\",\r\n            marginRight: \"30px\",\r\n            float: \"right\",\r\n          }}\r\n          onClick={updateChallengeButton}\r\n        >\r\n          Update Challenge\r\n        </Button>\r\n      </h2>\r\n\r\n      <div className=\"newchallenge-creator-container\">\r\n        <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n          <TabPane tab=\"Main\" key=\"1\">\r\n            <NewChallengeMainTab\r\n              allChallenges={allChallenges}\r\n              selectedChallenge={selectedChallenge}\r\n              setSelectedChallenge={setSelectedChallenge}\r\n              form={form}\r\n              selectedFitnessInterest={selectedFitnessInterest}\r\n              setSelectedFitnessInterest={setSelectedFitnessInterest}\r\n              id={selectedChallengeForUpdate._id}\r\n              name={name}\r\n              setName={setName}\r\n              access={access}\r\n              setAccess={setAccess}\r\n              price={price}\r\n              points={points}\r\n              setPrice={setPrice}\r\n              setPoints={setPoints}\r\n              currency={currency}\r\n              setCurrency={setCurrency}\r\n              thumbnail={thumbnail}\r\n              setThumbnail={setThumbnail}\r\n              videoThumbnail={videoThumbnail}\r\n              setVideoThumbnail={setVideoThumbnail}\r\n              videoTrailer={videoTrailer}\r\n              setVideoTrailer={setVideoTrailer}\r\n              trainers={trainers}\r\n              setTrainers={setTrainers}\r\n              allTrainers={allTrainers}\r\n              setAllTrainers={setAllTrainers}\r\n              description={description}\r\n              setDescription={setDescription}\r\n              difficulty={difficulty}\r\n              setDifficulty={setDifficulty}\r\n              goals={goals}\r\n              setGoals={setGoals}\r\n              bodyFocus={bodyFocus}\r\n              setBodyFocus={setBodyFocus}\r\n              equipments={equipments}\r\n              setEquipments={setEquipments}\r\n              duration={duration}\r\n              setDuration={setDuration}\r\n              allGoals={allGoals}\r\n              setAllGoals={setAllGoals}\r\n              newGoalName={newGoalName}\r\n              setNewGoalName={setNewGoalName}\r\n              showGoalModal={showGoalModal}\r\n              setShowGoalModal={setShowGoalModal}\r\n              allBodyfocus={allBodyfocus}\r\n              setAllBodyfocus={setAllBodyfocus}\r\n              newBodyfocusName={newBodyfocusName}\r\n              setNewBodyfocusName={setNewBodyfocusName}\r\n              showBodyfocusModal={showBodyfocusModal}\r\n              setShowBodyfocusModal={setShowBodyfocusModal}\r\n              allEquipments={allEquipments}\r\n              setAllEquipments={setAllEquipments}\r\n              newEquipmentName={newEquipmentName}\r\n              setNewEquipmentName={setNewEquipmentName}\r\n              equipmentModal={equipmentModal}\r\n              setEquipmentModal={setEquipmentModal}\r\n              newDurationName={newDurationName}\r\n              setNewDurationName={setNewDurationName}\r\n              showDurationModal={showDurationModal}\r\n              setShowDurationModal={setShowDurationModal}\r\n              tags={tags}\r\n              setTags={setTags}\r\n              allTags={allTags}\r\n              setAllTags={setAllTags}\r\n              newTagName={newTagName}\r\n              setNewTagName={setNewTagName}\r\n              showTagModal={showTagModal}\r\n              setShowTagModal={setShowTagModal}\r\n              update={true}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Workouts\" key=\"2\">\r\n            <NewChallengeWorkoutTab\r\n              weeksToBeUpdated={weeksToBeUpdated}\r\n              update={true}\r\n              weeks={weeks}\r\n              setWeeks={setWeeks}\r\n              addWorkoutModalVisible={addWorkoutModalVisible}\r\n              setAddWorkoutModalVisible={setAddWorkoutModalVisible}\r\n              workoutModalFullscreen={workoutModalFullscreen}\r\n              setWorkoutModalFullscreen={setWorkoutModalFullscreen}\r\n              allProducts={allProducts}\r\n              setAllProducts={setAllProducts}\r\n              setProducts={setProducts}\r\n              allEquipments={allEquipments}\r\n              setAllEquipments={setAllEquipments}\r\n              workoutToUpdate={workoutToUpdate}\r\n              setWorkoutToUpdate={setWorkoutToUpdate}\r\n              currentStep={currentStep}\r\n              setCurrentStep={setCurrentStep}\r\n              currentWeek={currentWeek}\r\n              setCurrentWeek={setCurrentWeek}\r\n              workoutTitle={workoutTitle}\r\n              setWorkoutTile={setWorkoutTile}\r\n              workoutSubtitle={workoutSubtitle}\r\n              setWorkoutSubtile={setWorkoutSubtile}\r\n              groupName={groupName}\r\n              setGroupName={setGroupName}\r\n              infoTitle={infoTitle}\r\n              setInfoTile={setInfoTile}\r\n              infoFile={infoFile}\r\n              setInfoFile={setInfoFile}\r\n              workoutIntroVideoFile={workoutIntroVideoFile}\r\n              setWorkoutIntroVideoFile={setWorkoutIntroVideoFile}\r\n              workoutIntroVideoLength={workoutIntroVideoLength}\r\n              setWorkoutIntroVideoLength={setWorkoutIntroVideoLength}\r\n              relatedProducts={relatedProducts}\r\n              setRelatedProducts={setRelatedProducts}\r\n              relatedEquipments={relatedEquipments}\r\n              setRelatedEquipments={setRelatedEquipments}\r\n              renderWorkout={renderWorkout}\r\n              setRenderWorkout={setRenderWorkout}\r\n              renderedWorkoutExercises={renderedWorkoutExercises}\r\n              setRenderWorkoutExercises={setRenderWorkoutExercises}\r\n              nonRenderedWorkoutExercises={nonRenderedWorkoutExercises}\r\n              setNonRenderedWorkoutExercises={setNonRenderedWorkoutExercises}\r\n              setWorkoutIdsThatNeedToBeUpdated={\r\n                setWorkoutIdsThatNeedToBeUpdated\r\n              }\r\n              workoutIdsThatNeedToBeUpdated={workoutIdsThatNeedToBeUpdated}\r\n              // updateWorkouts={updateWorkouts}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Music\" key=\"3\">\r\n            <NewChallengeMusicTab\r\n              musics={musics}\r\n              setMusics={setMusics}\r\n              update={true}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Additional\" key=\"4\">\r\n            <NewChallengeAdditionalTab\r\n              results={results}\r\n              setResults={setResults}\r\n              allProducts={allProducts}\r\n              setAllProducts={setAllProducts}\r\n              makePublic={makePublic}\r\n              setMakePublic={setMakePublic}\r\n              allowComments={allowComments}\r\n              setAllowComments={setAllowComments}\r\n              allowReviews={allowReviews}\r\n              setAllowReviews={setAllowReviews}\r\n              additionalProducts={additionalProducts}\r\n              setAdditionalProducts={setAdditionalProducts}\r\n              informationList={informationList}\r\n              setInformationList={setInformationList}\r\n              // createChallenge={createChallengeButton}\r\n              update={true}\r\n              updateChallenge={updateChallengeButton}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateChallenge;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\TrainerProfile.js",["662","663"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\customer.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserDashboard.js",["664","665","666"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AdminDashboard.js",["667","668"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\RemoteMediaManager.js",["669","670","671","672","673"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\MediaManager.js",["674","675","676","677","678","679"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeMainTab.js",["680","681","682","683","684"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AllChallenges.js",["685","686","687","688","689"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\PackageSelector.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\UpdateBlog.js",["690"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\Player.js",["691","692","693","694"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ReplaceFreeChallengePopup.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Signup.js",["695","696","697","698"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\payment.js",["699","700","701"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteNextModal.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\translationHelpers.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\useWindowDimensions.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MembershipManager\\AllMemberships.js",["702"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWorkoutPanel.js",[],{"ruleId":"703","replacedBy":"704"},{"ruleId":"705","replacedBy":"706"},{"ruleId":"707","severity":1,"message":"708","line":20,"column":3,"nodeType":"709","endLine":20,"endColumn":12,"suggestions":"710"},{"ruleId":"703","replacedBy":"711"},{"ruleId":"705","replacedBy":"712"},{"ruleId":"713","severity":1,"message":"714","line":6,"column":3,"nodeType":"709","messageId":"715","endLine":6,"endColumn":10},{"ruleId":"713","severity":1,"message":"716","line":13,"column":10,"nodeType":"709","messageId":"715","endLine":13,"endColumn":22},{"ruleId":"713","severity":1,"message":"717","line":29,"column":3,"nodeType":"709","messageId":"715","endLine":29,"endColumn":16},{"ruleId":"713","severity":1,"message":"718","line":46,"column":20,"nodeType":"709","messageId":"715","endLine":46,"endColumn":31},{"ruleId":"713","severity":1,"message":"719","line":56,"column":10,"nodeType":"709","messageId":"715","endLine":56,"endColumn":17},{"ruleId":"713","severity":1,"message":"720","line":56,"column":19,"nodeType":"709","messageId":"715","endLine":56,"endColumn":29},{"ruleId":"713","severity":1,"message":"721","line":57,"column":10,"nodeType":"709","messageId":"715","endLine":57,"endColumn":25},{"ruleId":"713","severity":1,"message":"722","line":57,"column":27,"nodeType":"709","messageId":"715","endLine":57,"endColumn":45},{"ruleId":"707","severity":1,"message":"723","line":134,"column":6,"nodeType":"724","endLine":134,"endColumn":16,"suggestions":"725"},{"ruleId":"713","severity":1,"message":"726","line":52,"column":10,"nodeType":"709","messageId":"715","endLine":52,"endColumn":34},{"ruleId":"703","replacedBy":"727"},{"ruleId":"705","replacedBy":"728"},{"ruleId":"713","severity":1,"message":"729","line":4,"column":10,"nodeType":"709","messageId":"715","endLine":4,"endColumn":20},{"ruleId":"707","severity":1,"message":"730","line":23,"column":6,"nodeType":"724","endLine":23,"endColumn":8,"suggestions":"731"},{"ruleId":"703","replacedBy":"732"},{"ruleId":"705","replacedBy":"733"},{"ruleId":"713","severity":1,"message":"734","line":2,"column":25,"nodeType":"709","messageId":"715","endLine":2,"endColumn":37},{"ruleId":"735","severity":1,"message":"736","line":44,"column":13,"nodeType":"709","messageId":"737","endLine":44,"endColumn":14},{"ruleId":"713","severity":1,"message":"738","line":3,"column":10,"nodeType":"709","messageId":"715","endLine":3,"endColumn":16},{"ruleId":"703","replacedBy":"739"},{"ruleId":"705","replacedBy":"740"},{"ruleId":"707","severity":1,"message":"741","line":31,"column":6,"nodeType":"724","endLine":31,"endColumn":16,"suggestions":"742"},{"ruleId":"713","severity":1,"message":"743","line":57,"column":10,"nodeType":"709","messageId":"715","endLine":57,"endColumn":22},{"ruleId":"707","severity":1,"message":"744","line":107,"column":6,"nodeType":"724","endLine":107,"endColumn":8,"suggestions":"745"},{"ruleId":"713","severity":1,"message":"746","line":6,"column":10,"nodeType":"709","messageId":"715","endLine":6,"endColumn":23},{"ruleId":"713","severity":1,"message":"747","line":80,"column":36,"nodeType":"709","messageId":"715","endLine":80,"endColumn":63},{"ruleId":"713","severity":1,"message":"748","line":404,"column":29,"nodeType":"709","messageId":"715","endLine":404,"endColumn":30},{"ruleId":"703","replacedBy":"749"},{"ruleId":"705","replacedBy":"750"},{"ruleId":"713","severity":1,"message":"751","line":3,"column":10,"nodeType":"709","messageId":"715","endLine":3,"endColumn":29},{"ruleId":"713","severity":1,"message":"729","line":4,"column":10,"nodeType":"709","messageId":"715","endLine":4,"endColumn":20},{"ruleId":"707","severity":1,"message":"752","line":42,"column":6,"nodeType":"724","endLine":42,"endColumn":16,"suggestions":"753"},{"ruleId":"703","replacedBy":"754"},{"ruleId":"705","replacedBy":"755"},{"ruleId":"703","replacedBy":"756"},{"ruleId":"705","replacedBy":"757"},{"ruleId":"713","severity":1,"message":"758","line":2,"column":39,"nodeType":"709","messageId":"715","endLine":2,"endColumn":47},{"ruleId":"713","severity":1,"message":"759","line":2,"column":49,"nodeType":"709","messageId":"715","endLine":2,"endColumn":53},{"ruleId":"713","severity":1,"message":"760","line":21,"column":10,"nodeType":"709","messageId":"715","endLine":21,"endColumn":18},{"ruleId":"707","severity":1,"message":"761","line":54,"column":6,"nodeType":"724","endLine":54,"endColumn":29,"suggestions":"762"},{"ruleId":"703","replacedBy":"763"},{"ruleId":"705","replacedBy":"764"},{"ruleId":"713","severity":1,"message":"719","line":13,"column":10,"nodeType":"709","messageId":"715","endLine":13,"endColumn":17},{"ruleId":"707","severity":1,"message":"765","line":35,"column":6,"nodeType":"724","endLine":35,"endColumn":22,"suggestions":"766"},{"ruleId":"713","severity":1,"message":"738","line":6,"column":10,"nodeType":"709","messageId":"715","endLine":6,"endColumn":16},{"ruleId":"707","severity":1,"message":"767","line":38,"column":6,"nodeType":"724","endLine":38,"endColumn":8,"suggestions":"768"},{"ruleId":"703","replacedBy":"769"},{"ruleId":"705","replacedBy":"770"},{"ruleId":"713","severity":1,"message":"771","line":7,"column":8,"nodeType":"709","messageId":"715","endLine":7,"endColumn":21},{"ruleId":"703","replacedBy":"772"},{"ruleId":"705","replacedBy":"773"},{"ruleId":"707","severity":1,"message":"752","line":34,"column":6,"nodeType":"724","endLine":34,"endColumn":16,"suggestions":"774"},{"ruleId":"713","severity":1,"message":"775","line":25,"column":10,"nodeType":"709","messageId":"715","endLine":25,"endColumn":18},{"ruleId":"713","severity":1,"message":"776","line":25,"column":20,"nodeType":"709","messageId":"715","endLine":25,"endColumn":31},{"ruleId":"713","severity":1,"message":"777","line":26,"column":10,"nodeType":"709","messageId":"715","endLine":26,"endColumn":18},{"ruleId":"713","severity":1,"message":"778","line":26,"column":20,"nodeType":"709","messageId":"715","endLine":26,"endColumn":31},{"ruleId":"707","severity":1,"message":"779","line":33,"column":6,"nodeType":"724","endLine":33,"endColumn":8,"suggestions":"780"},{"ruleId":"781","severity":1,"message":"782","line":84,"column":5,"nodeType":"783","messageId":"784","endLine":115,"endColumn":6},{"ruleId":"703","replacedBy":"785"},{"ruleId":"705","replacedBy":"786"},{"ruleId":"713","severity":1,"message":"787","line":9,"column":3,"nodeType":"709","messageId":"715","endLine":9,"endColumn":14},{"ruleId":"713","severity":1,"message":"788","line":20,"column":8,"nodeType":"709","messageId":"715","endLine":20,"endColumn":23},{"ruleId":"713","severity":1,"message":"718","line":28,"column":20,"nodeType":"709","messageId":"715","endLine":28,"endColumn":31},{"ruleId":"707","severity":1,"message":"789","line":62,"column":6,"nodeType":"724","endLine":62,"endColumn":16,"suggestions":"790"},{"ruleId":"713","severity":1,"message":"718","line":24,"column":20,"nodeType":"709","messageId":"715","endLine":24,"endColumn":31},{"ruleId":"713","severity":1,"message":"791","line":2,"column":43,"nodeType":"709","messageId":"715","endLine":2,"endColumn":49},{"ruleId":"713","severity":1,"message":"714","line":2,"column":57,"nodeType":"709","messageId":"715","endLine":2,"endColumn":64},{"ruleId":"713","severity":1,"message":"716","line":4,"column":26,"nodeType":"709","messageId":"715","endLine":4,"endColumn":38},{"ruleId":"713","severity":1,"message":"719","line":38,"column":10,"nodeType":"709","messageId":"715","endLine":38,"endColumn":17},{"ruleId":"713","severity":1,"message":"720","line":38,"column":19,"nodeType":"709","messageId":"715","endLine":38,"endColumn":29},{"ruleId":"713","severity":1,"message":"718","line":18,"column":20,"nodeType":"709","messageId":"715","endLine":18,"endColumn":31},{"ruleId":"707","severity":1,"message":"792","line":44,"column":6,"nodeType":"724","endLine":44,"endColumn":12,"suggestions":"793"},{"ruleId":"703","replacedBy":"794"},{"ruleId":"705","replacedBy":"795"},{"ruleId":"713","severity":1,"message":"796","line":13,"column":10,"nodeType":"709","messageId":"715","endLine":13,"endColumn":14},{"ruleId":"713","severity":1,"message":"797","line":22,"column":11,"nodeType":"709","messageId":"715","endLine":22,"endColumn":14},{"ruleId":"713","severity":1,"message":"726","line":56,"column":10,"nodeType":"709","messageId":"715","endLine":56,"endColumn":34},{"ruleId":"713","severity":1,"message":"798","line":59,"column":11,"nodeType":"709","messageId":"715","endLine":59,"endColumn":17},{"ruleId":"707","severity":1,"message":"799","line":69,"column":6,"nodeType":"724","endLine":69,"endColumn":8,"suggestions":"800"},{"ruleId":"801","severity":1,"message":"802","line":401,"column":17,"nodeType":"803","endLine":401,"endColumn":32},{"ruleId":"713","severity":1,"message":"804","line":9,"column":3,"nodeType":"709","messageId":"715","endLine":9,"endColumn":15},{"ruleId":"713","severity":1,"message":"726","line":38,"column":10,"nodeType":"709","messageId":"715","endLine":38,"endColumn":34},{"ruleId":"707","severity":1,"message":"805","line":75,"column":6,"nodeType":"724","endLine":75,"endColumn":15,"suggestions":"806"},{"ruleId":"707","severity":1,"message":"807","line":104,"column":6,"nodeType":"724","endLine":104,"endColumn":23,"suggestions":"808"},{"ruleId":"713","severity":1,"message":"798","line":53,"column":11,"nodeType":"709","messageId":"715","endLine":53,"endColumn":17},{"ruleId":"707","severity":1,"message":"809","line":100,"column":6,"nodeType":"724","endLine":100,"endColumn":19,"suggestions":"810"},{"ruleId":"713","severity":1,"message":"811","line":7,"column":8,"nodeType":"709","messageId":"715","endLine":7,"endColumn":9},{"ruleId":"713","severity":1,"message":"812","line":1,"column":17,"nodeType":"709","messageId":"715","endLine":1,"endColumn":29},{"ruleId":"713","severity":1,"message":"813","line":3,"column":25,"nodeType":"709","messageId":"715","endLine":3,"endColumn":45},{"ruleId":"703","replacedBy":"814"},{"ruleId":"705","replacedBy":"815"},{"ruleId":"703","replacedBy":"816"},{"ruleId":"705","replacedBy":"817"},{"ruleId":"713","severity":1,"message":"719","line":13,"column":10,"nodeType":"709","messageId":"715","endLine":13,"endColumn":17},{"ruleId":"713","severity":1,"message":"818","line":2,"column":16,"nodeType":"709","messageId":"715","endLine":2,"endColumn":21},{"ruleId":"713","severity":1,"message":"738","line":2,"column":23,"nodeType":"709","messageId":"715","endLine":2,"endColumn":29},{"ruleId":"713","severity":1,"message":"819","line":87,"column":10,"nodeType":"709","messageId":"715","endLine":87,"endColumn":18},{"ruleId":"713","severity":1,"message":"718","line":138,"column":20,"nodeType":"709","messageId":"715","endLine":138,"endColumn":31},{"ruleId":"707","severity":1,"message":"820","line":167,"column":6,"nodeType":"724","endLine":167,"endColumn":16,"suggestions":"821"},{"ruleId":"713","severity":1,"message":"822","line":18,"column":22,"nodeType":"709","messageId":"715","endLine":18,"endColumn":35},{"ruleId":"707","severity":1,"message":"823","line":60,"column":6,"nodeType":"724","endLine":60,"endColumn":8,"suggestions":"824"},{"ruleId":"713","severity":1,"message":"718","line":30,"column":20,"nodeType":"709","messageId":"715","endLine":30,"endColumn":31},{"ruleId":"707","severity":1,"message":"825","line":43,"column":6,"nodeType":"724","endLine":43,"endColumn":8,"suggestions":"826"},{"ruleId":"707","severity":1,"message":"741","line":47,"column":6,"nodeType":"724","endLine":47,"endColumn":16,"suggestions":"827"},{"ruleId":"713","severity":1,"message":"717","line":4,"column":3,"nodeType":"709","messageId":"715","endLine":4,"endColumn":16},{"ruleId":"703","replacedBy":"828"},{"ruleId":"705","replacedBy":"829"},{"ruleId":"713","severity":1,"message":"830","line":7,"column":8,"nodeType":"709","messageId":"715","endLine":7,"endColumn":14},{"ruleId":"713","severity":1,"message":"831","line":9,"column":3,"nodeType":"709","messageId":"715","endLine":9,"endColumn":15},{"ruleId":"713","severity":1,"message":"832","line":12,"column":3,"nodeType":"709","messageId":"715","endLine":12,"endColumn":15},{"ruleId":"713","severity":1,"message":"818","line":18,"column":25,"nodeType":"709","messageId":"715","endLine":18,"endColumn":30},{"ruleId":"713","severity":1,"message":"833","line":27,"column":8,"nodeType":"709","messageId":"715","endLine":27,"endColumn":28},{"ruleId":"713","severity":1,"message":"834","line":41,"column":20,"nodeType":"709","messageId":"715","endLine":41,"endColumn":31},{"ruleId":"707","severity":1,"message":"752","line":50,"column":6,"nodeType":"724","endLine":50,"endColumn":16,"suggestions":"835"},{"ruleId":"713","severity":1,"message":"716","line":12,"column":10,"nodeType":"709","messageId":"715","endLine":12,"endColumn":22},{"ruleId":"713","severity":1,"message":"719","line":46,"column":10,"nodeType":"709","messageId":"715","endLine":46,"endColumn":17},{"ruleId":"713","severity":1,"message":"720","line":46,"column":19,"nodeType":"709","messageId":"715","endLine":46,"endColumn":29},{"ruleId":"713","severity":1,"message":"721","line":47,"column":10,"nodeType":"709","messageId":"715","endLine":47,"endColumn":25},{"ruleId":"713","severity":1,"message":"722","line":47,"column":27,"nodeType":"709","messageId":"715","endLine":47,"endColumn":45},{"ruleId":"707","severity":1,"message":"836","line":177,"column":6,"nodeType":"724","endLine":177,"endColumn":8,"suggestions":"837"},{"ruleId":"713","severity":1,"message":"838","line":1,"column":17,"nodeType":"709","messageId":"715","endLine":1,"endColumn":25},{"ruleId":"707","severity":1,"message":"839","line":26,"column":13,"nodeType":"840","endLine":28,"endColumn":4},{"ruleId":"713","severity":1,"message":"818","line":2,"column":10,"nodeType":"709","messageId":"715","endLine":2,"endColumn":15},{"ruleId":"713","severity":1,"message":"841","line":11,"column":8,"nodeType":"709","messageId":"715","endLine":11,"endColumn":19},{"ruleId":"713","severity":1,"message":"842","line":17,"column":23,"nodeType":"709","messageId":"715","endLine":17,"endColumn":37},{"ruleId":"713","severity":1,"message":"843","line":18,"column":24,"nodeType":"709","messageId":"715","endLine":18,"endColumn":39},{"ruleId":"713","severity":1,"message":"798","line":19,"column":11,"nodeType":"709","messageId":"715","endLine":19,"endColumn":17},{"ruleId":"713","severity":1,"message":"844","line":19,"column":19,"nodeType":"709","messageId":"715","endLine":19,"endColumn":24},{"ruleId":"713","severity":1,"message":"845","line":26,"column":10,"nodeType":"709","messageId":"715","endLine":26,"endColumn":17},{"ruleId":"713","severity":1,"message":"846","line":26,"column":19,"nodeType":"709","messageId":"715","endLine":26,"endColumn":29},{"ruleId":"703","replacedBy":"847"},{"ruleId":"705","replacedBy":"848"},{"ruleId":"707","severity":1,"message":"752","line":31,"column":6,"nodeType":"724","endLine":31,"endColumn":16,"suggestions":"849"},{"ruleId":"713","severity":1,"message":"850","line":5,"column":9,"nodeType":"709","messageId":"715","endLine":5,"endColumn":15},{"ruleId":"713","severity":1,"message":"791","line":2,"column":31,"nodeType":"709","messageId":"715","endLine":2,"endColumn":37},{"ruleId":"713","severity":1,"message":"759","line":2,"column":60,"nodeType":"709","messageId":"715","endLine":2,"endColumn":64},{"ruleId":"713","severity":1,"message":"850","line":3,"column":9,"nodeType":"709","messageId":"715","endLine":3,"endColumn":15},{"ruleId":"713","severity":1,"message":"751","line":19,"column":3,"nodeType":"709","messageId":"715","endLine":19,"endColumn":22},{"ruleId":"713","severity":1,"message":"851","line":31,"column":3,"nodeType":"709","messageId":"715","endLine":31,"endColumn":17},{"ruleId":"713","severity":1,"message":"852","line":38,"column":38,"nodeType":"709","messageId":"715","endLine":38,"endColumn":47},{"ruleId":"707","severity":1,"message":"853","line":134,"column":6,"nodeType":"724","endLine":134,"endColumn":16,"suggestions":"854"},{"ruleId":"713","severity":1,"message":"855","line":173,"column":9,"nodeType":"709","messageId":"715","endLine":173,"endColumn":18},{"ruleId":"713","severity":1,"message":"856","line":414,"column":10,"nodeType":"709","messageId":"715","endLine":414,"endColumn":18},{"ruleId":"713","severity":1,"message":"857","line":414,"column":20,"nodeType":"709","messageId":"715","endLine":414,"endColumn":31},{"ruleId":"713","severity":1,"message":"718","line":416,"column":20,"nodeType":"709","messageId":"715","endLine":416,"endColumn":31},{"ruleId":"707","severity":1,"message":"858","line":551,"column":6,"nodeType":"724","endLine":551,"endColumn":8,"suggestions":"859"},{"ruleId":"860","severity":1,"message":"861","line":99,"column":17,"nodeType":"862","endLine":99,"endColumn":36},{"ruleId":"713","severity":1,"message":"818","line":5,"column":18,"nodeType":"709","messageId":"715","endLine":5,"endColumn":23},{"ruleId":"707","severity":1,"message":"752","line":40,"column":6,"nodeType":"724","endLine":40,"endColumn":28,"suggestions":"863"},{"ruleId":"864","severity":1,"message":"865","line":71,"column":9,"nodeType":"862","endLine":71,"endColumn":70},{"ruleId":"864","severity":1,"message":"865","line":78,"column":9,"nodeType":"862","endLine":78,"endColumn":69},{"ruleId":"713","severity":1,"message":"866","line":4,"column":3,"nodeType":"709","messageId":"715","endLine":4,"endColumn":18},{"ruleId":"713","severity":1,"message":"867","line":5,"column":3,"nodeType":"709","messageId":"715","endLine":5,"endColumn":15},{"ruleId":"713","severity":1,"message":"868","line":7,"column":3,"nodeType":"709","messageId":"715","endLine":7,"endColumn":22},{"ruleId":"713","severity":1,"message":"869","line":8,"column":3,"nodeType":"709","messageId":"715","endLine":8,"endColumn":13},{"ruleId":"713","severity":1,"message":"818","line":12,"column":18,"nodeType":"709","messageId":"715","endLine":12,"endColumn":23},{"ruleId":"707","severity":1,"message":"752","line":48,"column":6,"nodeType":"724","endLine":48,"endColumn":28,"suggestions":"870"},{"ruleId":"864","severity":1,"message":"865","line":79,"column":9,"nodeType":"862","endLine":79,"endColumn":70},{"ruleId":"864","severity":1,"message":"865","line":86,"column":9,"nodeType":"862","endLine":86,"endColumn":69},{"ruleId":"713","severity":1,"message":"871","line":4,"column":3,"nodeType":"709","messageId":"715","endLine":4,"endColumn":18},{"ruleId":"713","severity":1,"message":"872","line":6,"column":3,"nodeType":"709","messageId":"715","endLine":6,"endColumn":17},{"ruleId":"713","severity":1,"message":"873","line":9,"column":3,"nodeType":"709","messageId":"715","endLine":9,"endColumn":15},{"ruleId":"713","severity":1,"message":"874","line":10,"column":3,"nodeType":"709","messageId":"715","endLine":10,"endColumn":24},{"ruleId":"713","severity":1,"message":"875","line":42,"column":10,"nodeType":"709","messageId":"715","endLine":42,"endColumn":20},{"ruleId":"713","severity":1,"message":"876","line":49,"column":10,"nodeType":"709","messageId":"715","endLine":49,"endColumn":15},{"ruleId":"713","severity":1,"message":"877","line":49,"column":17,"nodeType":"709","messageId":"715","endLine":49,"endColumn":25},{"ruleId":"713","severity":1,"message":"719","line":51,"column":10,"nodeType":"709","messageId":"715","endLine":51,"endColumn":17},{"ruleId":"713","severity":1,"message":"878","line":54,"column":10,"nodeType":"709","messageId":"715","endLine":54,"endColumn":27},{"ruleId":"713","severity":1,"message":"879","line":56,"column":31,"nodeType":"709","messageId":"715","endLine":56,"endColumn":53},{"ruleId":"707","severity":1,"message":"752","line":81,"column":6,"nodeType":"724","endLine":81,"endColumn":8,"suggestions":"880"},{"ruleId":"713","severity":1,"message":"751","line":3,"column":10,"nodeType":"709","messageId":"715","endLine":3,"endColumn":29},{"ruleId":"713","severity":1,"message":"729","line":4,"column":10,"nodeType":"709","messageId":"715","endLine":4,"endColumn":20},{"ruleId":"707","severity":1,"message":"881","line":50,"column":6,"nodeType":"724","endLine":50,"endColumn":8,"suggestions":"882"},{"ruleId":"713","severity":1,"message":"883","line":3,"column":10,"nodeType":"709","messageId":"715","endLine":3,"endColumn":28},{"ruleId":"713","severity":1,"message":"871","line":4,"column":3,"nodeType":"709","messageId":"715","endLine":4,"endColumn":18},{"ruleId":"713","severity":1,"message":"872","line":6,"column":3,"nodeType":"709","messageId":"715","endLine":6,"endColumn":17},{"ruleId":"713","severity":1,"message":"873","line":8,"column":10,"nodeType":"709","messageId":"715","endLine":8,"endColumn":22},{"ruleId":"713","severity":1,"message":"778","line":35,"column":20,"nodeType":"709","messageId":"715","endLine":35,"endColumn":31},{"ruleId":"713","severity":1,"message":"875","line":38,"column":10,"nodeType":"709","messageId":"715","endLine":38,"endColumn":20},{"ruleId":"713","severity":1,"message":"719","line":47,"column":10,"nodeType":"709","messageId":"715","endLine":47,"endColumn":17},{"ruleId":"707","severity":1,"message":"884","line":91,"column":6,"nodeType":"724","endLine":91,"endColumn":8,"suggestions":"885"},{"ruleId":"713","severity":1,"message":"886","line":2,"column":39,"nodeType":"709","messageId":"715","endLine":2,"endColumn":45},{"ruleId":"713","severity":1,"message":"887","line":9,"column":8,"nodeType":"709","messageId":"715","endLine":9,"endColumn":23},{"ruleId":"713","severity":1,"message":"888","line":25,"column":10,"nodeType":"709","messageId":"715","endLine":25,"endColumn":19},{"ruleId":"713","severity":1,"message":"889","line":36,"column":10,"nodeType":"709","messageId":"715","endLine":36,"endColumn":13},{"ruleId":"713","severity":1,"message":"718","line":54,"column":20,"nodeType":"709","messageId":"715","endLine":54,"endColumn":31},{"ruleId":"713","severity":1,"message":"890","line":56,"column":10,"nodeType":"709","messageId":"715","endLine":56,"endColumn":27},{"ruleId":"707","severity":1,"message":"752","line":120,"column":6,"nodeType":"724","endLine":120,"endColumn":26,"suggestions":"891"},{"ruleId":"713","severity":1,"message":"892","line":1,"column":27,"nodeType":"709","messageId":"715","endLine":1,"endColumn":36},{"ruleId":"713","severity":1,"message":"893","line":6,"column":3,"nodeType":"709","messageId":"715","endLine":6,"endColumn":21},{"ruleId":"713","severity":1,"message":"746","line":7,"column":3,"nodeType":"709","messageId":"715","endLine":7,"endColumn":16},{"ruleId":"713","severity":1,"message":"798","line":37,"column":11,"nodeType":"709","messageId":"715","endLine":37,"endColumn":17},{"ruleId":"713","severity":1,"message":"844","line":37,"column":19,"nodeType":"709","messageId":"715","endLine":37,"endColumn":24},{"ruleId":"713","severity":1,"message":"894","line":49,"column":9,"nodeType":"709","messageId":"715","endLine":49,"endColumn":22},{"ruleId":"713","severity":1,"message":"895","line":19,"column":3,"nodeType":"709","messageId":"715","endLine":19,"endColumn":18},{"ruleId":"713","severity":1,"message":"896","line":20,"column":3,"nodeType":"709","messageId":"715","endLine":20,"endColumn":19},{"ruleId":"713","severity":1,"message":"819","line":87,"column":10,"nodeType":"709","messageId":"715","endLine":87,"endColumn":18},{"ruleId":"713","severity":1,"message":"897","line":140,"column":10,"nodeType":"709","messageId":"715","endLine":140,"endColumn":18},{"ruleId":"713","severity":1,"message":"718","line":140,"column":20,"nodeType":"709","messageId":"715","endLine":140,"endColumn":31},{"ruleId":"707","severity":1,"message":"898","line":149,"column":6,"nodeType":"724","endLine":149,"endColumn":8,"suggestions":"899"},{"ruleId":"900","severity":1,"message":"901","line":327,"column":21,"nodeType":"840","messageId":"902","endLine":327,"endColumn":23},{"ruleId":"707","severity":1,"message":"752","line":57,"column":6,"nodeType":"724","endLine":57,"endColumn":8,"suggestions":"903"},{"ruleId":"860","severity":1,"message":"861","line":181,"column":17,"nodeType":"862","endLine":184,"endColumn":19},{"ruleId":"713","severity":1,"message":"718","line":35,"column":20,"nodeType":"709","messageId":"715","endLine":35,"endColumn":31},{"ruleId":"713","severity":1,"message":"798","line":40,"column":11,"nodeType":"709","messageId":"715","endLine":40,"endColumn":17},{"ruleId":"707","severity":1,"message":"904","line":66,"column":6,"nodeType":"724","endLine":66,"endColumn":15,"suggestions":"905"},{"ruleId":"713","severity":1,"message":"906","line":10,"column":3,"nodeType":"709","messageId":"715","endLine":10,"endColumn":16},{"ruleId":"713","severity":1,"message":"907","line":18,"column":3,"nodeType":"709","messageId":"715","endLine":18,"endColumn":28},{"ruleId":"713","severity":1,"message":"892","line":1,"column":17,"nodeType":"709","messageId":"715","endLine":1,"endColumn":26},{"ruleId":"713","severity":1,"message":"908","line":6,"column":10,"nodeType":"709","messageId":"715","endLine":6,"endColumn":11},{"ruleId":"713","severity":1,"message":"909","line":6,"column":13,"nodeType":"709","messageId":"715","endLine":6,"endColumn":17},{"ruleId":"713","severity":1,"message":"910","line":7,"column":10,"nodeType":"709","messageId":"715","endLine":7,"endColumn":11},{"ruleId":"713","severity":1,"message":"911","line":7,"column":13,"nodeType":"709","messageId":"715","endLine":7,"endColumn":17},{"ruleId":"707","severity":1,"message":"912","line":748,"column":5,"nodeType":"724","endLine":748,"endColumn":63,"suggestions":"913"},{"ruleId":"914","severity":1,"message":"915","line":757,"column":5,"nodeType":"916","messageId":"917","endLine":764,"endColumn":6},{"ruleId":"914","severity":1,"message":"915","line":768,"column":5,"nodeType":"916","messageId":"917","endLine":775,"endColumn":6},{"ruleId":"914","severity":1,"message":"915","line":782,"column":5,"nodeType":"916","messageId":"917","endLine":786,"endColumn":6},{"ruleId":"914","severity":1,"message":"915","line":790,"column":5,"nodeType":"916","messageId":"917","endLine":795,"endColumn":6},{"ruleId":"713","severity":1,"message":"918","line":810,"column":5,"nodeType":"709","messageId":"715","endLine":810,"endColumn":17},{"ruleId":"713","severity":1,"message":"871","line":12,"column":10,"nodeType":"709","messageId":"715","endLine":12,"endColumn":25},{"ruleId":"713","severity":1,"message":"719","line":112,"column":10,"nodeType":"709","messageId":"715","endLine":112,"endColumn":17},{"ruleId":"713","severity":1,"message":"720","line":112,"column":19,"nodeType":"709","messageId":"715","endLine":112,"endColumn":29},{"ruleId":"707","severity":1,"message":"820","line":123,"column":6,"nodeType":"724","endLine":123,"endColumn":16,"suggestions":"919"},{"ruleId":"713","severity":1,"message":"920","line":168,"column":9,"nodeType":"709","messageId":"715","endLine":168,"endColumn":21},{"ruleId":"713","severity":1,"message":"921","line":16,"column":8,"nodeType":"709","messageId":"715","endLine":16,"endColumn":12},{"ruleId":"922","severity":1,"message":"923","line":28,"column":3,"nodeType":"924","messageId":"925","endLine":28,"endColumn":10},{"ruleId":"922","severity":1,"message":"926","line":30,"column":3,"nodeType":"924","messageId":"925","endLine":30,"endColumn":9},{"ruleId":"707","severity":1,"message":"752","line":51,"column":6,"nodeType":"724","endLine":51,"endColumn":16,"suggestions":"927"},{"ruleId":"707","severity":1,"message":"928","line":106,"column":6,"nodeType":"724","endLine":106,"endColumn":78,"suggestions":"929"},{"ruleId":"707","severity":1,"message":"761","line":68,"column":6,"nodeType":"724","endLine":68,"endColumn":16,"suggestions":"930"},{"ruleId":"713","severity":1,"message":"931","line":1,"column":17,"nodeType":"709","messageId":"715","endLine":1,"endColumn":27},{"ruleId":"713","severity":1,"message":"932","line":1,"column":29,"nodeType":"709","messageId":"715","endLine":1,"endColumn":35},{"ruleId":"713","severity":1,"message":"892","line":1,"column":37,"nodeType":"709","messageId":"715","endLine":1,"endColumn":46},{"ruleId":"713","severity":1,"message":"933","line":5,"column":5,"nodeType":"709","messageId":"715","endLine":5,"endColumn":10},{"ruleId":"707","severity":1,"message":"779","line":32,"column":6,"nodeType":"724","endLine":32,"endColumn":8,"suggestions":"934"},{"ruleId":"713","severity":1,"message":"935","line":58,"column":13,"nodeType":"709","messageId":"715","endLine":58,"endColumn":14},{"ruleId":"713","severity":1,"message":"935","line":88,"column":13,"nodeType":"709","messageId":"715","endLine":88,"endColumn":14},{"ruleId":"713","severity":1,"message":"935","line":120,"column":13,"nodeType":"709","messageId":"715","endLine":120,"endColumn":14},{"ruleId":"713","severity":1,"message":"936","line":3,"column":10,"nodeType":"709","messageId":"715","endLine":3,"endColumn":28},{"ruleId":"713","severity":1,"message":"738","line":4,"column":17,"nodeType":"709","messageId":"715","endLine":4,"endColumn":23},{"ruleId":"713","severity":1,"message":"937","line":4,"column":25,"nodeType":"709","messageId":"715","endLine":4,"endColumn":30},{"ruleId":"713","severity":1,"message":"938","line":2,"column":18,"nodeType":"709","messageId":"715","endLine":2,"endColumn":21},"no-native-reassign",["939"],"no-negated-in-lhs",["940"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setShowModal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["941"],["939"],["940"],"no-unused-vars","'message' is defined but never used.","unusedVar","'PlusOutlined' is defined but never used.","'getAllRecipes' is defined but never used.","'setUserInfo' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'thumbnailBase64' is assigned a value but never used.","'setThumbnailBase64' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAllRecipes' and 'fetchData'. Either include them or remove the dependency array.","ArrayExpression",["942"],"'exerciseWorkoutTimeTrack' is assigned a value but never used.",["939"],["940"],"'createPost' is defined but never used.","React Hook useEffect has missing dependencies: 'form', 'postInfo.image', 'postInfo.text', 'postInfo.title', and 'postInfo.type'. Either include them or remove the dependency array. If 'setType' needs the current value of 'postInfo.type', you can also switch to useReducer instead of useState and read 'postInfo.type' in the reducer.",["943"],["939"],["940"],"'UserOutlined' is defined but never used.","no-redeclare","'n' is already defined.","redeclared","'Button' is defined but never used.",["939"],["940"],"React Hook useEffect has a missing dependency: 'fetchBlogs'. Either include it or remove the dependency array.",["944"],"'fetchLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fechUserInfo'. Either include it or remove the dependency array.",["945"],"'PauseOutlined' is defined but never used.","'setExerciseWorkoutTimeTrack' is assigned a value but never used.","'s' is assigned a value but never used.",["939"],["940"],"'CloseSquareOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["946"],["939"],["940"],["939"],["940"],"'Checkbox' is defined but never used.","'List' is defined but never used.","'category' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["947"],["939"],["940"],"React Hook useEffect has missing dependencies: 'challengesApplicableOn' and 'form'. Either include them or remove the dependency array. You can also do a functional update 'setChallengesApplicableOn(c => ...)' if you only need 'challengesApplicableOn' in the 'setChallengesApplicableOn' call.",["948"],"React Hook useEffect has a missing dependency: 'getNextChallenges'. Either include it or remove the dependency array.",["949"],["939"],["940"],"'LanguageStore' is defined but never used.",["939"],["940"],["950"],"'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["951"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode",["939"],["940"],"'getAllBlogs' is defined but never used.","'ReactHTMLParser' is defined but never used.","React Hook useEffect has missing dependencies: 'fethData' and 'getAllBlogsFromBackend'. Either include them or remove the dependency array.",["952"],"'Upload' is defined but never used.","React Hook useEffect has a missing dependency: 'userInfo.id'. Either include it or remove the dependency array.",["953"],["939"],["940"],"'form' is assigned a value but never used.","'res' is assigned a value but never used.","'height' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchData', 'props.history', 'setUserInfo', and 'userInfo'. Either include them or remove the dependency array.",["954"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'breakContext' is defined but never used.","React Hook useEffect has a missing dependency: 'setExerciseWorkoutTimeTrack'. Either include it or remove the dependency array.",["955"],"React Hook useEffect has missing dependencies: 'currentExercise.index', 'moveToNextExercise', 'playerState', 'setPlayerState', and 'workout.exercises'. Either include them or remove the dependency array. If 'moveToNextExercise' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["956"],"React Hook useEffect has missing dependencies: 'gender', 'months', and 'recommandedChal'. Either include them or remove the dependency array. If 'setMybody' needs the current value of 'gender', you can also switch to useReducer instead of useState and read 'gender' in the reducer.",["957"],"'_' is defined but never used.","'ReactElement' is defined but never used.","'ChonkyFileActionData' is defined but never used.",["939"],["940"],["939"],["940"],"'Modal' is defined but never used.","'products' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fethData'. Either include it or remove the dependency array.",["958"],"'setFullscreen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkUserInfo'. Either include it or remove the dependency array.",["959"],"React Hook useEffect has missing dependencies: 'props.history', 'userInfo.authenticated', and 'userInfo.role'. Either include them or remove the dependency array.",["960"],["961"],["939"],["940"],"'Footer' is defined but never used.","'StarOutlined' is defined but never used.","'LikeOutlined' is defined but never used.","'ChallengeReviewModal' is defined but never used.","'serUserInfo' is assigned a value but never used.",["962"],"React Hook useEffect has missing dependencies: 'form' and 'props.selectedProduct'. Either include them or remove the dependency array.",["963"],"'useState' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'PlayerState' is defined but never used.","'setPlayerState' is assigned a value but never used.","'setCurrentBreak' is assigned a value but never used.","'width' is assigned a value but never used.","'playing' is assigned a value but never used.","'setPlaying' is assigned a value but never used.",["939"],["940"],["964"],"'Option' is assigned a value but never used.","'createProducts' is defined but never used.","'Draggable' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchExercises'. Either include it or remove the dependency array.",["965"],"'rmProduct' is assigned a value but never used.","'newPrice' is assigned a value but never used.","'setNewPrice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedChallenge.price'. Either include it or remove the dependency array.",["966"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["967"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'CommentOutlined' is defined but never used.","'FireOutlined' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'FlagFilled' is defined but never used.",["968"],"'LoadingOutlined' is defined but never used.","'UploadOutlined' is defined but never used.","'registerUser' is defined but never used.","'sendEmailVerification' is defined but never used.","'membership' is assigned a value but never used.","'goals' is assigned a value but never used.","'setGoals' is assigned a value but never used.","'allChallengeGoals' is assigned a value but never used.","'setSelectedTrainerGoal' is assigned a value but never used.",["969"],"React Hook useEffect has missing dependencies: 'form', 'selectedFaq.answer', 'selectedFaq.category', 'selectedFaq.isPublic', and 'selectedFaq.question'. Either include them or remove the dependency array. If 'setIsPublic' needs the current value of 'selectedFaq.isPublic', you can also switch to useReducer instead of useState and read 'selectedFaq.isPublic' in the reducer.",["970"],"'updateBlogCategory' is defined but never used.","React Hook useEffect has missing dependencies: 'form' and 'userInfo'. Either include them or remove the dependency array.",["971"],"'Select' is defined but never used.","'UpdateChallenge' is defined but never used.","'checkUser' is defined but never used.","'set' is defined but never used.","'selectedChallenge' is assigned a value but never used.",["972"],"'useEffect' is defined but never used.","'CaretRightOutlined' is defined but never used.","'totalDuration' is assigned a value but never used.","'createChallenge' is defined but never used.","'getAllChallenges' is defined but never used.","'userInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'addStuffToMainTabForm'. Either include it or remove the dependency array.",["973"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside",["974"],"React Hook useEffect has a missing dependency: 'getUserDetails'. Either include it or remove the dependency array.",["975"],"'AuditOutlined' is defined but never used.","'ExclamationCircleOutlined' is defined but never used.","'a' is assigned a value but never used.","'setA' is assigned a value but never used.","'t' is assigned a value but never used.","'setT' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'checkForType', 'mediaActions', 'mediaType', 'setCurrentFolderName', 'setOpenUploadModal', and 'setRemoteMediaManagerVisible'. Either include them or remove the dependency array. If 'checkForType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["976"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'resetFileMap' is assigned a value but never used.",["977"],"'selectBefore' is assigned a value but never used.","'slug' is defined but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","unexpected","Duplicate key 'margin'.",["978"],"React Hook useEffect has a missing dependency: 'challanges'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterChallenges' needs the current value of 'challanges'.",["979"],["980"],"'useContext' is defined but never used.","'useRef' is defined but never used.","'count' is assigned a value but never used.",["981"],"'r' is assigned a value but never used.","'getUserProfileInfo' is defined but never used.","'Space' is defined but never used.","'Tag' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"982","fix":"983"},{"desc":"984","fix":"985"},{"desc":"986","fix":"987"},{"desc":"988","fix":"989"},{"desc":"990","fix":"991"},{"desc":"992","fix":"993"},{"desc":"994","fix":"995"},{"desc":"996","fix":"997"},{"desc":"998","fix":"999"},{"desc":"992","fix":"1000"},{"desc":"1001","fix":"1002"},{"desc":"1003","fix":"1004"},{"desc":"1005","fix":"1006"},{"desc":"1007","fix":"1008"},{"desc":"1009","fix":"1010"},{"desc":"1011","fix":"1012"},{"desc":"1013","fix":"1014"},{"desc":"1015","fix":"1016"},{"desc":"1017","fix":"1018"},{"desc":"1019","fix":"1020"},{"desc":"988","fix":"1021"},{"desc":"992","fix":"1022"},{"desc":"994","fix":"1023"},{"desc":"992","fix":"1024"},{"desc":"1025","fix":"1026"},{"desc":"1027","fix":"1028"},{"desc":"1029","fix":"1030"},{"desc":"1029","fix":"1031"},{"desc":"1032","fix":"1033"},{"desc":"1034","fix":"1035"},{"desc":"1036","fix":"1037"},{"desc":"1038","fix":"1039"},{"desc":"1040","fix":"1041"},{"desc":"1032","fix":"1042"},{"desc":"1043","fix":"1044"},{"desc":"1045","fix":"1046"},{"desc":"1015","fix":"1047"},{"desc":"992","fix":"1048"},{"desc":"1049","fix":"1050"},{"desc":"1051","fix":"1052"},{"desc":"1001","fix":"1053"},"Add dependencies array: []",{"range":"1054","text":"1055"},"Update the dependencies array to be: [fetchAllRecipes, fetchData, language]",{"range":"1056","text":"1057"},"Update the dependencies array to be: [form, postInfo.image, postInfo.text, postInfo.title, postInfo.type]",{"range":"1058","text":"1059"},"Update the dependencies array to be: [fetchBlogs, language]",{"range":"1060","text":"1061"},"Update the dependencies array to be: [fechUserInfo]",{"range":"1062","text":"1063"},"Update the dependencies array to be: [fetchData, language]",{"range":"1064","text":"1065"},"Update the dependencies array to be: [form, props.selectedProduct]",{"range":"1066","text":"1067"},"Update the dependencies array to be: [challengesApplicableOn, form, selectedCoupon]",{"range":"1068","text":"1069"},"Update the dependencies array to be: [getNextChallenges]",{"range":"1070","text":"1071"},{"range":"1072","text":"1065"},"Update the dependencies array to be: [props.history]",{"range":"1073","text":"1074"},"Update the dependencies array to be: [fethData, getAllBlogsFromBackend, language]",{"range":"1075","text":"1076"},"Update the dependencies array to be: [item, userInfo.id]",{"range":"1077","text":"1078"},"Update the dependencies array to be: [fetchData, props.history, setUserInfo, userInfo]",{"range":"1079","text":"1080"},"Update the dependencies array to be: [setExerciseWorkoutTimeTrack, workout]",{"range":"1081","text":"1082"},"Update the dependencies array to be: [currentExercise.index, exerciseSeconds, moveToNextExercise, playerState, setPlayerState, workout.exercises]",{"range":"1083","text":"1084"},"Update the dependencies array to be: [gender, months, recommandedChal, userProfile]",{"range":"1085","text":"1086"},"Update the dependencies array to be: [fethData, language]",{"range":"1087","text":"1088"},"Update the dependencies array to be: [checkUserInfo]",{"range":"1089","text":"1090"},"Update the dependencies array to be: [props.history, userInfo.authenticated, userInfo.role]",{"range":"1091","text":"1092"},{"range":"1093","text":"1061"},{"range":"1094","text":"1065"},{"range":"1095","text":"1067"},{"range":"1096","text":"1065"},"Update the dependencies array to be: [fetchExercises, trainers]",{"range":"1097","text":"1098"},"Update the dependencies array to be: [selectedChallenge.price]",{"range":"1099","text":"1100"},"Update the dependencies array to be: [pageNumber, language, fetchData]",{"range":"1101","text":"1102"},{"range":"1103","text":"1102"},"Update the dependencies array to be: [fetchData]",{"range":"1104","text":"1105"},"Update the dependencies array to be: [form, selectedFaq.answer, selectedFaq.category, selectedFaq.isPublic, selectedFaq.question]",{"range":"1106","text":"1107"},"Update the dependencies array to be: [form, userInfo]",{"range":"1108","text":"1109"},"Update the dependencies array to be: [userInfo, language, fetchData]",{"range":"1110","text":"1111"},"Update the dependencies array to be: [addStuffToMainTabForm]",{"range":"1112","text":"1113"},{"range":"1114","text":"1105"},"Update the dependencies array to be: [current, getUserDetails]",{"range":"1115","text":"1116"},"Update the dependencies array to be: [checkForType, deleteFiles, mediaActions, mediaType, setCurrentFolderId, setCurrentFolderName, setOpenUploadModal, setRemoteMediaManagerVisible]",{"range":"1117","text":"1118"},{"range":"1119","text":"1088"},{"range":"1120","text":"1065"},"Update the dependencies array to be: [challanges, filterByBodyFocus, filterByEquipments, filterByGoal, filterByIntensity]",{"range":"1121","text":"1122"},"Update the dependencies array to be: [blogInfo, form]",{"range":"1123","text":"1124"},{"range":"1125","text":"1074"},[837,837],", []",[5129,5139],"[fetchAllRecipes, fetchData, language]",[922,924],"[form, postInfo.image, postInfo.text, postInfo.title, postInfo.type]",[1052,1062],"[fetchBlogs, language]",[3568,3570],"[fechUserInfo]",[1490,1500],"[fetchData, language]",[2139,2162],"[form, props.selectedProduct]",[1240,1256],"[challengesApplicableOn, form, selectedCoupon]",[1876,1878],"[getNextChallenges]",[1088,1098],[1263,1265],"[props.history]",[2581,2591],"[fethData, getAllBlogsFromBackend, language]",[1733,1739],"[item, userInfo.id]",[2638,2640],"[fetchData, props.history, setUserInfo, userInfo]",[2337,2346],"[setExerciseWorkoutTimeTrack, workout]",[3229,3246],"[currentExercise.index, exerciseSeconds, moveToNextExercise, playerState, setPlayerState, workout.exercises]",[3103,3116],"[gender, months, recommandedChal, userProfile]",[7295,7305],"[fethData, language]",[2391,2393],"[checkUserInfo]",[1528,1530],"[props.history, userInfo.authenticated, userInfo.role]",[1581,1591],[1776,1786],[7113,7115],[1088,1098],[3606,3616],"[fetchExercises, trainers]",[20454,20456],"[selectedChallenge.price]",[1460,1482],"[pageNumber, language, fetchData]",[1560,1582],[3148,3150],"[fetchData]",[1626,1628],"[form, selectedFaq.answer, selectedFaq.category, selectedFaq.isPublic, selectedFaq.question]",[3396,3398],"[form, userInfo]",[5021,5041],"[userInfo, language, fetchData]",[6585,6587],"[addStuffToMainTabForm]",[2203,2205],[2587,2596],"[current, getUserDetails]",[22835,22893],"[checkForType, deleteFiles, mediaActions, mediaType, setCurrentFolderId, setCurrentFolderName, setOpenUploadModal, setRemoteMediaManagerVisible]",[3096,3106],[1988,1998],[3937,4009],"[challanges, filterByBodyFocus, filterByEquipments, filterByGoal, filterByIntensity]",[2728,2738],"[blogInfo, form]",[1232,1234]]