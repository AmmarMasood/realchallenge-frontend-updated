[{"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\PrivateRoute.js":"1","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\payment.js":"2","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\RenderedVideoPlayer.js":"3","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\NewFaq.js":"4","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\LoggedinNavbar.js":"5","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\MediaManager.js":"6","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\ChallengeProfile\\ChallengeProfileWeb.js":"7","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\goals.js":"8","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\TextEditor.js":"9","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\EditTypeName.js":"10","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomExercisePanel.js":"11","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\RecipeProfile.js":"12","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\MagazineArticle.js":"13","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\NewRecipe.js":"14","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\UpdateRecipe.js":"15","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\NewBlog.js":"16","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AdminDashboard.js":"17","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\blogs.js":"18","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\UpdateBlog.js":"19","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeAdditionalTab.js":"20","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\AllBlogs.js":"21","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\recipes.js":"22","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\AllRecipes.js":"23","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\main.js":"24","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\AllChallenges.js":"25","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\AllExercises.js":"26","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\NewExercise.js":"27","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RequestManager\\AllRequests.js":"28","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\adminRequests.js":"29","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\index.js":"30","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\LanguageContext.js":"31","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Login.js":"32","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Trainers.js":"33","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\BreakTimer.js":"34","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\NewCoupon.js":"35","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\AllUsers.js":"36","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\equipments.js":"37","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\New\\Wizard.js":"38","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Nutrition.js":"39","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\TermsAndCondition.js":"40","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Footer.js":"41","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\UpdateCoupon.js":"42","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\PlayerControls.js":"43","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteModal.js":"44","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Nutrition\\SearchNutrition.js":"45","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\ScrollToTop.js":"46","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserProfile.js":"47","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengePlayer.js":"48","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Navbar.js":"49","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\coupons.js":"50","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\AllFaqs.js":"51","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallenge.js":"52","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteNextModal.js":"53","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\users.js":"54","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengeProfile.js":"55","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeReviewModal.js":"56","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\AllCoupons.js":"57","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\NewProduct.js":"58","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\communityPosts.js":"59","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeMainTab.js":"60","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\mediaManager.js":"61","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\responsive.js":"62","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\UpdateExercise.js":"63","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\MusicPlayer.js":"64","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\CreatePayment.js":"65","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Challenges.js":"66","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\PrivacyPolicy.js":"67","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\customer.js":"68","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\AllProducts.js":"69","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\UpdateFaq.js":"70","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ReplaceFreeChallengePopup.js":"71","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\FullScreenPlayerVideosBrowser.js":"72","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MembershipManager\\AllMemberships.js":"73","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\AllPosts.js":"74","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AllChallenges.js":"75","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ForgotPassword.js":"76","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\authentication.js":"77","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\PackageSelector.js":"78","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\NewPost.js":"79","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\shop.js":"80","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\TrainerProfile.js":"81","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\setAuthToken.js":"82","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\UpdatePost.js":"83","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Common\\ReviewsModal.js":"84","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\PlayerState.js":"85","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\CookiePolicy.js":"86","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\NewWelcome.js":"87","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\ChallengeProfile\\ChallengeProfileTab.js":"88","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\bodyFocus.js":"89","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\RemoteMediaManager.js":"90","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\UpdateProduct.js":"91","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Nutrient.js":"92","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\NewUser.js":"93","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Magazine.js":"94","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ResetNewPassword.js":"95","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\VerifyUser.js":"96","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\ChoosePlan.js":"97","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\mediaManagerUtils.js":"98","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\WorkoutCompleteModal.js":"99","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\EditCategoryName.js":"100","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Challenges.js":"101","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Home.js":"102","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\EmailVerificationRedirect.js":"103","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\UpdateChallenge.js":"104","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutTab.js":"105","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWorkoutPanel.js":"106","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Home\\Hero.js":"107","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserUpdate.js":"108","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\ChallengeProfile\\ChallengeProfileMobile.js":"109","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\Player.js":"110","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\trainers.js":"111","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Pricing.js":"112","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\MollieRedirectPage.js":"113","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\CommentSection.js":"114","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\MediaFileUploader.js":"115","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\EditTypeName.js":"116","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\faqs.js":"117","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\tags.js":"118"},{"size":484,"mtime":1640692961639,"results":"119","hashOfConfig":"120"},{"size":10850,"mtime":1633858841310,"results":"121","hashOfConfig":"120"},{"size":6919,"mtime":1630951873398,"results":"122","hashOfConfig":"120"},{"size":6982,"mtime":1632584667232,"results":"123","hashOfConfig":"120"},{"size":3579,"mtime":1636920067343,"results":"124","hashOfConfig":"120"},{"size":25561,"mtime":1645295899677,"results":"125","hashOfConfig":"120"},{"size":17875,"mtime":1626161848110,"results":"126","hashOfConfig":"120"},{"size":1251,"mtime":1619026606632,"results":"127","hashOfConfig":"120"},{"size":378,"mtime":1640879242652,"results":"128","hashOfConfig":"120"},{"size":1593,"mtime":1631447061929,"results":"129","hashOfConfig":"120"},{"size":3867,"mtime":1625079704428,"results":"130","hashOfConfig":"120"},{"size":15526,"mtime":1642276452154,"results":"131","hashOfConfig":"120"},{"size":11068,"mtime":1640881018859,"results":"132","hashOfConfig":"120"},{"size":34313,"mtime":1643486057458,"results":"133","hashOfConfig":"120"},{"size":38488,"mtime":1642278479880,"results":"134","hashOfConfig":"120"},{"size":13059,"mtime":1643488669818,"results":"135","hashOfConfig":"120"},{"size":23145,"mtime":1641312455749,"results":"136","hashOfConfig":"120"},{"size":3860,"mtime":1643525525094,"results":"137","hashOfConfig":"120"},{"size":13489,"mtime":1640937752115,"results":"138","hashOfConfig":"120"},{"size":8293,"mtime":1640934340407,"results":"139","hashOfConfig":"120"},{"size":3783,"mtime":1641411929610,"results":"140","hashOfConfig":"120"},{"size":16712,"mtime":1643492096943,"results":"141","hashOfConfig":"120"},{"size":3677,"mtime":1641313030271,"results":"142","hashOfConfig":"120"},{"size":8164,"mtime":1643492860608,"results":"143","hashOfConfig":"120"},{"size":6672,"mtime":1641305112450,"results":"144","hashOfConfig":"120"},{"size":5688,"mtime":1641305875042,"results":"145","hashOfConfig":"120"},{"size":5650,"mtime":1641304049391,"results":"146","hashOfConfig":"120"},{"size":6443,"mtime":1641241853127,"results":"147","hashOfConfig":"120"},{"size":731,"mtime":1641047132936,"results":"148","hashOfConfig":"120"},{"size":1207,"mtime":1624653117883,"results":"149","hashOfConfig":"120"},{"size":393,"mtime":1618235220648,"results":"150","hashOfConfig":"120"},{"size":8485,"mtime":1640694883191,"results":"151","hashOfConfig":"120"},{"size":7081,"mtime":1636895785994,"results":"152","hashOfConfig":"120"},{"size":2799,"mtime":1630571196786,"results":"153","hashOfConfig":"120"},{"size":5962,"mtime":1643493328009,"results":"154","hashOfConfig":"120"},{"size":6014,"mtime":1641313113665,"results":"155","hashOfConfig":"120"},{"size":1635,"mtime":1631439389180,"results":"156","hashOfConfig":"120"},{"size":22968,"mtime":1642275540852,"results":"157","hashOfConfig":"120"},{"size":7597,"mtime":1643492495150,"results":"158","hashOfConfig":"120"},{"size":1927,"mtime":1643492399355,"results":"159","hashOfConfig":"120"},{"size":4673,"mtime":1615315654218,"results":"160","hashOfConfig":"120"},{"size":5887,"mtime":1641210443873,"results":"161","hashOfConfig":"120"},{"size":17226,"mtime":1633894232712,"results":"162","hashOfConfig":"120"},{"size":5872,"mtime":1640691017600,"results":"163","hashOfConfig":"120"},{"size":16965,"mtime":1638693808478,"results":"164","hashOfConfig":"120"},{"size":355,"mtime":1612865032711,"results":"165","hashOfConfig":"120"},{"size":3956,"mtime":1617391783020,"results":"166","hashOfConfig":"120"},{"size":17468,"mtime":1641223240427,"results":"167","hashOfConfig":"120"},{"size":11140,"mtime":1643492439054,"results":"168","hashOfConfig":"120"},{"size":2568,"mtime":1631633522519,"results":"169","hashOfConfig":"120"},{"size":3403,"mtime":1641305964945,"results":"170","hashOfConfig":"120"},{"size":17856,"mtime":1643487624882,"results":"171","hashOfConfig":"120"},{"size":2356,"mtime":1640533908140,"results":"172","hashOfConfig":"120"},{"size":4700,"mtime":1641197672408,"results":"173","hashOfConfig":"120"},{"size":38963,"mtime":1641240921790,"results":"174","hashOfConfig":"120"},{"size":2978,"mtime":1630875504626,"results":"175","hashOfConfig":"120"},{"size":4814,"mtime":1643493140469,"results":"176","hashOfConfig":"120"},{"size":10401,"mtime":1619523238471,"results":"177","hashOfConfig":"120"},{"size":3020,"mtime":1640607466365,"results":"178","hashOfConfig":"120"},{"size":28922,"mtime":1643487710512,"results":"179","hashOfConfig":"120"},{"size":9071,"mtime":1636848563331,"results":"180","hashOfConfig":"120"},{"size":332,"mtime":1625868309015,"results":"181","hashOfConfig":"120"},{"size":5429,"mtime":1632591074057,"results":"182","hashOfConfig":"120"},{"size":5013,"mtime":1628616515109,"results":"183","hashOfConfig":"120"},{"size":31010,"mtime":1641388987046,"results":"184","hashOfConfig":"120"},{"size":12670,"mtime":1643493275517,"results":"185","hashOfConfig":"120"},{"size":1943,"mtime":1643492385319,"results":"186","hashOfConfig":"120"},{"size":1239,"mtime":1629153304912,"results":"187","hashOfConfig":"120"},{"size":3795,"mtime":1619781527788,"results":"188","hashOfConfig":"120"},{"size":7671,"mtime":1631447235491,"results":"189","hashOfConfig":"120"},{"size":1407,"mtime":1633502003437,"results":"190","hashOfConfig":"120"},{"size":1183,"mtime":1628373451719,"results":"191","hashOfConfig":"120"},{"size":3327,"mtime":1641306131454,"results":"192","hashOfConfig":"120"},{"size":3947,"mtime":1641312828398,"results":"193","hashOfConfig":"120"},{"size":11426,"mtime":1643493312771,"results":"194","hashOfConfig":"120"},{"size":2439,"mtime":1620039438813,"results":"195","hashOfConfig":"120"},{"size":5714,"mtime":1636908483217,"results":"196","hashOfConfig":"120"},{"size":5858,"mtime":1626038935485,"results":"197","hashOfConfig":"120"},{"size":3739,"mtime":1640718252701,"results":"198","hashOfConfig":"120"},{"size":2983,"mtime":1619781017191,"results":"199","hashOfConfig":"120"},{"size":12228,"mtime":1636898764709,"results":"200","hashOfConfig":"120"},{"size":265,"mtime":1618765090231,"results":"201","hashOfConfig":"120"},{"size":4460,"mtime":1622656459605,"results":"202","hashOfConfig":"120"},{"size":8304,"mtime":1631621507122,"results":"203","hashOfConfig":"120"},{"size":1591,"mtime":1630942435985,"results":"204","hashOfConfig":"120"},{"size":1929,"mtime":1643492368393,"results":"205","hashOfConfig":"120"},{"size":11790,"mtime":1640544695199,"results":"206","hashOfConfig":"120"},{"size":14626,"mtime":1625918646403,"results":"207","hashOfConfig":"120"},{"size":1636,"mtime":1631437961079,"results":"208","hashOfConfig":"120"},{"size":709,"mtime":1623854620132,"results":"209","hashOfConfig":"120"},{"size":9075,"mtime":1619781559200,"results":"210","hashOfConfig":"120"},{"size":40353,"mtime":1643492500764,"results":"211","hashOfConfig":"120"},{"size":22080,"mtime":1642277821771,"results":"212","hashOfConfig":"120"},{"size":6993,"mtime":1643525557152,"results":"213","hashOfConfig":"120"},{"size":3729,"mtime":1620044415627,"results":"214","hashOfConfig":"120"},{"size":4257,"mtime":1640544512435,"results":"215","hashOfConfig":"120"},{"size":1377,"mtime":1625266725690,"results":"216","hashOfConfig":"120"},{"size":3421,"mtime":1618777961923,"results":"217","hashOfConfig":"120"},{"size":2007,"mtime":1636893063292,"results":"218","hashOfConfig":"120"},{"size":1547,"mtime":1631394709982,"results":"219","hashOfConfig":"120"},{"size":17686,"mtime":1640609885474,"results":"220","hashOfConfig":"120"},{"size":20922,"mtime":1622722603969,"results":"221","hashOfConfig":"120"},{"size":1878,"mtime":1626382934068,"results":"222","hashOfConfig":"120"},{"size":22560,"mtime":1635797631248,"results":"223","hashOfConfig":"120"},{"size":41974,"mtime":1632567121448,"results":"224","hashOfConfig":"120"},{"size":6897,"mtime":1618321202262,"results":"225","hashOfConfig":"120"},{"size":2685,"mtime":1614860600691,"results":"226","hashOfConfig":"120"},{"size":23655,"mtime":1621161456251,"results":"227","hashOfConfig":"120"},{"size":15134,"mtime":1625918638606,"results":"228","hashOfConfig":"120"},{"size":1714,"mtime":1629616326530,"results":"229","hashOfConfig":"120"},{"size":2769,"mtime":1633431917005,"results":"230","hashOfConfig":"120"},{"size":13304,"mtime":1626595613397,"results":"231","hashOfConfig":"120"},{"size":2102,"mtime":1626391458009,"results":"232","hashOfConfig":"120"},{"size":6675,"mtime":1640607476506,"results":"233","hashOfConfig":"120"},{"size":14193,"mtime":1640097260936,"results":"234","hashOfConfig":"120"},{"size":2084,"mtime":1631433267801,"results":"235","hashOfConfig":"120"},{"size":3296,"mtime":1631446614844,"results":"236","hashOfConfig":"120"},{"size":1213,"mtime":1619026552964,"results":"237","hashOfConfig":"120"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qt7wkf",{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"247"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"255"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"247"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"271"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"247"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"247"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"243"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"262"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"251"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"313"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"316","messages":"317","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"319"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"330"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"285"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"322"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"322"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"247"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"247"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"313"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"313"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"247"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"285"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"319"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"402"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"247"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"330"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"285"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"285"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"330"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"262"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"402"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"262"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"313"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"247"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"251"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"251"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"313"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"265"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"243"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"462","messages":"463","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"251"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"247"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"251"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"243"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"402"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"478","messages":"479","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"486","messages":"487","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"488","messages":"489","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"251"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"265"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"500","messages":"501","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"247"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"322"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"512","messages":"513","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"514","messages":"515","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"251"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"251"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"526","messages":"527","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"247"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\PrivateRoute.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\payment.js",["537","538","539"],"import axios from \"axios\";\r\nimport { notification } from \"antd\";\r\nimport { getUserProfileInfo } from \"./users\";\r\nimport { Modal, Button, Space } from \"antd\";\r\n\r\nconst openNotificationWithIcon = (type, message, description) => {\r\n  notification[type]({\r\n    message: message,\r\n    description: description,\r\n  });\r\n};\r\n\r\nfunction errorPopup(title, text) {\r\n  Modal.info({\r\n    title: <div className=\"font-paragraph-white\">{title}</div>,\r\n    content: <div className=\"font-paragraph-white\">{text}</div>,\r\n    icon: null,\r\n    okButtonProps: {\r\n      style: { background: \"#ff7700\", border: \"none\" },\r\n    },\r\n    onOk() {},\r\n  });\r\n}\r\n\r\nexport function mollieAuthUser() {\r\n  return axios\r\n    .get(`${process.env.REACT_APP_SERVER}/api/auth/mollie/oauth2/authorize`)\r\n    .then((res) => res.data)\r\n    .catch((err) => {\r\n      openNotificationWithIcon(\r\n        \"error\",\r\n        \"Unable to access mollie server at the moment.\"\r\n      );\r\n      console.log(err);\r\n    });\r\n}\r\n\r\nexport function createPayment(values) {\r\n  return axios\r\n    .post(\r\n      `${process.env.REACT_APP_SERVER}/api/auth/mollie/create/first/payment`,\r\n      values\r\n    )\r\n    .then((res) => res.data)\r\n    .catch((err) => {\r\n      if (err.response && err.response.data) {\r\n        console.log(err.response.data.message);\r\n        openNotificationWithIcon(\"error\", `${err.response.data.message}`);\r\n      } else {\r\n        openNotificationWithIcon(\r\n          \"error\",\r\n          \"Unable to access mollie server at the moment.\"\r\n        );\r\n        console.log(err);\r\n      }\r\n    });\r\n}\r\n\r\nexport function createSubscribtion(values) {\r\n  return axios\r\n    .post(\r\n      `${process.env.REACT_APP_SERVER}/api/auth/mollie/create/subscription`,\r\n      values\r\n    )\r\n    .then((res) => res.data)\r\n    .catch((err) => {\r\n      errorPopup(\r\n        \"Error\",\r\n        <div>\r\n          Unable to create subscribtion, please contact the realchallenge for\r\n          more information.\r\n        </div>\r\n      );\r\n      console.log(err);\r\n    });\r\n}\r\n\r\nconst checkIfUserAlreadyHaveAFreeChallenge = (customer) => {\r\n  if (customer.customerDetails.challenges.length <= 0) {\r\n    return false;\r\n  } else {\r\n    const c = customer.customerDetails.challenges.filter((c) =>\r\n      c.access.includes(\"FREE\")\r\n    );\r\n    if (c.length > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nconst alreadySubscribedToSpecificNumberOfChallenges = (\r\n  customer,\r\n  noOfChallengesAllowed\r\n) => {\r\n  if (customer.customerDetails.challenges.length <= 0) {\r\n    return false;\r\n  } else {\r\n    const c = customer.customerDetails.challenges.filter(\r\n      (c) => !c.access.includes(\"FREE\")\r\n    );\r\n    if (c.length >= noOfChallengesAllowed) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport function checkUserPackage(\r\n  customer,\r\n  challenge,\r\n  pack,\r\n  history,\r\n  setSelectedChallenge,\r\n  setReplaceFreeChallengePopupVisible\r\n) {\r\n  console.log(customer);\r\n  console.log(challenge);\r\n  console.log(customer.customerDetails.membership[0]);\r\n  // check if user is free subscriber\r\n  if (customer.customerDetails.membership[0] === undefined) {\r\n    // if has not subscribed to any package. They can only have one free challenge.\r\n    // first we if the comming challenge is free or not.\r\n    if (challenge.access.includes(\"FREE\")) {\r\n      // if free we check if they already have a free challenge\r\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\r\n        // if they already have a free challenge\r\n        // openNotificationWithIcon(\r\n        //   \"error\",\r\n        //   `You can only subscribe to one free challenge at a time.`\r\n        // );\r\n        setReplaceFreeChallengePopupVisible(true);\r\n        return {\r\n          success: false,\r\n        };\r\n      } else {\r\n        // if they dont have a free challenge\r\n        return {\r\n          success: true,\r\n          message: \"SUBSCRIBE\",\r\n        };\r\n      }\r\n    } else {\r\n      // if not free\r\n\r\n      if (pack) {\r\n        setSelectedChallenge(challenge);\r\n        localStorage.setItem(\"package-type\", pack);\r\n        history.push(\"/create-payment\");\r\n      } else {\r\n        errorPopup(\r\n          \"Unable to subscribe\",\r\n          <div>\r\n            You can only subscribe to free challenges. This is a paid challenge.\r\n            Please subscribe to get this challenge.\r\n          </div>\r\n        );\r\n      }\r\n      return {\r\n        success: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  // check if user is challenge 1 subscriber\r\n  if (\r\n    customer.customerDetails.membership[0] &&\r\n    customer.customerDetails.membership[0].name === \"CHALLENGE_1\"\r\n  ) {\r\n    // if has not subscribed to any package. They can only have one free challenge.\r\n    // first we if the comming challenge is free or not.\r\n    if (challenge.access.includes(\"FREE\")) {\r\n      // if free we check if they already have a free challenge\r\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\r\n        // if they already have a free challenge\r\n        // openNotificationWithIcon(\r\n        //   \"error\",\r\n        //   `You can only subscribe to one free challenge at a time.`\r\n        // );\r\n        setReplaceFreeChallengePopupVisible(true);\r\n        return {\r\n          success: false,\r\n        };\r\n      } else {\r\n        // if they dont have a free challenge\r\n        return {\r\n          success: true,\r\n          message: \"SUBSCRIBE\",\r\n        };\r\n      }\r\n    } else {\r\n      // if not free we check if user is already subscirbed to 1 challenge.\r\n      // alreadySubscribedToSpecificNumberOfChallenges function check if the user has already subscribed to specific\r\n      // number of challenges other than free challenge. So challenge 1 wala user can subscribe to only 1 more challenge other than free\r\n      // where are challenge 3 wala can subscribe to 2 challenges other than free, where are 12 months wala can subscribe to 3 other than free.\r\n\r\n      if (alreadySubscribedToSpecificNumberOfChallenges(customer, 1)) {\r\n        errorPopup(\r\n          \"Unable to subscribe\",\r\n          <div>\r\n            You have already bought a challenge. You can only buy new challenge\r\n            once that challenge expires.\r\n          </div>\r\n        );\r\n        return { success: false };\r\n      } else {\r\n        return {\r\n          success: true,\r\n          message: \"SUBSCRIBE\",\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  // check if user is challenge 3 subscriber\r\n  if (\r\n    customer.customerDetails.membership[0] &&\r\n    customer.customerDetails.membership[0].name === \"CHALLENGE_3\"\r\n  ) {\r\n    // if has not subscribed to any package. They can only have one free challenge.\r\n    // first we if the comming challenge is free or not.\r\n    if (challenge.access.includes(\"FREE\")) {\r\n      // if free we check if they already have a free challenge\r\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\r\n        // if they already have a free challenge\r\n        // openNotificationWithIcon(\r\n        //   \"error\",\r\n        //   `You can only subscribe to one free challenge at a time.`\r\n        // );\r\n        setReplaceFreeChallengePopupVisible(true);\r\n        return {\r\n          success: false,\r\n        };\r\n      } else {\r\n        console.log(\"penis\");\r\n        // if they dont have a free challenge\r\n        return {\r\n          success: true,\r\n          message: \"SUBSCRIBE\",\r\n        };\r\n      }\r\n    } else {\r\n      console.log(\"poop\");\r\n      // if not free we check if user is already subscirbed to 2 challenge.\r\n      // alreadySubscribedToSpecificNumberOfChallenges function check if the user has already subscribed to specific\r\n      // number of challenges other than free challenge. So challenge 1 wala user can subscribe to only 1 more challenge other than free\r\n      // where are challenge 3 wala can subscribe to 2 challenges other than free, where are 12 months wala can subscribe to 3 other than free.\r\n\r\n      if (alreadySubscribedToSpecificNumberOfChallenges(customer, 2)) {\r\n        errorPopup(\r\n          \"Unable to subscribe\",\r\n          <div>\r\n            You are already enrolled in 2 challenge. You can only enroll new\r\n            challenge once those challenges expires.\r\n          </div>\r\n        );\r\n        return { success: false };\r\n      } else {\r\n        return {\r\n          success: true,\r\n          message: \"SUBSCRIBE\",\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  // check if user is challenge 12 subscriber\r\n  if (\r\n    customer.customerDetails.membership[0] &&\r\n    customer.customerDetails.membership[0].name === \"CHALLENGE_12\"\r\n  ) {\r\n    // if has not subscribed to any package. They can only have one free challenge.\r\n    // first we if the comming challenge is free or not.\r\n    if (challenge.access.includes(\"FREE\")) {\r\n      // if free we check if they already have a free challenge\r\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\r\n        // if they already have a free challenge\r\n        // openNotificationWithIcon(\r\n        //   \"error\",\r\n        //   `You can only subscribe to one free challenge at a time.`\r\n        // );\r\n        setReplaceFreeChallengePopupVisible(true);\r\n        return {\r\n          success: false,\r\n        };\r\n      } else {\r\n        console.log(\"penis\");\r\n        // if they dont have a free challenge\r\n        return {\r\n          success: true,\r\n          message: \"SUBSCRIBE\",\r\n        };\r\n      }\r\n    } else {\r\n      console.log(\"poop\");\r\n      // if not free we check if user is already subscirbed to 2 challenge.\r\n      // alreadySubscribedToSpecificNumberOfChallenges function check if the user has already subscribed to specific\r\n      // number of challenges other than free challenge. So challenge 1 wala user can subscribe to only 1 more challenge other than free\r\n      // where are challenge 3 wala can subscribe to 2 challenges other than free, where are 12 months wala can subscribe to 3 other than free.\r\n\r\n      if (alreadySubscribedToSpecificNumberOfChallenges(customer, 3)) {\r\n        errorPopup(\r\n          \"Unable to subscibe\",\r\n          <div>\r\n            You are already enrolled in 3 challenges. You can only enroll new\r\n            challenge once those challenges expires.\r\n          </div>\r\n        );\r\n\r\n        // openNotificationWithIcon(\r\n        //   \"error\",\r\n        //   `You are already enrolled in 3 challenges. You can only enroll new challenge once those challenges expires.`\r\n        // );\r\n        return { success: false };\r\n      } else {\r\n        return {\r\n          success: true,\r\n          message: \"SUBSCRIBE\",\r\n        };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getSubscribtionInformation(customerId) {\r\n  return axios\r\n    .get(\r\n      `${process.env.REACT_APP_SERVER}/api/auth/mollie/subscription/customer/${customerId}`\r\n    )\r\n    .then((res) => {\r\n      console.log(res.data);\r\n      return res.data;\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n",["540","541"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\RenderedVideoPlayer.js",["542","543","544","545"],"import React, { useContext, useRef, useEffect, useState } from \"react\";\r\nimport \"../../assets/video-player-design.css\";\r\nimport \"../../assets/player.css\";\r\nimport ReactPlayer from \"react-player\";\r\nimport BreakTimer from \"./BreakTimer\";\r\nimport PlayerControls from \"./PlayerControls\";\r\nimport tune from \"../../assets/music/break-start.wav\";\r\nimport {\r\n  breakContext,\r\n  exerciseWorkoutTimeTrackContext,\r\n  playerStateContext,\r\n  timerVisibleContext,\r\n} from \"../../contexts/PlayerState\";\r\n\r\nvar count = 0;\r\n\r\nconst playAudio = () => {\r\n  new Audio(tune).play();\r\n};\r\nfunction RenderedVideoPlayer({\r\n  exercise,\r\n  musics,\r\n  moveToNextExercise,\r\n  moveToPrevExercise,\r\n  nextExerciseTitle,\r\n  completed,\r\n  // for full screen player video browser\r\n  workout,\r\n  setExerciseForHelpModal,\r\n  setOpenHelpModal,\r\n  setCurrentExercise,\r\n  currentExercise,\r\n  challengePageAddress,\r\n}) {\r\n  const [timerVisible, setTimerVisible] = useContext(timerVisibleContext);\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  // const [currentBreak, setCurrentBreak] = useContext(breakContext);\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(exerciseWorkoutTimeTrackContext)\r\n  const [exerciseSeconds, setExerciseSeconds] = useState(-1);\r\n  const playerRef = useRef(null);\r\n  const playerContainerRef = useRef(null);\r\n  const controlsRef = useRef(null);\r\n  const descriptionRef = useRef(null);\r\n  //   const time = new Date();\r\n  //   time.setSeconds(time.getSeconds() + 600);\r\n  //   const {\r\n  //     seconds,\r\n  //     minutes,\r\n  //     hours,\r\n  //     days,\r\n  //     isRunning,\r\n  //     start,\r\n  //     pause,\r\n  //     resume,\r\n  //     restart,\r\n  //   } = useTimer({\r\n  //     expiryTimestamp: time,\r\n  //     onExpire: () => console.warn(\"onExpire called\"),\r\n  //   });\r\n\r\n  useEffect(() => {\r\n    const sumAllBreakTime =\r\n      workout && workout.exercises.reduce((a, b) => a + (b[\"break\"] || 0), 0);\r\n    const sumAllExerciseDuration =\r\n      workout &&\r\n      workout.exercises.reduce(\r\n        (a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0),\r\n        0\r\n      );\r\n    console.log(\r\n      \"sumAllBreakTime\",\r\n      workout + sumAllExerciseDuration\r\n    );\r\n    const d = sumAllExerciseDuration + sumAllBreakTime;\r\n    setExerciseWorkoutTimeTrack((prev) => ({...prev, total: d}));\r\n  }, [workout]);\r\n\r\n  useEffect(() => {\r\n    // start();\r\n\r\n    exercise.exerciseLength\r\n      ? setExerciseSeconds(parseInt(exercise.exerciseLength))\r\n      : setExerciseSeconds(Math.round(playerRef.current.getDuration()));\r\n  }, [exercise]);\r\n\r\n  useEffect(() => {\r\n    if (exerciseSeconds === 0) {\r\n      playAudio();\r\n      if (workout.exercises[currentExercise.index + 1]) {\r\n        // this was how it was originall\r\n        setPlayerState({ ...playerState, playing: false });\r\n        setTimerVisible(true);\r\n        // these are new stuff\r\n        // setPlayerState({ ...playerState, playing: false });\r\n        // moveToNextExercise();\r\n        // setTimerVisible(true);\r\n      } else {\r\n        moveToNextExercise();\r\n        // setPlayerState({ ...playerState, playing: true });\r\n      }\r\n      return;\r\n    }\r\n  }, [exerciseSeconds]);\r\n  \r\n\r\n\r\n  const handleProgress = (changeState) => {\r\n    if (count > 1) {\r\n      controlsRef.current.style.visibility = \"hidden\";\r\n      descriptionRef.current.style.visibility = \"visible\";\r\n      count = 0;\r\n    }\r\n    if (controlsRef.current.style.visibility === \"visible\") {\r\n      count += 1;\r\n    }\r\n\r\n    // setPlayerState({ ...playerState, progress: changeState });\r\n    // seconds++;\r\n\r\n    if (exerciseSeconds > 0 && playerState.playing && !playerState.loading) {\r\n      setExerciseSeconds(exerciseSeconds - 1);\r\n      setExerciseWorkoutTimeTrack((prev) => ({...prev, current: prev.current + 1}));\r\n    }\r\n\r\n    setPlayerState({ ...playerState, progress: changeState });\r\n  };\r\n\r\n  const handleMouseMove = () => {\r\n    controlsRef.current.style.visibility = \"visible\";\r\n    descriptionRef.current.style.visibility = \"hidden\";\r\n    count = 0;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"player-wrapper\"\r\n      style={{ position: \"relative\" }}\r\n      ref={playerContainerRef}\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      <ReactPlayer\r\n        ref={playerRef}\r\n        className=\"react-player\"\r\n        onBuffer={() => {\r\n          setPlayerState({ ...playerState, loading: true });\r\n        }}\r\n        onBufferEnd={() => {\r\n          setPlayerState({ ...playerState, loading: false });\r\n        }}\r\n        playing={playerState.playing}\r\n        muted={playerState.muted}\r\n        loop={currentExercise.index === 0 ? false : true}\r\n        volume={playerState.volume}\r\n        url={exercise.videoURL ? exercise.videoURL : \"\"}\r\n        progress={playerState.progress}\r\n        onProgress={handleProgress}\r\n        // onEnded={() => {\r\n        //   if (currentExercise.index === 0) {\r\n        //     playAudio();\r\n        //     if (workout.exercises[currentExercise.index + 1]) {\r\n        //       // this was how it was originall\r\n        //       setPlayerState({ ...playerState, playing: false });\r\n        //       setTimerVisible(true);\r\n        //       // these are new stuff\r\n        //       // setPlayerState({ ...playerState, playing: false });\r\n        //       // moveToNextExercise();\r\n        //       // setTimerVisible(true);\r\n        //     } else {\r\n        //       moveToNextExercise();\r\n        //       // setPlayerState({ ...playerState, playing: true });\r\n        //     }\r\n        //   }\r\n        // }}\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        controls={false}\r\n      />\r\n      <PlayerControls\r\n        ref={controlsRef}\r\n        descriptionRef={descriptionRef}\r\n        playerRef={playerRef}\r\n        exerciseTitle={exercise.title ? exercise.title : \"\"}\r\n        exerciseLength={exercise.exerciseLength ? exercise.exerciseLength : \"\"}\r\n        breakTime={exercise.break ? exercise.break : \"\"}\r\n        playerContainerRef={playerContainerRef}\r\n        musicList={musics}\r\n        challengePageAddress={challengePageAddress}\r\n        exerciseSeconds={exerciseSeconds}\r\n        // for full screen player video browser\r\n        workout={workout}\r\n        setExerciseForHelpModal={setExerciseForHelpModal}\r\n        setOpenHelpModal={setOpenHelpModal}\r\n        setCurrentExercise={setCurrentExercise}\r\n        currentExercise={currentExercise}\r\n        moveToNextExercise={moveToNextExercise}\r\n        moveToPrevExercise={moveToPrevExercise}\r\n      />\r\n\r\n      {timerVisible && (\r\n        <BreakTimer\r\n          moveToNextExercise={moveToNextExercise}\r\n          nextExerciseTitle={nextExerciseTitle}\r\n          exercise={workout.exercises[currentExercise.index]}\r\n          timerVisible={timerVisible}\r\n          setTimerVisible={setTimerVisible}\r\n        />\r\n      )}\r\n      {/* music player */}\r\n\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RenderedVideoPlayer;\r\n",["546","547"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\NewFaq.js",["548","549"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Select, Modal, List, Checkbox } from \"antd\";\r\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\r\nimport { createPost } from \"../../../services/posts\";\r\nimport {\r\n  createFaq,\r\n  createFaqCategory,\r\n  getAllFaqCategories,\r\n  removeFaqCategory,\r\n} from \"../../../services/faqs\";\r\nimport EditTypeName from \"./EditTypeName\";\r\nconst { Option } = Select;\r\n\r\nfunction NewFaq({ setCurrentSelection, home }) {\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryModal, setCategoryModal] = useState(false);\r\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n  const [allCategories, setAllCategories] = useState([]);\r\n  const [isPublic, setIsPublic] = useState(true);\r\n\r\n  // update stuff\r\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\r\n    useState(false);\r\n\r\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\r\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\r\n    useState(\"\");\r\n\r\n  const fetchData = async () => {\r\n    const aC = await getAllFaqCategories();\r\n    // console.log(aC);\r\n    if (aC) {\r\n      setAllCategories(aC.categories);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const removeCategory = async (id) => {\r\n    await removeFaqCategory(id);\r\n    fetchData();\r\n  };\r\n  const onFinish = async (values) => {\r\n    const data = {\r\n      ...values,\r\n      category,\r\n      isPublic,\r\n    };\r\n    console.log(data);\r\n    await createFaq(data);\r\n    setCurrentSelection(home);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/*  */}\r\n      <EditTypeName\r\n        editItemNameModalVisible={editItemNameModalVisible}\r\n        setEditItemModelVisible={setEditItemNameModalVisible}\r\n        fethData={fetchData}\r\n        selectedItemForUpdate={selectedItemForUpdate}\r\n        titleName={selectedItemForUpdateTitle}\r\n      />\r\n      {/* modal to create a new goal */}\r\n      <Modal\r\n        onCancel={() => setCategoryModal(false)}\r\n        footer={false}\r\n        visible={categoryModal}\r\n      >\r\n        <p className=\"font-paragraph-white\">Categories</p>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Input\r\n            value={newCategoryName}\r\n            onChange={(e) => setNewCategoryName(e.target.value)}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            style={{\r\n              backgroundColor: \"var(--color-orange)\",\r\n              borderColor: \"var(--color-orange)\",\r\n              marginLeft: \"5px\",\r\n            }}\r\n            onClick={async () => {\r\n              if (newCategoryName.length > 0) {\r\n                await createFaqCategory(newCategoryName);\r\n                // setShowGoalModal(false);\r\n                fetchData();\r\n              }\r\n            }}\r\n          >\r\n            Create Category\r\n          </Button>\r\n        </div>\r\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n          <span className=\"font-subheading-white\">All Categories</span>\r\n          <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={allCategories}\r\n            renderItem={(cat) => (\r\n              <List.Item\r\n                style={{\r\n                  backgroundColor: \"#fff\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n                key={cat._id}\r\n              >\r\n                <span>{cat.name}</span>\r\n\r\n                <span>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      removeCategory(cat._id);\r\n                    }}\r\n                    style={{ marginRight: \"10px\" }}\r\n                    type=\"primary\"\r\n                    danger\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => {\r\n                      setSelectedItemForUpdateTitle(\"Update Faq Category\");\r\n                      setSelectedItemForUpdate(cat);\r\n                      setEditItemNameModalVisible(true);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </span>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </div>\r\n      </Modal>\r\n      {/* ----------------- */}\r\n      <h2 className=\"font-heading-black\">New FAQ</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Question\"\r\n            name=\"question\"\r\n            rules={[{ required: true, message: \"Please input question!\" }]}\r\n          >\r\n            <Input.TextArea rows={3} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Answer\"\r\n            name=\"answer\"\r\n            rules={[{ required: true, message: \"Please input answer!\" }]}\r\n          >\r\n            <Input.TextArea rows={6} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Category\" name=\"category\">\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Please select\"\r\n              value={category}\r\n              onChange={(e) => setCategory(e)}\r\n            >\r\n              {allCategories.map((cat) => (\r\n                <Option value={cat._id} key={cat._id}>\r\n                  {cat.name}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n            <Button\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                border: \"none\",\r\n                color: \"white\",\r\n                float: \"right\",\r\n                marginTop: \"5px\",\r\n              }}\r\n              onClick={() => setCategoryModal(true)}\r\n            >\r\n              Manage Category\r\n            </Button>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Checkbox\r\n              checked={isPublic}\r\n              onChange={(e) => setIsPublic(e.target.checked)}\r\n            >\r\n              Make public\r\n            </Checkbox>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewFaq;\r\n",["550","551"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\LoggedinNavbar.js",["552"],"import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../assets/navbar.css\";\r\nimport {\r\n  UserOutlined,\r\n  BellOutlined,\r\n  CaretDownOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Badge, Avatar, Popover } from \"antd\";\r\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\r\nimport Logo from \"../images/logo_orange.png\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// icons\r\nimport Coins from \"../assets/icons/coins.svg\";\r\nimport { logoutUser } from \"../services/authentication\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\nfunction LoggedinNavbar(props) {\r\n  // eslint-disable-next-line\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const userPoints = useContext(userPointsContext)[0];\r\n  const [t] = useTranslation();\r\n\r\n  const content = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      <Link to=\"/user/dashboard\" className=\"font-paragraph-white hover-orange\">\r\n        {t(\"navbar.success_overview\")}\r\n      </Link>\r\n      <Link to=\"/user/update\" className=\"font-paragraph-white hover-orange\">\r\n        {t(\"navbar.update\")}\r\n      </Link>\r\n      <Link to=\"/user/settings\" className=\"font-paragraph-white hover-orange\">\r\n        {t(\"navbar.setting\")}\r\n      </Link>\r\n      <Link\r\n        className=\"font-paragraphw-white hover-orange\"\r\n        onClick={() => logoutUser(props.history, setUserInfo)}\r\n      >\r\n        {\" \"}\r\n        {t(\"navbar.logout\")}\r\n      </Link>\r\n    </div>\r\n  );\r\n\r\n  const notificationContent = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      {userInfo.notifications.map((v) => (\r\n        <span className=\"font-paragraph-white\">{v.value}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"loggedin-nav-container\">\r\n        <div>\r\n          <Link to=\"/user/dashboard\" className=\"navbar-logo\">\r\n            <img src={Logo} alt=\"logo\" className=\"logo small-screenlogo\" />\r\n          </Link>\r\n        </div>\r\n        <div className=\"loggedin-nav-userinfo\">\r\n          <Popover\r\n            placement=\"bottom\"\r\n            content={notificationContent}\r\n            trigger=\"click\"\r\n          >\r\n            <Badge\r\n              count={userInfo.notifications.length}\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                marginRight: \"20px\",\r\n              }}\r\n            >\r\n              <BellOutlined\r\n                style={{\r\n                  fontSize: \"2.5rem\",\r\n                  color: \"#677182\",\r\n                  cursor: \"pointer\",\r\n                  backgroundColor: \"#171E27\",\r\n                  padding: \"5px\",\r\n                  marginRight: \"20px\",\r\n                }}\r\n              />\r\n            </Badge>\r\n          </Popover>\r\n          <Avatar\r\n            shape=\"square\"\r\n            src={userInfo.avatar}\r\n            icon={<UserOutlined />}\r\n            style={{\r\n              marginRight: \"20px\",\r\n            }}\r\n          />\r\n          <Popover placement=\"bottom\" content={content} trigger=\"click\">\r\n            <div className=\"loggedin-nav-name font-paragraph-white\">\r\n              <span>\r\n                {userInfo.username} <CaretDownOutlined />\r\n              </span>\r\n              <span style={{ color: \"#677182\", fontSize: \"1.6rem\" }}>\r\n                <img src={Coins} /> {userPoints}\r\n                {console.log(\"ammar\",userPoints)}\r\n              </span>\r\n            </div>\r\n          </Popover>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoggedinNavbar);\r\n",["553","554"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\MediaManager.js",["555","556","557","558","559","560"],"import { ChonkyActions, FileHelper, FullFileBrowser } from \"chonky\";\r\nimport React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport { showActionNotification } from \"./mediaManagerUtils\";\r\nimport MediaFileUploader from \"./MediaFileUploader\";\r\nimport {\r\n  getAllVideos,\r\n  getAllImages,\r\n  getAllDocs,\r\n  getAllMusics,\r\n  getAllVoiceOvers,\r\n  deleteMediaFiles,\r\n  getAllIcons,\r\n  getAllFoods,\r\n  getAllTemps,\r\n  getAllRcFiles,\r\n} from \"../../../services/mediaManager\";\r\nimport setAuthToken from \"../../../helpers/setAuthToken\";\r\n\r\n// Hook that sets up our file map and defines functions used to mutate - `deleteFiles`,\r\n// `moveFiles`, and so on.\r\nconst useCustomFileMap = () => {\r\n  // Setup the React state for our file map and the current folder.\r\n  const [fileMap, setFileMap] = useState({\r\n    qwerty123456: {\r\n      id: \"qwerty123456\",\r\n      name: \"Media Manager\",\r\n      isDir: true,\r\n      childrenIds: [\r\n        \"images-e598a85f843c\",\r\n        \"videos-s9514a3d74d57\",\r\n        \"docs-e598a85f843b\",\r\n        \"voiceOvers-e598a85f84gb\",\r\n        \"musics-e598a85f8lgb\",\r\n        \"docs-e598a85f843b\",\r\n        \"icons-e598a85f843b\",\r\n        \"foods-e598a85f843b\",\r\n        \"temps-e598a85f843b\",\r\n        \"rc1-e598a85f843b\",\r\n        \"rc2-e598a85f843b\",\r\n        \"rc3-e598a85f843b\",\r\n        \"rc4-e598a85f843b\",\r\n        \"rc5-e598a85f843b\",\r\n        \"rc6-e598a85f843b\",\r\n        \"rc7-e598a85f843b\",\r\n        \"rc8-e598a85f843b\",\r\n        \"rc9-e598a85f843b\",\r\n        \"rc10-e598a85f843b\",\r\n      ],\r\n      childrenCount: 5,\r\n    },\r\n\r\n    \"images-e598a85f843c\": {\r\n      id: \"images-e598a85f843c\",\r\n      name: \"Images\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"videos-s9514a3d74d57\": {\r\n      id: \"videos-s9514a3d74d57\",\r\n      name: \"Videos\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"voiceOvers-e598a85f84gb\": {\r\n      id: \"voiceOvers-e598a85f84gb\",\r\n      name: \"Voice Overs\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"musics-e598a85f8lgb\": {\r\n      id: \"musics-e598a85f8lgb\",\r\n      name: \"Musics\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"docs-e598a85f843b\": {\r\n      id: \"docs-e598a85f843b\",\r\n      name: \"Document\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"icons-e598a85f843b\": {\r\n      id: \"icons-e598a85f843b\",\r\n      name: \"Icons\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"foods-e598a85f843b\": {\r\n      id: \"foods-e598a85f843b\",\r\n      name: \"Foods\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"temps-e598a85f843b\": {\r\n      id: \"temps-e598a85f843b\",\r\n      name: \"Temps\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n\r\n    \"rc1-e598a85f843b\": {\r\n      id: \"rc1-e598a85f843b\",\r\n      name: \"RC001\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc2-e598a85f843b\": {\r\n      id: \"rc2-e598a85f843b\",\r\n      name: \"RC002\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc3-e598a85f843b\": {\r\n      id: \"rc3-e598a85f843b\",\r\n      name: \"RC003\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc4-e598a85f843b\": {\r\n      id: \"rc4-e598a85f843b\",\r\n      name: \"RC004\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc5-e598a85f843b\": {\r\n      id: \"rc5-e598a85f843b\",\r\n      name: \"RC005\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc6-e598a85f843b\": {\r\n      id: \"rc6-e598a85f843b\",\r\n      name: \"RC006\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc7-e598a85f843b\": {\r\n      id: \"rc7-e598a85f843b\",\r\n      name: \"RC007\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc8-e598a85f843b\": {\r\n      id: \"rc8-e598a85f843b\",\r\n      name: \"RC008\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc9-e598a85f843b\": {\r\n      id: \"rc9-e598a85f843b\",\r\n      name: \"RC009\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n    \"rc10-e598a85f843b\": {\r\n      id: \"rc10-e598a85f843b\",\r\n      name: \"RC010\",\r\n      isDir: true,\r\n      parentId: \"qwerty123456\",\r\n      childrenIds: [],\r\n    },\r\n  });\r\n  const [currentFolderId, setCurrentFolderId] = useState(\"qwerty123456\");\r\n  const [currentFolderName, setCurrentFolderName] = useState(\"Media Manager\");\r\n  const currentFolderIdRef = useRef(currentFolderId);\r\n\r\n  useEffect(() => {\r\n    setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n    getAllMedia();\r\n    currentFolderIdRef.current = currentFolderId;\r\n  }, [currentFolderId]);\r\n\r\n  // get all videos from backend\r\n  const getAllMedia = async () => {\r\n    const videoFiles = await getAllVideos();\r\n    const imageFiles = await getAllImages();\r\n    const docFiles = await getAllDocs();\r\n    const voiceOverFiles = await getAllVoiceOvers();\r\n    const musicFiles = await getAllMusics();\r\n    // new folders\r\n    const iconFiles = await getAllIcons();\r\n    const foodFiles = await getAllFoods();\r\n    const tempFiles = await getAllTemps();\r\n\r\n    // for rc folders\r\n    const rc1Files = await getAllRcFiles(\"rc1\");\r\n    const rc2Files = await getAllRcFiles(\"rc2\");\r\n    const rc3Files = await getAllRcFiles(\"rc3\");\r\n    const rc4Files = await getAllRcFiles(\"rc4\");\r\n    const rc5Files = await getAllRcFiles(\"rc5\");\r\n    const rc6Files = await getAllRcFiles(\"rc6\");\r\n    const rc7Files = await getAllRcFiles(\"rc7\");\r\n    const rc8Files = await getAllRcFiles(\"rc8\");\r\n    const rc9Files = await getAllRcFiles(\"rc9\");\r\n    const rc10Files = await getAllRcFiles(\"rc10\");\r\n\r\n    const musicIds = musicFiles ? musicFiles.musics.map((f) => f._id) : [];\r\n    const videoIds = videoFiles ? videoFiles.videos.map((f) => f._id) : [];\r\n    const imageIds = imageFiles ? imageFiles.images.map((f) => f._id) : [];\r\n    const docIds = docFiles ? docFiles.docs.map((f) => f._id) : [];\r\n    const voiceOverIds = voiceOverFiles\r\n      ? voiceOverFiles.voiceOvers.map((f) => f._id)\r\n      : [];\r\n    // new folders\r\n    const iconIds = iconFiles ? iconFiles.files.map((f) => f._id) : [];\r\n    const foodIds = foodFiles ? foodFiles.files.map((f) => f._id) : [];\r\n    const tempIds = tempFiles ? tempFiles.files.map((f) => f._id) : [];\r\n    // rc folders\r\n    const rc1Ids = rc1Files ? rc1Files.files.map((f) => f._id) : [];\r\n    const rc2Ids = rc2Files ? rc2Files.files.map((f) => f._id) : [];\r\n    const rc3Ids = rc3Files ? rc3Files.files.map((f) => f._id) : [];\r\n    const rc4Ids = rc4Files ? rc4Files.files.map((f) => f._id) : [];\r\n    const rc5Ids = rc5Files ? rc5Files.files.map((f) => f._id) : [];\r\n    const rc6Ids = rc6Files ? rc6Files.files.map((f) => f._id) : [];\r\n    const rc7Ids = rc7Files ? rc7Files.files.map((f) => f._id) : [];\r\n    const rc8Ids = rc8Files ? rc8Files.files.map((f) => f._id) : [];\r\n    const rc9Ids = rc9Files ? rc9Files.files.map((f) => f._id) : [];\r\n    const rc10Ids = rc10Files ? rc10Files.files.map((f) => f._id) : [];\r\n\r\n    const musicObjects = musicIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: musicFiles.musics[i].filename,\r\n          id: id,\r\n          link: musicFiles.musics[i].filelink,\r\n          parent: \"musics-e598a85f8lgb\",\r\n        },\r\n      };\r\n    });\r\n    const docObjects = docIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: docFiles.docs[i].filename,\r\n          id: id,\r\n          link: docFiles.docs[i].filelink,\r\n          parent: \"docs-e598a85f843b\",\r\n        },\r\n      };\r\n    });\r\n    const videoObjects = videoIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: videoFiles.videos[i].filename,\r\n          id: id,\r\n          link: videoFiles.videos[i].filelink,\r\n          parent: \"videos-s9514a3d74d57\",\r\n        },\r\n      };\r\n    });\r\n    const imageObjects = imageIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: imageFiles.images[i].filename,\r\n          id: id,\r\n          link: imageFiles.images[i].filelink,\r\n          parent: \"images-e598a85f843c\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${imageFiles.images[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n\r\n    const voiceOverObjects = voiceOverIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: voiceOverFiles.voiceOvers[i].filename,\r\n          id: id,\r\n          link: voiceOverFiles.voiceOvers[i].filelink,\r\n          parent: \"voiceOvers-e598a85f84gb\",\r\n        },\r\n      };\r\n    });\r\n\r\n    // new folder\r\n    const iconObjects = iconIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: iconFiles.files[i].filename,\r\n          id: id,\r\n          link: iconFiles.files[i].filelink,\r\n          parent: \"icons-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${iconFiles.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n\r\n    const foodObjects = foodIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: foodFiles.files[i].filename,\r\n          id: id,\r\n          link: foodFiles.files[i].filelink,\r\n          parent: \"foods-e598a85f843b\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${foodFiles.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n\r\n    const tempObjects = tempIds.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: tempFiles.files[i].filename,\r\n          id: id,\r\n          link: tempFiles.files[i].filelink,\r\n          parent: \"temps-e598a85f843b\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${tempFiles.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n\r\n    const rc1Objects = rc1Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc1Files.files[i].filename,\r\n          id: id,\r\n          link: rc1Files.files[i].filelink,\r\n          parent: \"rc1-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc1Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n\r\n    const rc2Objects = rc2Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc2Files.files[i].filename,\r\n          id: id,\r\n          link: rc2Files.files[i].filelink,\r\n          parent: \"rc2-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc2Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n\r\n    const rc3Objects = rc3Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc3Files.files[i].filename,\r\n          id: id,\r\n          link: rc3Files.files[i].filelink,\r\n          parent: \"rc3-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc3Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n    const rc4Objects = rc4Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc4Files.files[i].filename,\r\n          id: id,\r\n          link: rc4Files.files[i].filelink,\r\n          parent: \"rc4-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc4Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n    const rc5Objects = rc5Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc5Files.files[i].filename,\r\n          id: id,\r\n          link: rc5Files.files[i].filelink,\r\n          parent: \"rc5-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc5Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n    const rc6Objects = rc6Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc6Files.files[i].filename,\r\n          id: id,\r\n          link: rc6Files.files[i].filelink,\r\n          parent: \"rc6-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc6Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n    const rc7Objects = rc7Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc7Files.files[i].filename,\r\n          id: id,\r\n          link: rc7Files.files[i].filelink,\r\n          parent: \"rc7-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc7Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n    const rc8Objects = rc8Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc8Files.files[i].filename,\r\n          id: id,\r\n          link: rc8Files.files[i].filelink,\r\n          parent: \"rc8-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc8Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n    const rc9Objects = rc9Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc9Files.files[i].filename,\r\n          id: id,\r\n          link: rc9Files.files[i].filelink,\r\n          parent: \"rc9-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc9Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n    const rc10Objects = rc10Ids.map((id, i) => {\r\n      return {\r\n        [id]: {\r\n          name: rc10Files.files[i].filename,\r\n          id: id,\r\n          link: rc10Files.files[i].filelink,\r\n          parent: \"rc10-e598a85f84gb\",\r\n          thumbnailUrl: `${process.env.REACT_APP_SERVER}/api${rc10Files.files[i].filelink}`,\r\n        },\r\n      };\r\n    });\r\n\r\n    setFileMap((currentFileMap) => {\r\n      var newFileMap = { ...currentFileMap };\r\n      newFileMap[\"videos-s9514a3d74d57\"] = {\r\n        ...newFileMap[\"videos-s9514a3d74d57\"],\r\n        childrenIds: videoIds,\r\n      };\r\n      newFileMap[\"musics-e598a85f8lgb\"] = {\r\n        ...newFileMap[\"musics-e598a85f8lgb\"],\r\n        childrenIds: musicIds,\r\n      };\r\n      newFileMap[\"images-e598a85f843c\"] = {\r\n        ...newFileMap[\"images-e598a85f843c\"],\r\n        childrenIds: imageIds,\r\n      };\r\n\r\n      newFileMap[\"docs-e598a85f843b\"] = {\r\n        ...newFileMap[\"docs-e598a85f843b\"],\r\n        childrenIds: docIds,\r\n      };\r\n      newFileMap[\"voiceOvers-e598a85f84gb\"] = {\r\n        ...newFileMap[\"voiceOvers-e598a85f84gb\"],\r\n        childrenIds: voiceOverIds,\r\n      };\r\n      //new\r\n      newFileMap[\"icons-e598a85f843b\"] = {\r\n        ...newFileMap[\"icons-e598a85f843b\"],\r\n        childrenIds: iconIds,\r\n      };\r\n      newFileMap[\"foods-e598a85f843b\"] = {\r\n        ...newFileMap[\"foods-e598a85f843b\"],\r\n        childrenIds: foodIds,\r\n      };\r\n      newFileMap[\"temps-e598a85f843b\"] = {\r\n        ...newFileMap[\"temps-e598a85f843b\"],\r\n        childrenIds: tempIds,\r\n      };\r\n\r\n      newFileMap[\"temps-e598a85f843b\"] = {\r\n        ...newFileMap[\"temps-e598a85f843b\"],\r\n        childrenIds: tempIds,\r\n      };\r\n\r\n      newFileMap[\"rc1-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc1-e598a85f843b\"],\r\n        childrenIds: rc1Ids,\r\n      };\r\n\r\n      newFileMap[\"rc2-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc2-e598a85f843b\"],\r\n        childrenIds: rc2Ids,\r\n      };\r\n\r\n      newFileMap[\"rc3-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc3-e598a85f843b\"],\r\n        childrenIds: rc3Ids,\r\n      };\r\n\r\n      newFileMap[\"rc4-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc4-e598a85f843b\"],\r\n        childrenIds: rc4Ids,\r\n      };\r\n\r\n      newFileMap[\"rc5-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc5-e598a85f843b\"],\r\n        childrenIds: rc5Ids,\r\n      };\r\n\r\n      newFileMap[\"rc6-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc6-e598a85f843b\"],\r\n        childrenIds: rc6Ids,\r\n      };\r\n\r\n      newFileMap[\"rc7-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc7-e598a85f843b\"],\r\n        childrenIds: rc7Ids,\r\n      };\r\n\r\n      newFileMap[\"rc8-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc8-e598a85f843b\"],\r\n        childrenIds: rc8Ids,\r\n      };\r\n\r\n      newFileMap[\"rc9-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc9-e598a85f843b\"],\r\n        childrenIds: rc9Ids,\r\n      };\r\n\r\n      newFileMap[\"rc10-e598a85f843b\"] = {\r\n        ...newFileMap[\"rc10-e598a85f843b\"],\r\n        childrenIds: rc10Ids,\r\n      };\r\n\r\n      musicObjects.forEach((obj, i) => {\r\n        newFileMap[musicIds[i]] = { ...obj[musicIds[i]] };\r\n      });\r\n      imageObjects.forEach((obj, i) => {\r\n        newFileMap[imageIds[i]] = { ...obj[imageIds[i]] };\r\n      });\r\n      videoObjects.forEach((obj, i) => {\r\n        newFileMap[videoIds[i]] = { ...obj[videoIds[i]] };\r\n      });\r\n      docObjects.forEach((obj, i) => {\r\n        newFileMap[docIds[i]] = { ...obj[docIds[i]] };\r\n      });\r\n      voiceOverObjects.forEach((obj, i) => {\r\n        newFileMap[voiceOverIds[i]] = { ...obj[voiceOverIds[i]] };\r\n      });\r\n      // new\r\n      foodObjects.forEach((obj, i) => {\r\n        newFileMap[foodIds[i]] = { ...obj[foodIds[i]] };\r\n      });\r\n      iconObjects.forEach((obj, i) => {\r\n        newFileMap[iconIds[i]] = { ...obj[iconIds[i]] };\r\n      });\r\n      tempObjects.forEach((obj, i) => {\r\n        newFileMap[tempIds[i]] = { ...obj[tempIds[i]] };\r\n      });\r\n      //rc\r\n      rc1Objects.forEach((obj, i) => {\r\n        newFileMap[rc1Ids[i]] = { ...obj[rc1Ids[i]] };\r\n      });\r\n      rc2Objects.forEach((obj, i) => {\r\n        newFileMap[rc2Ids[i]] = { ...obj[rc2Ids[i]] };\r\n      });\r\n      rc3Objects.forEach((obj, i) => {\r\n        newFileMap[rc3Ids[i]] = { ...obj[rc3Ids[i]] };\r\n      });\r\n      rc4Objects.forEach((obj, i) => {\r\n        newFileMap[rc4Ids[i]] = { ...obj[rc4Ids[i]] };\r\n      });\r\n      rc5Objects.forEach((obj, i) => {\r\n        newFileMap[rc5Ids[i]] = { ...obj[rc5Ids[i]] };\r\n      });\r\n      rc6Objects.forEach((obj, i) => {\r\n        newFileMap[rc6Ids[i]] = { ...obj[rc6Ids[i]] };\r\n      });\r\n      rc7Objects.forEach((obj, i) => {\r\n        newFileMap[rc7Ids[i]] = { ...obj[rc7Ids[i]] };\r\n      });\r\n      rc8Objects.forEach((obj, i) => {\r\n        newFileMap[rc8Ids[i]] = { ...obj[rc8Ids[i]] };\r\n      });\r\n      rc9Objects.forEach((obj, i) => {\r\n        newFileMap[rc9Ids[i]] = { ...obj[rc9Ids[i]] };\r\n      });\r\n      rc10Objects.forEach((obj, i) => {\r\n        newFileMap[rc10Ids[i]] = { ...obj[rc10Ids[i]] };\r\n      });\r\n\r\n      return newFileMap;\r\n    });\r\n  };\r\n\r\n  // Function that will be called when user deletes files either using the toolbar\r\n  // button or `Delete` key.\r\n  const deleteFiles = useCallback((files) => {\r\n    console.log(files);\r\n\r\n    setFileMap((currentFileMap) => {\r\n      // Create a copy of the file map to make sure we don't mutate it.\r\n      const newFileMap = { ...currentFileMap };\r\n\r\n      files.forEach((file) => {\r\n        // Delete file from the file map.\r\n        delete newFileMap[file.id];\r\n\r\n        // Update the parent folder to make sure it doesn't try to load the\r\n        // file we just deleted.\r\n        if (file.parentId) {\r\n          const parent = newFileMap[file.parentId];\r\n          const newChildrenIds = parent.childrenIds.filter(\r\n            (id) => id !== file.id\r\n          );\r\n          newFileMap[file.parentId] = {\r\n            ...parent,\r\n            childrenIds: newChildrenIds,\r\n            childrenCount: newChildrenIds.length,\r\n          };\r\n        }\r\n      });\r\n\r\n      return newFileMap;\r\n    });\r\n  }, []);\r\n\r\n  return {\r\n    getAllMedia,\r\n    fileMap,\r\n    currentFolderId,\r\n    setCurrentFolderId,\r\n    setCurrentFolderName,\r\n    currentFolderName,\r\n    deleteFiles,\r\n  };\r\n};\r\n\r\nexport const useFiles = (fileMap, currentFolderId) => {\r\n  return useMemo(() => {\r\n    const currentFolder = fileMap[currentFolderId];\r\n    const childrenIds = currentFolder.childrenIds;\r\n    const files = childrenIds.map((fileId) => fileMap[fileId]);\r\n    return files;\r\n  }, [currentFolderId, fileMap]);\r\n};\r\n\r\nexport const useFolderChain = (fileMap, currentFolderId) => {\r\n  return useMemo(() => {\r\n    const currentFolder = fileMap[currentFolderId];\r\n\r\n    const folderChain = [currentFolder];\r\n\r\n    let parentId = currentFolder.parentId;\r\n    while (parentId) {\r\n      const parentFile = fileMap[parentId];\r\n      if (parentFile) {\r\n        folderChain.unshift(parentFile);\r\n        parentId = parentFile.parentId;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return folderChain;\r\n  }, [currentFolderId, fileMap]);\r\n};\r\n\r\nexport const useFileActionHandler = (\r\n  setCurrentFolderName,\r\n  setCurrentFolderId,\r\n  deleteFiles,\r\n  moveFiles,\r\n  createFolder,\r\n  setOpenUploadModal,\r\n  mediaActions,\r\n  mediaType,\r\n  setRemoteMediaManagerVisible,\r\n  checkForType\r\n) => {\r\n  return useCallback(\r\n    async (data) => {\r\n      if (data.id === ChonkyActions.OpenFiles.id) {\r\n        const { targetFile, files } = data.payload;\r\n        const fileToOpen = targetFile ?? files[0];\r\n        if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\r\n          setCurrentFolderId(fileToOpen.id);\r\n          setCurrentFolderName(fileToOpen.name);\r\n          console.log(\"ads\", fileToOpen);\r\n          return;\r\n        }\r\n        const [media, setMedia] = mediaActions;\r\n        console.log(\"media actions\", mediaActions);\r\n        console.log(\"media type\", mediaType);\r\n        console.log(\"target file parent\", targetFile);\r\n        // here yo\r\n        if (checkForType(targetFile.name, mediaType)) {\r\n          console.log(mediaType);\r\n          if (mediaActions[2]) {\r\n            // check if 3rd option says that there are multiple images\r\n            if (mediaActions[2] === \"multiple\") {\r\n              setMedia([\r\n                ...media,\r\n                { name: targetFile.name, link: targetFile.link },\r\n              ]);\r\n              showActionNotification(data);\r\n              setRemoteMediaManagerVisible(false);\r\n              return;\r\n            }\r\n            setMedia(mediaActions[2], {\r\n              name: targetFile.name,\r\n              link: targetFile.link,\r\n            });\r\n            showActionNotification(data);\r\n            setRemoteMediaManagerVisible(false);\r\n            return;\r\n          }\r\n          setMedia({\r\n            name: targetFile.name,\r\n            link: targetFile.link,\r\n          });\r\n          showActionNotification(data);\r\n          setRemoteMediaManagerVisible(false);\r\n          return;\r\n        } else {\r\n          console.log(\"media\", mediaType);\r\n          window.alert(\"Wrong media type selected\");\r\n        }\r\n      } else if (data.id === ChonkyActions.DeleteFiles.id) {\r\n        console.log(data.state.selectedFilesForAction);\r\n        const deletedFiles = await deleteMediaFiles(\r\n          data.state.selectedFilesForAction\r\n        );\r\n        // console.log(deletedFiles);\r\n        if (deletedFiles.status === \"success\") {\r\n          deleteFiles(deletedFiles.deleted);\r\n        }\r\n      } else if (data.id === ChonkyActions.UploadFiles.id) {\r\n        setOpenUploadModal(true);\r\n      } else if (data.id === \"open_files\") {\r\n      }\r\n    },\r\n    [createFolder, deleteFiles, moveFiles, setCurrentFolderId]\r\n  );\r\n};\r\n\r\nfunction checkForType(file, fileType) {\r\n  var parts = file.split(\".\");\r\n  var ext = parts[parts.length - 1];\r\n\r\n  if (fileType === \"images\") {\r\n    switch (ext.toLowerCase()) {\r\n      case \"png\":\r\n      case \"jpeg\":\r\n      case \"jpg\":\r\n      case \"tiff\":\r\n        // etc\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n  } else if (fileType === \"videos\") {\r\n    switch (ext.toLowerCase()) {\r\n      case \"m4v\":\r\n      case \"avi\":\r\n      case \"mpg\":\r\n      case \"mp4\":\r\n        // etc\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n  } else if (fileType === \"docs\") {\r\n    const isPdf = ext.toLowerCase() === \"pdf\";\r\n    return isPdf;\r\n  } else if (fileType === \"voiceOvers\") {\r\n    switch (ext.toLowerCase()) {\r\n      case \"mp3\":\r\n      case \"mp4\":\r\n        // etc\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n  } else if (fileType === \"musics\") {\r\n    switch (ext.toLowerCase()) {\r\n      case \"mp3\":\r\n      case \"mp4\":\r\n        // etc\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const VFSBrowser = React.memo((props) => {\r\n  const [openUploadModal, setOpenUploadModal] = useState(false);\r\n  const {\r\n    getAllMedia,\r\n    fileMap,\r\n    currentFolderId,\r\n    setCurrentFolderId,\r\n    setCurrentFolderName,\r\n    currentFolderName,\r\n    resetFileMap,\r\n    deleteFiles,\r\n    moveFiles,\r\n    createFolder,\r\n  } = useCustomFileMap();\r\n  const files = useFiles(fileMap, currentFolderId);\r\n  const folderChain = useFolderChain(fileMap, currentFolderId);\r\n  const mediaActions = props.actions;\r\n  const mediaType = props.mediaType;\r\n  const setRemoteMediaManagerVisible = props.setRemoteMediaManagerVisible;\r\n  const handleFileAction = useFileActionHandler(\r\n    setCurrentFolderName,\r\n    setCurrentFolderId,\r\n    deleteFiles,\r\n    moveFiles,\r\n    createFolder,\r\n    setOpenUploadModal,\r\n    mediaActions,\r\n    mediaType,\r\n    setRemoteMediaManagerVisible,\r\n    checkForType\r\n  );\r\n  const fileActions = useMemo(\r\n    () => [\r\n      // ChonkyActions.CreateFolder,\r\n      ChonkyActions.DeleteFiles,\r\n      ChonkyActions.UploadFiles,\r\n    ],\r\n    []\r\n  );\r\n\r\n  const thumbnailGenerator = useCallback(\r\n    (file) => (file.thumbnailUrl ? file.thumbnailUrl : null),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: \"100vh\" }}>\r\n        <MediaFileUploader\r\n          currentFolderName={currentFolderName}\r\n          visible={openUploadModal}\r\n          getAllMedia={getAllMedia}\r\n          setVisible={setOpenUploadModal}\r\n        />\r\n        <FullFileBrowser\r\n          files={files}\r\n          folderChain={folderChain}\r\n          fileActions={fileActions}\r\n          onFileAction={handleFileAction}\r\n          thumbnailGenerator={thumbnailGenerator}\r\n          {...props}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\ChallengeProfile\\ChallengeProfileWeb.js",["561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576"],"import \"../../assets/challengeProfileFigma.css\";\r\nimport Navbar from \"../Navbar\";\r\nimport ChallengeProfileSubtract from \"../../assets/icons/challenge-profile-subtract.svg\";\r\nimport ChalleengeProfileFether from \"../../images/challenge-profile-cover-feather.svg\";\r\nimport StarFilled from \"../../assets/icons/star-orange.svg\";\r\nimport StartTransparent from \"../../assets/icons/star-transparent.svg\";\r\nimport DownArrow from \"../../assets/icons/down-orange-arrow.svg\";\r\n\r\nfunction ChallengeProfileWeb(props) {\r\n  const {\r\n    challengeName,\r\n    reviews,\r\n    thumbnailLink,\r\n    challengeGoals,\r\n    description,\r\n    trainers,\r\n    body,\r\n    weeks,\r\n    results,\r\n    informationList,\r\n  } = props;\r\n\r\n  function getEquipmentsFromWorkouts(weeks) {\r\n    const workouts =\r\n      weeks &&\r\n      weeks.map((w) => {\r\n        return w.workouts;\r\n      });\r\n    const merged = [].concat.apply([], workouts);\r\n    const relatedEquipments = merged.map((m) => m.relatedEquipments);\r\n    return [].concat.apply([], relatedEquipments).map((body) => (\r\n      <div\r\n        style={{\r\n          position: \"relative\",\r\n          top: 0,\r\n          backgroundColor: \"#283443\",\r\n          padding: \"10px\",\r\n          height: \"33px\",\r\n          marginRight: \"5px\",\r\n        }}\r\n      >\r\n        <div\r\n          className=\"kettlebell valign-text-middle poppins-light-white-14px\"\r\n          style={{ textAlign: \"center\" }}\r\n        >\r\n          {body.name}\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div style={{ background: \"#171e27\" }}>\r\n      <Navbar />\r\n      {console.log(\"prolpsssssssssssssss\", props)}\r\n      <div\r\n        class=\"container-center-horizontal\"\r\n        style={{ border: \"3px solid red\" }}\r\n      >\r\n        <div\r\n          className=\"challenge-web-unauthorized-user screen\"\r\n          style={{ border: \"3px solid green\" }}\r\n        >\r\n          <div\r\n            className=\"overlap-group17\"\r\n            style={{ border: \"3px solid yellow\" }}\r\n          >\r\n            <div className=\"overlap-group\" style={{ border: \"3px solid blue\" }}>\r\n              <img\r\n                className=\"cover-photo\"\r\n                src={`${process.env.REACT_APP_SERVER}/api${thumbnailLink}`}\r\n              />\r\n              <img className=\"cover-feather\" src={ChalleengeProfileFether} />\r\n\r\n              <img className=\"subtract\" src={ChallengeProfileSubtract} />\r\n              <div\r\n                className=\"cover-content\"\r\n                style={{ border: \"3px solid blue\" }}\r\n              >\r\n                <h1 className=\"text-4 valign-text-middle\">{challengeName}</h1>\r\n                <div className=\"overlap-group11\">\r\n                  <div className=\"rectangle-1863\"></div>\r\n                </div>\r\n                <div className=\"flex-row\">\r\n                  <img className=\"stars\" src={StarFilled} />\r\n                  <div className=\"address valign-text-middle poppins-medium-sandy-brown-14px\">\r\n                    {reviews && reviews.length} REVIEWS\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex-row-1\">\r\n                  <div className=\"overlap-group9\">\r\n                    <div className=\"overlap-group7-1\">\r\n                      <img className=\"polygon-11\" src={\"polygon11\"} />\r\n                      <img className=\"group-9892\" src={\"group9892\"} />\r\n                    </div>\r\n                    <div className=\"gemiddeld valign-text-middle poppins-normal-white-16px\">\r\n                      gemiddeld\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"overlap-group10\">\r\n                    <div className=\"kort valign-text-middle poppins-normal-white-16px\">\r\n                      kort\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <p className=\"text-5 poppins-normal-white-16px\">\r\n                  {description}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"rectangle-1828\"></div>\r\n            <div className=\"rectangle-1868\"></div>\r\n            <div className=\"rectangle-1860\"></div>\r\n            <div className=\"rectangle-1866\"></div>\r\n            <div className=\"rectangle-1837\"></div>\r\n\r\n            <div className=\"subscription\" style={{ border: \"3px solid red\" }}>\r\n              <div className=\"flex-row-2\">\r\n                <div className=\"subscription-1 poppins-light-sonic-silver-14px\">\r\n                  SUBSCRIPTION\r\n                </div>\r\n                <img className=\"help-icon\" src={\"helpIcon\"} />\r\n                <img className=\"vector-2\" src={\"vector2\"} />\r\n              </div>\r\n              <div\r\n                className=\"flex-row-3\"\r\n                style={{ border: \"3px solid yellow\" }}\r\n              >\r\n                <div className=\"flex-col\">\r\n                  <p className=\"text-1\">Get access to all features</p>\r\n                  <div className=\"overlap-group14\">\r\n                    <div className=\"one-time-challenge poppins-medium-white-20px\">\r\n                      One-Time Challenge\r\n                    </div>\r\n                    <div className=\"price poppins-medium-white-28px\">€35</div>\r\n                    <div className=\"no-subscription poppins-light-white-14px\">\r\n                      No subscription\r\n                    </div>\r\n                    <div className=\"billed-once poppins-light-star-dust-10px\">\r\n                      Billed once\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"overlap-group13 border-2px-tango\">\r\n                  <div className=\"repeat-save poppins-medium-white-20px\">\r\n                    Repeat & Save\r\n                  </div>\r\n                  <div className=\"overlap-group8-1\">\r\n                    <div className=\"save-up-to poppins-medium-white-10px\">\r\n                      <span className=\"poppins-medium-white-10px\">\r\n                        Save up to\r\n                      </span>\r\n                      <span className=\"span1 poppins-medium-white-16px\">\r\n                        60%\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex-row-4\">\r\n                    <div className=\"price-1 poppins-medium-white-29px\">\r\n                      €4.5\r\n                    </div>\r\n                    <div className=\"week poppins-light-white-10px\">/Week</div>\r\n                  </div>\r\n                  <div className=\"address-1 poppins-light-white-14px\">\r\n                    12 months plan\r\n                  </div>\r\n                  <div className=\"billed-monthly poppins-light-star-dust-10px\">\r\n                    Billed monthly\r\n                  </div>\r\n                </div>\r\n                <div className=\"overlap-group16\">\r\n                  <div className=\"repeat-save-1 poppins-medium-white-21px\">\r\n                    Repeat & Save\r\n                  </div>\r\n                  <div className=\"overlap-group7-2\">\r\n                    <div className=\"save-up-to poppins-medium-white-10px\">\r\n                      <span className=\"poppins-medium-white-10px\">\r\n                        Save up to\r\n                      </span>\r\n                      <span className=\"span1 poppins-medium-white-16px\">\r\n                        30%\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex-row-5\">\r\n                    <div className=\"price-2 poppins-medium-white-29px\">€6</div>\r\n                    <div className=\"week-1 poppins-light-white-10px\">/Week</div>\r\n                  </div>\r\n                  <div className=\"address-2 poppins-light-white-14px\">\r\n                    3 months plan\r\n                  </div>\r\n                  <div className=\"billed-monthly-1 poppins-light-star-dust-10px-2\">\r\n                    Billed monthly\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex-col-1\">\r\n                <div\r\n                  className=\"overlap-group15\"\r\n                  style={{ backgroundImage: `url(${\"overlapGroup15\"})` }}\r\n                >\r\n                  <div className=\"start-now-1 poppins-medium-white-16px\">\r\n                    START NOW\r\n                  </div>\r\n                </div>\r\n                <div className=\"rectangle-1869\"></div>\r\n              </div>\r\n            </div>\r\n            {trainers &&\r\n              trainers.map((t) => (\r\n                <div className=\"overlap-group6\" key={t._id}>\r\n                  <img\r\n                    className=\"rectangle-1859\"\r\n                    src={`${process.env.REACT_APP_SERVER}/api${t.avatarLink}`}\r\n                  />\r\n                  <div className=\"name poppins-normal-crusta-17px\">\r\n                    {t.username}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n            <div className=\"poppins-light-sonic-silver-14px\">TRAINERS</div>\r\n            <div className=\"goals poppins-light-sonic-silver-14px\">GOALS</div>\r\n            <div className=\"body-focus poppins-light-sonic-silver-14px\">\r\n              BODY FOCUS\r\n            </div>\r\n            <div className=\"equipment poppins-light-sonic-silver-14px\">\r\n              EQUIPMENT\r\n            </div>\r\n            <div className=\"results poppins-light-sonic-silver-14px\">\r\n              RESULTS\r\n            </div>\r\n            <div className=\"info poppins-light-sonic-silver-14px\">INFO</div>\r\n            <div\r\n              className=\"overlap-group3\"\r\n              style={{\r\n                display: \"flex\",\r\n                backgroundColor: \"transparent\",\r\n                padding: \"0\",\r\n                border: \"3px solid red\",\r\n              }}\r\n            >\r\n              {challengeGoals &&\r\n                challengeGoals.map((c) => (\r\n                  <div\r\n                    key={c._id}\r\n                    style={{\r\n                      position: \"relative\",\r\n                      top: 0,\r\n                      backgroundColor: \"#283443\",\r\n                      padding: \"10px\",\r\n                      height: \"33px\",\r\n                      marginRight: \"5px\",\r\n                    }}\r\n                  >\r\n                    <div className=\"conditie valign-text-middle poppins-light-white-14px\">\r\n                      {c.name}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div\r\n              className=\"overlap-group1\"\r\n              style={{\r\n                display: \"flex\",\r\n                backgroundColor: \"transparent\",\r\n                padding: \"0\",\r\n                border: \"3px solid red\",\r\n              }}\r\n            >\r\n              {body &&\r\n                body.map((b) => (\r\n                  <div\r\n                    key={b._id}\r\n                    style={{\r\n                      position: \"relative\",\r\n                      top: 0,\r\n                      backgroundColor: \"#283443\",\r\n                      padding: \"10px\",\r\n                      height: \"33px\",\r\n                      marginRight: \"5px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"heel-lichaam valign-text-middle poppins-light-white-14px\"\r\n                      style={{ textAlign: \"center\" }}\r\n                    >\r\n                      {b.name}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div\r\n              className=\"overlap-group5\"\r\n              style={{\r\n                display: \"flex\",\r\n                backgroundColor: \"transparent\",\r\n                padding: \"0\",\r\n                border: \"3px solid red\",\r\n              }}\r\n            >\r\n              {weeks && getEquipmentsFromWorkouts(weeks)}\r\n            </div>\r\n            <p\r\n              className=\"text-6 poppins-light-white-14px\"\r\n              style={{ border: \"3px solid blue\" }}\r\n            >\r\n              {results}\r\n            </p>\r\n            <p\r\n              className=\"address-3 poppins-light-white-14px\"\r\n              style={{ border: \"3px solid red\" }}\r\n            >\r\n              {informationList &&\r\n                informationList.map((m) => (\r\n                  <>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        marginLeft: \"-20px\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                      key={m._id}\r\n                    >\r\n                      <img\r\n                        style={{ height: \"16px\" }}\r\n                        src={`${process.env.REACT_APP_SERVER}/api${m.icon}`}\r\n                        alt=\"\"\r\n                      />\r\n                      <span\r\n                        className=\"font-paragraph-white\"\r\n                        style={{ marginLeft: \"5px\" }}\r\n                      >\r\n                        {m.info}\r\n                      </span>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        marginLeft: \"-20px\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                      key={m._id}\r\n                    >\r\n                      <img\r\n                        style={{ height: \"16px\" }}\r\n                        src={`${process.env.REACT_APP_SERVER}/api${m.icon}`}\r\n                        alt=\"\"\r\n                      />\r\n                      <span\r\n                        className=\"font-paragraph-white\"\r\n                        style={{ marginLeft: \"5px\" }}\r\n                      >\r\n                        {m.info}\r\n                      </span>\r\n                    </div>\r\n                  </>\r\n                ))}\r\n              <div className=\"rectangle-1870\"></div>\r\n            </p>\r\n\r\n            <div\r\n              className=\"your-personal-journey\"\r\n              style={{ border: \"3px solid green\" }}\r\n            >\r\n              <div className=\"text-7 poppins-light-sonic-silver-14px\">\r\n                YOUR PERSONAL JOURNEY\r\n              </div>\r\n              <div className=\"week-1-1\">\r\n                <div className=\"overlap-group7-3\">\r\n                  <div className=\"flex-col-2\">\r\n                    <div\r\n                      className=\"overlap-group8-2\"\r\n                      style={{ backgroundImage: `url(${\"overlapGroup8\"})` }}\r\n                    >\r\n                      <div className=\"week-1-2 poppins-normal-white-14px\">\r\n                        WEEK 1\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"foundation-6-days poppins-light-white-16px\">\r\n                      FOUNDATION (6 DAYS)\r\n                    </div>\r\n                  </div>\r\n                  <img className=\"vector-1-1\" src={\"vector12\"} />\r\n                </div>\r\n              </div>\r\n              <div className=\"week-2\">\r\n                <div className=\"overlap-group9-1\">\r\n                  <div className=\"flex-row-6\">\r\n                    <div className=\"flex-col-3\">\r\n                      <div\r\n                        className=\"overlap-group7-4\"\r\n                        style={{ backgroundImage: `url(${\"overlapGroup7\"})` }}\r\n                      >\r\n                        <div className=\"week-2-1 poppins-normal-white-14px\">\r\n                          WEEK 2\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-8 poppins-light-white-16px\">\r\n                        INTEGRATION (5 DAYS)\r\n                      </div>\r\n                    </div>\r\n                    <img className=\"vector-2-1\" src={DownArrow} />\r\n                  </div>\r\n                  <p className=\"text-9 valign-text-middle poppins-light-silver-15px\">\r\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\r\n                    do eiusmod tempor incididunt ut labore et dolore magna\r\n                    aliqua.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"rectangle-1868-1\"></div>\r\n            </div>\r\n            <img className=\"info-icon-1\" src={\"infoIcon1\"} />\r\n            <img className=\"info-icon-2\" src={\"infoIcon2\"} />\r\n          </div>\r\n          <div className=\"comments-group\" style={{ border: \"3px solid green\" }}>\r\n            <div className=\"comments poppins-light-granite-gray-14px\">\r\n              COMMENTS\r\n            </div>\r\n            <div className=\"flex-row-7\">\r\n              <div className=\"flex-col-4\">\r\n                <img className=\"rectangle-1869-1\" src={\"rectangle1869\"} />\r\n                <img className=\"rectangle-1870-1\" src={\"rectangle1870\"} />\r\n              </div>\r\n              <div className=\"flex-col-5\">\r\n                <p className=\"name-1 poppins-light-white-16px\">\r\n                  \"Kim Me too, I love it!\r\n                </p>\r\n                <div className=\"apr-08-2021 poppins-light-gunsmoke-11px\">\r\n                  Apr, 08, 2021\r\n                </div>\r\n                <p className=\"filip-wow-i-like-it poppins-light-white-16px\">\r\n                  Filip Wow I like it\r\n                </p>\r\n                <div className=\"apr-03-2021 poppins-light-gunsmoke-11px\">\r\n                  Apr, 03, 2021\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-col-6\">\r\n              <div className=\"rectangle-1838\"></div>\r\n              <div className=\"overlap-group12\">\r\n                <div className=\"post-comment poppins-normal-tango-16px\">\r\n                  POST COMMENT\r\n                </div>\r\n                <div className=\"rectangle-1839 border-1px-tango\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChallengeProfileWeb;\r\n",["577","578"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\goals.js",[],["579","580"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\TextEditor.js",[],["581","582"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\EditTypeName.js",[],["583","584"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomExercisePanel.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\RecipeProfile.js",["585","586","587","588","589","590","591"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"../assets/trainerprofile.css\";\r\nimport \"../assets/home.css\";\r\nimport \"../assets/challengeProfile.css\";\r\nimport \"../assets/recipeProfile.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport {\r\n  StarOutlined,\r\n  UserOutlined,\r\n  ArrowRightOutlined,\r\n  LikeOutlined,\r\n  ClockCircleOutlined,\r\n  LoadingOutlined,\r\n  HeartFilled,\r\n} from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Avatar, Input, Modal, Rate } from \"antd\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  getRecipeById,\r\n  favouriteRecipeById,\r\n  addRecipeComment,\r\n} from \"../services/recipes\";\r\nimport { userInfoContext } from \"../contexts/UserStore\";\r\nimport ChallengeReviewModal from \"../components/Challenge/ChallengeReviewModal\";\r\nimport ReviewsModal from \"../components/Common/ReviewsModal\";\r\nimport moment from \"moment\";\r\nimport slug from \"elegant-slug\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nfunction RecipeProfile(props) {\r\n  const [allComments, setAllComments] = useState([]);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const [commentButtonLoading, setCommentButtomLoading] = useState(false);\r\n  const [userInfo, serUserInfo] = useContext(userInfoContext);\r\n  const [reviewOpen, setReviewOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [t] = useTranslation();\r\n  // eslint-disable-next-line\r\n  const [recipe, setRecipe] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    const id = props.match.params.id;\r\n    setLoading(true);\r\n    const res = await getRecipeById(id);\r\n    setAllComments(res.comments);\r\n    setRecipe(res);\r\n    setLoading(false);\r\n    console.log(res);\r\n  };\r\n  const postCommentToBackend = async () => {\r\n    setCommentButtomLoading(true);\r\n    const res = await addRecipeComment(recipe._id, commentText);\r\n\r\n    if (res) {\r\n      setAllComments(res.comments);\r\n    }\r\n    setCommentButtomLoading(false);\r\n    setCommentText(\"\");\r\n  };\r\n\r\n  const favouriteRecipe = async (id) => {\r\n    await favouriteRecipeById({ recipeId: id }, userInfo.id);\r\n  };\r\n  return loading ? (\r\n    <div className=\"center-inpage\">\r\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <Helmet>\r\n        <title>{`Realchallenge: ${recipe.name}`}</title>\r\n        <meta name=\"description\" content={recipe.description} />\r\n        <meta property=\"og:title\" content={recipe.name} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:description\" content={recipe.description} />\r\n        <meta\r\n          property=\"og:url\"\r\n          content={`http://localhost:3001/recipe/${slug(recipe.name)}/${\r\n            recipe._id\r\n          }`}\r\n        />\r\n        <meta name=\"author\" content=\"Realchallenge\" />\r\n      </Helmet>\r\n      <Navbar color=\"dark\" />\r\n      <ReviewsModal\r\n        visible={reviewOpen}\r\n        setVisible={setReviewOpen}\r\n        item={recipe}\r\n        type=\"recipes\"\r\n        fetchData={fetchData}\r\n      />\r\n      <div className=\"trainer-profile-container\">\r\n        <div\r\n          className=\"trainer-profile-container-column1\"\r\n          style={{\r\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${process.env.REACT_APP_SERVER}/api${recipe.image})`,\r\n            backgroundSize: \"cover\",\r\n            backgroundPosition: \"10% 10%\",\r\n          }}\r\n        >\r\n          <div className=\"profile-box\">\r\n            <div\r\n              className=\"challenge-profile-box-1\"\r\n              style={{ borderBottom: \"2px solid #222932\", textAlign: \"left\" }}\r\n            >\r\n              <h1\r\n                className=\"font-heading-white\"\r\n                style={{\r\n                  fontSize: \"4rem\",\r\n                }}\r\n              >\r\n                {recipe.name}\r\n              </h1>\r\n            </div>\r\n            <div className=\"challenge-profile-box-2\">\r\n              <div className=\"challenge-profile-box-2-rating\">\r\n                {console.log(\"rating\", recipe)}\r\n                <div style={{ padding: \"5px\" }}>\r\n                  <Rate value={recipe.rating} allowHalf disabled={true} />\r\n                  {/* {new Array(recipe.rating ? recipe.rating : 1)\r\n                    .fill(0)\r\n                    .map(() => (\r\n                      <StarOutlined\r\n                        style={{\r\n                          color: \"var(--color-orange)\",\r\n                          fontSize: \"2rem\",\r\n                        }}\r\n                      />\r\n                    ))} */}\r\n                </div>\r\n                <span onClick={() => setReviewOpen(true)}>\r\n                  {t(\"recipe_profile.reviews\")}\r\n                </span>\r\n                {localStorage.getItem(\"jwtToken\") ? (\r\n                  <div className=\"recipe-likes\">\r\n                    <HeartFilled\r\n                      onClick={() => favouriteRecipe(recipe._id)}\r\n                      style={{ fontSize: \"3rem\", cursor: \"pointer\" }}\r\n                    />{\" \"}\r\n                    {recipe.likes}\r\n                  </div>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </div>\r\n              <div className=\"challenge-profile-box-2-info\">\r\n                {recipe.mealTypes\r\n                  ? recipe.mealTypes.map((meal) => (\r\n                      <div\r\n                        className=\"challenge-profile-box-2-container\"\r\n                        style={{ opacity: \"0.7\" }}\r\n                      >\r\n                        {meal.name}\r\n                      </div>\r\n                    ))\r\n                  : \"\"}\r\n                {recipe.kCalPerPerson ? (\r\n                  <div\r\n                    className=\"challenge-profile-box-2-container\"\r\n                    style={{ opacity: \"0.7\" }}\r\n                  >\r\n                    {recipe.kCalPerPerson + \" KCAL\"}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n              <div className=\"challenge-profile-box-2-info\">\r\n                {recipe.prepTime ? (\r\n                  <div className=\"recipe-info-block\">\r\n                    <ClockCircleOutlined\r\n                      style={{ color: \"var(--color-orange)\" }}\r\n                    />{\" \"}\r\n                    {recipe.prepTime} {t(\"recipe_profile.minutes\")}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {recipe.persons ? (\r\n                  <div className=\"recipe-info-block\">\r\n                    <UserOutlined style={{ color: \"var(--color-orange)\" }} />{\" \"}\r\n                    {recipe.persons} {t(\"recipe_profile.persons\")}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"recipe-profile-container-column2\">\r\n          {/* hree we go */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              {t(\"recipe_profile.meal_values\")}\r\n            </div>\r\n            <div className=\"recipe-mealValues-container\">\r\n              {[\r\n                {\r\n                  type: \"Carbohydrates\",\r\n                  quantity: recipe.carbohydrate ? recipe.carbohydrate : \"\",\r\n                },\r\n                {\r\n                  type: \"Protein\",\r\n                  quantity: recipe.protein ? recipe.protein : \"\",\r\n                },\r\n                {\r\n                  type: \"Fat\",\r\n                  quantity: recipe.fat ? recipe.fat : \"\",\r\n                },\r\n                {\r\n                  type: \"Fiber\",\r\n                  quantity: recipe.fiber ? recipe.fiber : \"\",\r\n                },\r\n              ].map((value) => (\r\n                <div className=\"recipe-mealValues-container-box\">\r\n                  <span>{value.type}</span>\r\n                  <span>{value.quantity} g</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          {/* sdadasd */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              {t(\"recipe_profile.short_info\")}\r\n            </div>\r\n            <div className=\"recipe-mealValues-info\">\r\n              {recipe.description ? ReactHtmlParser(recipe.description) : \"\"}\r\n            </div>\r\n          </div>\r\n          {/* asdasdasd */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              {t(\"recipe_profile.ingredients\")}\r\n            </div>\r\n            <div className=\"recipe-ingredients-box\">\r\n              {recipe.ingredients &&\r\n                recipe.ingredients.map((line, i) => (\r\n                  <div className=\"recipe-mealValues-info recipe-ingredients-box-line\">\r\n                    <span>\r\n                      {line.name ? line.name.name : \"\"}{\" \"}\r\n                      {line.method && `(${line.method})`}\r\n                    </span>\r\n                    <span>{line.weight ? `${line.weight}g` : line.weight}</span>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n          {/* sdcsadas */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              {t(\"recipe_profile.prepration\")}\r\n            </div>\r\n            <div className=\"recipe-prepration-box\">\r\n              {recipe.cookingProcess\r\n                ? recipe.cookingProcess.map((line, i) => (\r\n                    <div className=\"recipe-mealValues-info recipe-prepration-box-line\">\r\n                      <span className=\"recipe-mealValues-info-number\">\r\n                        {i + 1}\r\n                      </span>{\" \"}\r\n                      {line}\r\n                    </div>\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n          </div>\r\n          {/* dasdasdsad */}\r\n          {/* dasdasdsad */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              {t(\"recipe_profile.tips\")}\r\n            </div>\r\n            <div\r\n              className=\"recipe-mealValues-info\"\r\n              style={{\r\n                backgroundColor: \"#ffeee0\",\r\n                minHeight: \"100px\",\r\n                padding: \"10px\",\r\n              }}\r\n            >\r\n              {ReactHtmlParser(recipe?.tips)}\r\n            </div>\r\n          </div>\r\n          {/* sdasdasdas */}\r\n          <div className=\"recipe-mealValues\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              {t(\"recipe_profile.notes\")}\r\n            </div>\r\n            <div\r\n              className=\"recipe-mealValues-info\"\r\n              style={{\r\n                backgroundColor: \"#ffeee0\",\r\n                minHeight: \"100px\",\r\n                padding: \"10px\",\r\n                listStyle: \"none\",\r\n              }}\r\n            >\r\n              {ReactHtmlParser(recipe?.notes)}\r\n            </div>\r\n          </div>\r\n          {/* sdasdasdas */}\r\n          {/* <div className=\"trainer-profile-goals\">\r\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\r\n              {t(\"recipe_profile.comments\")}\r\n            </div>\r\n            <div\r\n              className=\"trainer-profile-goals-container\"\r\n              style={{ backgroundColor: \"#e1e9f2\" }}\r\n            > */}\r\n          {/* {.map((comment) => (\r\n                <div\r\n                  className=\"challenge-profile-comment font-paragraph-white\"\r\n                  style={{ backgroundColor: \"transparent\" }}\r\n                >\r\n                  <span className=\"challenge-profile-comment-username\">\r\n                    <UserOutlined /> {comment.username}\r\n                  </span>\r\n                  <span style={{ color: \"black\" }}>{comment.comment}</span>\r\n                </div>\r\n              ))} */}\r\n          <div\r\n            className=\"trainer-profile-goals\"\r\n            style={{\r\n              borderBottom: \"1px solid transparent\",\r\n              backgroundColor: \"#e1e9f2\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{\r\n                color: \"#72777B\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {t(\"challenge_profile.comments\")}\r\n            </div>\r\n            {allComments.map((c) => (\r\n              <div className=\"comment-container\">\r\n                <div className=\"comment-container-c1 font-paragraph-black\">\r\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\r\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\r\n                  <div className=\"comment-container-c2 font-paragraph-black\">\r\n                    {c.text}\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"font-paragraph-white comment-container-c3\"\r\n                  style={{ color: \"#82868b\" }}\r\n                >\r\n                  {moment(c.createdAt).format(\"MMM, Do YY\")}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {localStorage.getItem(\"jwtToken\") && (\r\n              <>\r\n                <div\r\n                  className=\"trainer-profile-goals-container\"\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    value={commentText}\r\n                    onChange={(e) => setCommentText(e.target.value)}\r\n                  />\r\n                </div>\r\n                {commentButtonLoading ? (\r\n                  <LoadingOutlined\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      fontSize: \"30px\",\r\n                      marginTop: \"10px\",\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <button\r\n                    className=\"common-transparent-button font-paragraph-white\"\r\n                    onClick={postCommentToBackend}\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      borderColor: \"#ff7700\",\r\n                      marginTop: \"10px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    POST COMMENT\r\n                  </button>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          {/* </div>\r\n          </div> */}\r\n          {!localStorage.getItem(\"jwtToken\") && (\r\n            <div style={{ textAlign: \"center\", paddingTop: \"10px\" }}>\r\n              <Link\r\n                className=\"home-button font-paragraph-white\"\r\n                to=\"/challenges\"\r\n                style={{ width: \"80%\" }}\r\n              >\r\n                <span className=\"home-button-text\">\r\n                  {t(\"recipe_profile.start_today\")} <ArrowRightOutlined />\r\n                </span>\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {/* <Footer /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(RecipeProfile);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\MagazineArticle.js",["592"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../assets/magazineArticle.css\";\r\nimport \"../assets/trainerprofile.css\";\r\nimport \"../assets/home.css\";\r\nimport \"../assets/challengeProfile.css\";\r\nimport \"../assets/recipeProfile.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport { Avatar } from \"antd\";\r\nimport { UserOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { getBlogById } from \"../services/blogs\";\r\nimport {\r\n  FacebookShareButton,\r\n  LinkedinShareButton,\r\n  PinterestShareButton,\r\n  TwitterShareButton,\r\n  PinterestIcon,\r\n  TwitterIcon,\r\n  LinkedinIcon,\r\n  FacebookIcon,\r\n} from \"react-share\";\r\nimport slug from \"elegant-slug\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nfunction MagazineArticle(props) {\r\n  const [t] = useTranslation();\r\n  const [blogInfo, setBlogInfo] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchInfo();\r\n  }, []);\r\n\r\n  const fetchInfo = async () => {\r\n    setLoading(true);\r\n    const id = props.match.params.id;\r\n    const res = await getBlogById(id);\r\n    if (res) {\r\n      const d = res.data.blog;\r\n      setBlogInfo(d);\r\n    }\r\n    console.log(\"res\", res);\r\n    setLoading(false);\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const [article, setArticle] = useState({\r\n    writerInfo: {\r\n      name: \"Filip\",\r\n      facebookLink: \"www.facebook.com\",\r\n      twitter: \"www.twitter.com\",\r\n      linkedin: \"www.linkedin.com\",\r\n      pinterest: \"\",\r\n    },\r\n    coverPhoto:\r\n      \"https://realchallenge.fit/wp-content/uploads/2018/12/karl-s-1060222-unsplash-1024x681.jpg\",\r\n    writeAvatar: \"\",\r\n    articleName: \"Four Mistakes People Make when Choosing a Trainer\",\r\n    articleSubheading:\r\n      \"A training method to enhance neuromuscular efficiency and improve maximum strength.\",\r\n    articleCategory: \"TRAINING\",\r\n    articleDate: new Date(),\r\n    videoLink: \"https://www.youtube.com/watch?v=Pwz4kQrW4g4\",\r\n    articleText:\r\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque id metus vel est pulvinar suscipit in id ligula. Phasellus porta urna eu risus pulvinar sodales. Morbi finibus mauris dolor, sed pulvinar leo gravida nec. Phasellus a sodales nisi. Vivamus vehicula euismod porta. Curabitur id diam fermentum, placerat massa vitae, consequat diam. Proin dapibus at sem at mollis. Praesent malesuada neque vitae tincidunt laoreet. Duis quis accumsan magna. Aenean diam nisl, pellentesque ut est vitae, suscipit varius velit. Sed consectetur dolor et neque accumsan fringilla.Integer id odio a ligula imperdiet facilisis sit amet id nisi. Ut laoreet, libero sit amet rhoncus accumsan, quam nisl sollicitudin metus, ac tristique odio lacus eu nulla. Curabitur ac vehicula erat. Morbi metus neque, auctor rutrum erat nec, ultrices tristique dui. Nulla sit amet erat vitae nulla mattis tincidunt. Cras quis pharetra dui, eu convallis eros. Cras eu viverra justo, at molestie felis. Aliquam erat volutpat. Sed tellus nunc, tempus vel est non, ultricies efficitur erat. Duis turpis lacus, tristique et tellus sed, interdum gravida leo. Sed maximus ante nibh, id hendrerit ligula ornare id. Quisque tincidunt enim magna, quis condimentum arcu cursus nec. Suspendisse eu diam nec augue efficitur tincidunt id quis lectus. Maecenas vestibulum magna sed mi porta, ut mollis neque dictum. Duis molestie, lacus eget consequat scelerisque, mauris leo feugiat ligula, eu mollis velit lorem ac est. Duis venenatis sagittis magna, vitae volutpat risus eleifend eget. In quam elit, ullamcorper eget quam quis, tincidunt fermentum ante. Donec nec augue tortor. Quisque sodales viverra orci sed bibendum. Mauris interdum ante eget odio scelerisque pharetra. Duis arcu purus, ullamcorper vitae risus eget, viverra facilisis orci. Praesent non auctor dolor, in porttitor eros. Pellentesque tempus justo tellus, in laoreet nisi faucibus eu. Ut sit amet commodo elit. Quisque bibendum porta dui, vitae suscipit magna rhoncus mattis. Integer ultrices sollicitudin varius. Vivamus a interdum libero.\",\r\n    comments: [\r\n      {\r\n        id: 13123,\r\n        username: \"Ammarms\",\r\n        comment: \"Amazing work\",\r\n        date: new Date(),\r\n      },\r\n      {\r\n        id: 13123,\r\n        username: \"don\",\r\n        comment:\r\n          \"Quisque sodales viverra orci sed bibendum. Mauris interdum ante eget odio scelerisque pharetra. Duis arcu purus, ullamcorper vitae risus eget, viverra facilisis orci. Praesent non auctor dolor, in porttitor eros\",\r\n        date: new Date(),\r\n      },\r\n    ],\r\n  });\r\n  return loading ? (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n      }}\r\n    >\r\n      <LoadingOutlined\r\n        style={{\r\n          color: \"#ff7700\",\r\n          fontSize: \"65px\",\r\n        }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <Helmet>\r\n        <title>{`Realchallenge: ${blogInfo.title}`}</title>\r\n        <meta name=\"description\" content={blogInfo.paragraph} />\r\n        <meta property=\"og:title\" content={blogInfo.title} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:description\" content={blogInfo.paragraph} />\r\n        <meta\r\n          property=\"og:url\"\r\n          content={`http://localhost:3001/magazine/${slug(blogInfo.title)}/${\r\n            blogInfo._id\r\n          }`}\r\n        />\r\n        <meta name=\"author\" content=\"Realchallenge\" />\r\n      </Helmet>\r\n      <Navbar />\r\n      {console.log(\r\n        `${process.env.REACT_APP_SERVER}/api${\r\n          blogInfo ? blogInfo.featuredImage : \"\"\r\n        }`\r\n      )}\r\n      <div\r\n        className=\"magazine-article-head\"\r\n        style={{\r\n          background: `url(${process.env.REACT_APP_SERVER}/api${\r\n            blogInfo ? blogInfo.featuredImage : \"\"\r\n          }) no-repeat center center / cover`,\r\n          backgroundSize: \"cover\",\r\n        }}\r\n      ></div>\r\n      <div className=\"article-container\">\r\n        <div className=\"article-container-column1\">\r\n          <div className=\"article-container-column1-row1 font-paragraph-black\">\r\n            <Avatar\r\n              shape=\"square\"\r\n              size=\"large\"\r\n              icon={<UserOutlined />}\r\n              src={`${process.env.REACT_APP_SERVER}/api${\r\n                blogInfo && blogInfo.user ? blogInfo.user.avatarLink : \"\"\r\n              }`}\r\n            />{\" \"}\r\n            {blogInfo && blogInfo.user ? blogInfo.user.username : \"\"}\r\n          </div>\r\n          <div\r\n            className=\"article-container-column1-row1 font-paragraph-black\"\r\n            style={{ color: \"var(--color-orange)\", padding: \"15px 0\" }}\r\n          >\r\n            {t(\"magazine.share\")}\r\n\r\n            <div>\r\n              <FacebookShareButton\r\n                url={window.location.href}\r\n                quote=\"Hi. Please checkout this amazing article I found at realchallenge.fit\"\r\n              >\r\n                <FacebookIcon\r\n                  size={32}\r\n                  round={true}\r\n                  style={{ marginRight: \"10px\" }}\r\n                />\r\n              </FacebookShareButton>\r\n              <LinkedinShareButton\r\n                url={window.location.href}\r\n                title=\"Awesome article at Realchallenge.fit\"\r\n                summary=\"Hi. Please checkout this amazing article I found at realchallenge.fit\"\r\n              >\r\n                <LinkedinIcon\r\n                  size={32}\r\n                  round={true}\r\n                  style={{ marginRight: \"10px\" }}\r\n                />\r\n              </LinkedinShareButton>\r\n              <TwitterShareButton\r\n                url={window.location.href}\r\n                title=\"Check out this amazing article I found at Realchallenge.fit\"\r\n              >\r\n                <TwitterIcon\r\n                  size={32}\r\n                  round={true}\r\n                  style={{ marginRight: \"10px\" }}\r\n                />\r\n              </TwitterShareButton>\r\n              <PinterestShareButton\r\n                url={window.location.href}\r\n                media={`${process.env.REACT_APP_SERVER}/api${blogInfo.featuredImage}`}\r\n                description=\"Hi. Please checkout this amazing article I found at realchallenge.fit\"\r\n              >\r\n                <PinterestIcon\r\n                  size={32}\r\n                  round={true}\r\n                  style={{ marginRight: \"10px\" }}\r\n                />\r\n              </PinterestShareButton>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"article-container-column2\">\r\n          <h1 className=\"article-container-column2-heading font-heading-black\">\r\n            {blogInfo.title}\r\n          </h1>\r\n          <div>\r\n            <span\r\n              style={{\r\n                color: \"var(--color-orange)\",\r\n                marginRight: \"20px\",\r\n                fontSize: \"1.6rem\",\r\n              }}\r\n            >\r\n              {blogInfo && blogInfo.category ? blogInfo.category.name : \"\"}\r\n            </span>\r\n            <span style={{ fontSize: \"1.6rem\" }}>\r\n              {moment(article.articleDate).format(\"LL\")}\r\n            </span>\r\n            {/* {console.log(article.articleDate)} */}\r\n          </div>\r\n          {/* <h1 className=\"font-subheading-black\">{article.articleSubheading}</h1> */}\r\n          <a href={blogInfo.videoLink} style={{ color: \"var(--color-orange)\" }}>\r\n            Video Link To This Article\r\n          </a>\r\n          <p className=\"font-paragraph-black\" style={{ fontSize: \"1.8rem\" }}>\r\n            {ReactHtmlParser(blogInfo?.paragraph)}\r\n          </p>\r\n          <div\r\n            className=\"recipe-mealValues-heading font-paragraph-white\"\r\n            style={{ fontSize: \"1.8rem\", padding: \"10px 0\" }}\r\n          >\r\n            {t(\"magazine.comments\")}\r\n          </div>\r\n          <div\r\n            className=\"trainer-profile-goals-container\"\r\n            style={{ backgroundColor: \"#e1e9f2\" }}\r\n          >\r\n            {article.comments.map((comment) => (\r\n              <div\r\n                className=\"challenge-profile-comment font-paragraph-white\"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n              >\r\n                <span\r\n                  className=\"challenge-profile-comment-username\"\r\n                  style={{ paddingBottom: \"0\" }}\r\n                >\r\n                  <UserOutlined /> {comment.username}\r\n                </span>\r\n                <span\r\n                  className=\"font-paragraph-black\"\r\n                  style={{ fontSize: \"1.4rem\" }}\r\n                >\r\n                  {moment(comment.date).format(\"DD/MM/YYYY\")}\r\n                </span>\r\n                <span style={{ color: \"black\" }}>{comment.comment}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(MagazineArticle);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\NewRecipe.js",["593","594","595","596","597","598","599"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\UpdateRecipe.js",["600","601","602","603","604","605"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Select,\r\n  Modal,\r\n  InputNumber,\r\n  List,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport { PlusOutlined, CloseSquareOutlined } from \"@ant-design/icons\";\r\nimport { v4 } from \"uuid\";\r\nimport {\r\n  getAllDietTypes,\r\n  getAllMealTypes,\r\n  getAllFoodTypes,\r\n  getAllIngredients,\r\n  updateRecipe,\r\n  createFoodType,\r\n  createMealType,\r\n  removeMealType,\r\n  removeFoodType,\r\n  createDiet,\r\n  removeDiet,\r\n  createIngredient,\r\n  removeIngredient,\r\n} from \"../../../services/recipes\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport EditTypeName from \"./EditTypeName\";\r\nimport TextEditor from \"../../TextEditor\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nconst { Option } = Select;\r\n\r\nfunction UpdateRecipe(props) {\r\n  const [form] = Form.useForm();\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  // -----------\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [featuredImage, setFeaturedImage] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [thumbnailBase64, setThumbnailBase64] = useState(\"\");\r\n  const [preprationTime, setPreprationTime] = useState(\"\");\r\n  const [persons, setPersons] = useState(\"\");\r\n  const [kcalPerPersons, setKcalPerPersons] = useState(\"\");\r\n  const [saturationIndex, setSaturationIndex] = useState(\"\");\r\n  const [protein, setProtein] = useState(\"\");\r\n  const [carbohydrates, setCarbohydrates] = useState(\"\");\r\n  const [fat, setFat] = useState(\"\");\r\n  const [fiber, setFiber] = useState(\"\");\r\n  const [isPublic, setIsPublic] = useState(false);\r\n  const [allowComments, setAllowComments] = useState(false);\r\n  const [allowReviews, setAllowReviews] = useState(false);\r\n  //meal type\r\n  const [mealTypes, setMealTypes] = useState([]);\r\n  const [allMealTypes, setAllMealTypes] = useState([]);\r\n  const [mealTypeModalVisible, setMealTypeModalVisible] = useState(false);\r\n  const [newMealTypeName, setNewMealTypeName] = useState(\"\");\r\n  //=food type\r\n  const [foodType, setFoodTypes] = useState([]);\r\n  const [allFoodTypes, setAllFoodTypes] = useState([]);\r\n  const [foodTypeModalVisible, setFoodTypeModalVisible] = useState(false);\r\n  const [newFoodTypeName, setNewFoodTypeName] = useState(\"\");\r\n  //=diet\r\n  const [diet, setDiet] = useState([]);\r\n  const [allDiets, setAllDiets] = useState([]);\r\n  const [dietModalVisible, setDietModalVisible] = useState(false);\r\n  const [newDietName, setNewDietName] = useState(\"\");\r\n  //   INGREDIETS\r\n  const [allIngredients, setAllIngredients] = useState([]);\r\n  const [ingredients, setIngredients] = useState([]);\r\n  const [newIngredientModalVisible, setNewIngredientModlVisible] =\r\n    useState(false);\r\n  const [newIngredientName, setNewIngredientName] = useState(\"\");\r\n\r\n  //   cooking process\\\r\n  const [cookingProcess, setCookingProcess] = useState([]);\r\n  const [notes, setNotes] = useState(\"\");\r\n  const [tips, setTips] = useState(\"\");\r\n\r\n  // update stuff\r\n  const [editItemNameModalVisible, setEditItemModelVisible] = useState(false);\r\n\r\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\r\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\r\n    useState(\"\");\r\n  const userInfo = useContext(userInfoContext)[0];\r\n\r\n  async function fetchData() {\r\n    const diets = await getAllDietTypes();\r\n    const meals = await getAllMealTypes();\r\n    const foodTypes = await getAllFoodTypes();\r\n    const ingredients = await getAllIngredients();\r\n\r\n    setAllDiets(diets.diets);\r\n    setAllMealTypes(meals.mealTypes);\r\n    setAllFoodTypes(foodTypes.foodTypes);\r\n    setAllIngredients(ingredients.ingredients);\r\n  }\r\n  useEffect(() => {\r\n    console.log(\"props\", props);\r\n    form.setFieldsValue({\r\n      recipeName: props.selectedProduct.name,\r\n      recipeDescription: props.selectedProduct.description,\r\n      preprationTime: props.selectedProduct.prepTime,\r\n      persons: props.selectedProduct.persons\r\n        ? props.selectedProduct.persons\r\n        : \"\",\r\n      kcalPerPerson: props.selectedProduct.kCalPerPerson,\r\n      saturationIndex: props.selectedProduct.saturationIndex,\r\n      protein: props.selectedProduct.protein,\r\n      carbohydrates: props.selectedProduct.carbohydrate,\r\n      fat: props.selectedProduct.fat,\r\n      fiber: props.selectedProduct.fiber,\r\n      mealTypes: props.selectedProduct.mealTypes,\r\n      foodTypes: props.selectedProduct.foodTypes,\r\n      diet: props.selectedProduct.diet,\r\n      tips: props.selectedProduct.tips,\r\n      notes: props.selectedProduct.notes,\r\n      isPublic: props.selectedProduct.isPublic,\r\n      allowComments: props.selectedProduct.allowComments,\r\n      allowReviews: props.selectedProduct.allowReviews,\r\n      // category: props.selectedProduct._id,\r\n      // price: props.selectedProduct.price,\r\n      // weight: props.selectedProduct.weight,\r\n      // inStock: props.selectedProduct.inStock,\r\n    });\r\n    setKcalPerPersons(props.selectedProduct.kCalPerPerson);\r\n    setSaturationIndex(props.selectedProduct.saturationIndex);\r\n    setProtein(props.selectedProduct.protein);\r\n    setCarbohydrates(props.selectedProduct.carbohydrate);\r\n    setFat(props.selectedProduct.fat);\r\n    setFiber(props.selectedProduct.fiber);\r\n    setMealTypes(props.selectedProduct.mealTypes);\r\n    setFoodTypes(props.selectedProduct.foodTypes);\r\n    setDiet(props.selectedProduct.diet);\r\n    setTips(props.selectedProduct.tips);\r\n    setNotes(props.selectedProduct.notes);\r\n    setName(props.selectedProduct.name);\r\n    setDescription(props.selectedProduct.description);\r\n    setPreprationTime(props.selectedProduct.prepTime);\r\n    setPersons(\r\n      props.selectedProduct.persons ? props.selectedProduct.persons : \"\"\r\n    );\r\n    setDiet(props.selectedProduct.diet);\r\n    setFoodTypes(props.selectedProduct.foodTypes);\r\n    setMealTypes(props.selectedProduct.mealTypes);\r\n    setFeaturedImage(props.selectedProduct.image);\r\n    setIngredients(props.selectedProduct.ingredients);\r\n    setCookingProcess(props.selectedProduct.cookingProcess);\r\n    setIsPublic(props.selectedProduct.isPublic);\r\n    setAllowComments(props.selectedProduct.allowComments);\r\n    setAllowReviews(props.selectedProduct.allowReviews);\r\n    fetchData();\r\n  }, []);\r\n\r\n  const ing = {\r\n    id: v4(),\r\n    name: \"\",\r\n    weight: \"\",\r\n    volume: \"\",\r\n    pieces: \"\",\r\n    method: \"\",\r\n    other: \"\",\r\n  };\r\n\r\n  const onFinish = async (values) => {\r\n    const d = {\r\n      name: name,\r\n      description,\r\n      image:\r\n        typeof featuredImage === \"object\" ? featuredImage.link : featuredImage,\r\n      prepTime: preprationTime,\r\n      persons: persons,\r\n      kCalPerPerson: kcalPerPersons,\r\n      saturationIndex: saturationIndex,\r\n      protein: protein,\r\n      carbohydrate: carbohydrates,\r\n      fat: fat,\r\n      fiber: fiber,\r\n      mealTypes: mealTypes,\r\n      foodTypes: foodType,\r\n      diet: diet,\r\n      ingredients: ingredients,\r\n      cookingProcess: cookingProcess,\r\n      notes: notes,\r\n      tips: tips,\r\n      isPublic: isPublic,\r\n      allowComments: allowComments,\r\n    };\r\n    console.log(\"Success:\", d);\r\n    console.log(values);\r\n    console.log(props.selectedProduct._id, d);\r\n    await updateRecipe(d, props.selectedProduct._id);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const changeIngredientValue = (key, ingredientId, value) => {\r\n    let i = [...ingredients];\r\n    i = i.map((ingre) => {\r\n      if (ingre._id === ingredientId) {\r\n        ingre[key] = value;\r\n      }\r\n      return ingre;\r\n    });\r\n    setIngredients(i);\r\n  };\r\n\r\n  const removeIngredientListItem = (item) => {\r\n    let i = [...ingredients];\r\n    i = i.filter((ingre) => ingre._id !== item._id);\r\n    setIngredients(i);\r\n    console.log(\"yas\", item, i);\r\n  };\r\n  const renderIngredientsList = (item) => (\r\n    <List.Item style={{ display: \"block\", textAlign: \"right\" }}>\r\n      <Button type=\"danger\" onClick={() => removeIngredientListItem(item)}>\r\n        Remove\r\n      </Button>\r\n\r\n      <div className=\"new-recipe-ingredient-listitem\">\r\n        <div>\r\n          <span className=\"font-paragraph-black\">Select Ingredient</span>\r\n          <Select\r\n            style={{ width: \"100%\" }}\r\n            value={item.name._id}\r\n            onChange={(e) => changeIngredientValue(\"name\", item._id, e)}\r\n            showSearch\r\n            onSearch={(v) => console.log(\"value\", v)}\r\n            filterOption={(input, option) => {\r\n              // console.log(\"value\", input,option);\r\n              return (\r\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n              );\r\n            }}\r\n          >\r\n            {allIngredients.map((i) => (\r\n              <Option value={i._id}>{i.name}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n        <div>\r\n          <span className=\"font-paragraph-black\">Weight (gm)</span>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Enter Weight\"\r\n            value={item.weight}\r\n            onChange={(e) => {\r\n              console.log(item._id, e.target.value);\r\n              changeIngredientValue(\"weight\", item._id, e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <span className=\"font-paragraph-black\">Volume (ml)</span>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Enter Volume\"\r\n            value={item.volume}\r\n            onChange={(e) =>\r\n              changeIngredientValue(\"volume\", item._id, e.target.value)\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <span className=\"font-paragraph-black\">Pieces</span>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Enter Pieces\"\r\n            value={item.pieces}\r\n            onChange={(e) =>\r\n              changeIngredientValue(\"pieces\", item._id, e.target.value)\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <span className=\"font-paragraph-black\">Method</span>\r\n          <Input\r\n            placeholder=\"Enter Method\"\r\n            value={item.method}\r\n            onChange={(e) =>\r\n              changeIngredientValue(\"method\", item._id, e.target.value)\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <span className=\"font-paragraph-black\">Other</span>\r\n          <Input\r\n            placeholder=\"Enter Other\"\r\n            value={item.other}\r\n            onChange={(e) =>\r\n              changeIngredientValue(\"other\", item._id, e.target.value)\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    </List.Item>\r\n  );\r\n\r\n  const removeCookingProcessItem = (item, index) => {\r\n    let cp = [...cookingProcess];\r\n    cp.splice(index, 1);\r\n    setCookingProcess(cp);\r\n  };\r\n\r\n  const onchangeCookingProcess = (value, index) => {\r\n    let cp = [...cookingProcess];\r\n    cp[index] = value;\r\n    setCookingProcess(cp);\r\n  };\r\n  const renderCookingProcessList = (item, index) => (\r\n    <List.Item>\r\n      <span className=\"font-subheading-black\" style={{ marginRight: \"10px\" }}>\r\n        {index + 1}\r\n      </span>\r\n      <Input.TextArea\r\n        rows={2}\r\n        value={item}\r\n        onChange={(e) => onchangeCookingProcess(e.target.value, index)}\r\n        style={{ marginRight: \"10px\" }}\r\n      />\r\n      <Button\r\n        type=\"danger\"\r\n        onClick={() => removeCookingProcessItem(item, index)}\r\n      >\r\n        Remove\r\n      </Button>\r\n    </List.Item>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        visible={props.visible}\r\n        onCancel={() => {\r\n          props.setVisible(!props.visible);\r\n          props.getAllProducts();\r\n        }}\r\n        width=\"80vw\"\r\n        key={props.key}\r\n        footer={false}\r\n      >\r\n        {/* modal to create a new meal type  */}\r\n        <Modal\r\n          onCancel={() => setMealTypeModalVisible(false)}\r\n          footer={false}\r\n          visible={mealTypeModalVisible}\r\n        >\r\n          <p className=\"font-paragraph-white\">Enter Meal Type</p>\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Input\r\n              value={newMealTypeName}\r\n              onChange={(e) => setNewMealTypeName(e.target.value)}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              onClick={async () => {\r\n                if (newMealTypeName.length > 0) {\r\n                  await createMealType(newMealTypeName);\r\n                  // setEquipmentModal(false);\r\n                  fetchData();\r\n                }\r\n              }}\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginLeft: \"5px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </div>\r\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n            <span className=\"font-subheading-white\">All Meal Types</span>\r\n            <List\r\n              size=\"small\"\r\n              bordered\r\n              dataSource={allMealTypes}\r\n              renderItem={(cat) => (\r\n                <List.Item\r\n                  style={{\r\n                    backgroundColor: \"#fff\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                  <span>{cat.name}</span>\r\n                  <span>\r\n                    <Button\r\n                      onClick={async () => {\r\n                        await removeMealType(cat._id);\r\n                        fetchData();\r\n                      }}\r\n                      style={{ marginRight: \"10px\" }}\r\n                      type=\"primary\"\r\n                      danger\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        setSelectedItemForUpdateTitle(\"Update Meal Type\");\r\n                        setSelectedItemForUpdate(cat);\r\n                        setEditItemModelVisible(true);\r\n                      }}\r\n                    >\r\n                      Edit\r\n                    </Button>\r\n                  </span>\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </div>\r\n        </Modal>\r\n\r\n        {/* modal to create a new food type  */}\r\n        <Modal\r\n          onCancel={() => setFoodTypeModalVisible(false)}\r\n          footer={false}\r\n          visible={foodTypeModalVisible}\r\n        >\r\n          <p className=\"font-paragraph-white\">Enter Food Type</p>\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Input\r\n              value={newFoodTypeName}\r\n              onChange={(e) => setNewFoodTypeName(e.target.value)}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              onClick={async () => {\r\n                if (newFoodTypeName.length > 0) {\r\n                  await createFoodType(newFoodTypeName);\r\n                  // setEquipmentModal(false);\r\n                  fetchData();\r\n                }\r\n              }}\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginLeft: \"5px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </div>\r\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n            <span className=\"font-subheading-white\">All Food Types</span>\r\n            <List\r\n              size=\"small\"\r\n              bordered\r\n              dataSource={allFoodTypes}\r\n              renderItem={(cat) => (\r\n                <List.Item\r\n                  style={{\r\n                    backgroundColor: \"#fff\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                  <span>{cat.name}</span>\r\n\r\n                  <span>\r\n                    <Button\r\n                      onClick={async () => {\r\n                        await removeFoodType(cat._id);\r\n                        fetchData();\r\n                      }}\r\n                      style={{ marginRight: \"10px\" }}\r\n                      type=\"primary\"\r\n                      danger\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        setSelectedItemForUpdateTitle(\"Update Food Type\");\r\n                        setSelectedItemForUpdate(cat);\r\n                        setEditItemModelVisible(true);\r\n                      }}\r\n                    >\r\n                      Edit\r\n                    </Button>\r\n                  </span>\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </div>\r\n        </Modal>\r\n        {/* modal to create a new diet  */}\r\n        <Modal\r\n          onCancel={() => setDietModalVisible(false)}\r\n          footer={false}\r\n          visible={dietModalVisible}\r\n        >\r\n          <p className=\"font-paragraph-white\">Enter Diet</p>\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Input\r\n              value={newDietName}\r\n              onChange={(e) => setNewDietName(e.target.value)}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              onClick={async () => {\r\n                if (newDietName.length > 0) {\r\n                  await createDiet(newDietName);\r\n                  // setEquipmentModal(false);\r\n                  fetchData();\r\n                }\r\n              }}\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginLeft: \"5px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </div>\r\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n            <span className=\"font-subheading-white\">All Diet Types</span>\r\n            <List\r\n              size=\"small\"\r\n              bordered\r\n              dataSource={allDiets}\r\n              renderItem={(cat) => (\r\n                <List.Item\r\n                  style={{\r\n                    backgroundColor: \"#fff\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                  <span>{cat.name}</span>\r\n\r\n                  <span>\r\n                    <Button\r\n                      onClick={async () => {\r\n                        await removeDiet(cat._id);\r\n                        fetchData();\r\n                      }}\r\n                      style={{ marginRight: \"10px\" }}\r\n                      type=\"primary\"\r\n                      danger\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        setSelectedItemForUpdateTitle(\"Update Diet Type\");\r\n                        setSelectedItemForUpdate(cat);\r\n                        setEditItemModelVisible(true);\r\n                      }}\r\n                    >\r\n                      Edit\r\n                    </Button>\r\n                  </span>\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </div>\r\n        </Modal>\r\n        {/* modal to create a new ingredient  */}\r\n        <Modal\r\n          onCancel={() => setNewIngredientModlVisible(false)}\r\n          footer={false}\r\n          visible={newIngredientModalVisible}\r\n        >\r\n          <p className=\"font-paragraph-white\">Enter Ingredient</p>\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Input\r\n              value={newIngredientName}\r\n              onChange={(e) => setNewIngredientName(e.target.value)}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              onClick={async () => {\r\n                if (newIngredientName.length > 0) {\r\n                  await createIngredient(newIngredientName);\r\n                  // setEquipmentModal(false);\r\n                  fetchData();\r\n                }\r\n              }}\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginLeft: \"5px\",\r\n              }}\r\n            >\r\n              Create\r\n            </Button>\r\n          </div>\r\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n            <span className=\"font-subheading-white\">All Ingredients</span>\r\n            <List\r\n              size=\"small\"\r\n              bordered\r\n              dataSource={allIngredients}\r\n              renderItem={(cat) => (\r\n                <List.Item\r\n                  style={{\r\n                    backgroundColor: \"#fff\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                  <span>{cat.name}</span>\r\n\r\n                  <span>\r\n                    <Button\r\n                      onClick={async () => {\r\n                        await removeIngredient(cat._id);\r\n                        fetchData();\r\n                      }}\r\n                      style={{ marginRight: \"10px\" }}\r\n                      type=\"primary\"\r\n                      danger\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        setSelectedItemForUpdateTitle(\"Update Ingredient\");\r\n                        setSelectedItemForUpdate(cat);\r\n                        setEditItemModelVisible(true);\r\n                      }}\r\n                    >\r\n                      Edit\r\n                    </Button>\r\n                  </span>\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </div>\r\n        </Modal>\r\n        <EditTypeName\r\n          editCategoryNameModalVisible={editItemNameModalVisible}\r\n          setEditCategoryModelVisible={setEditItemModelVisible}\r\n          fethData={fetchData}\r\n          selectedForUpdate={selectedItemForUpdate}\r\n          titleName={selectedItemForUpdateTitle}\r\n        />\r\n\r\n        {/* media manager */}\r\n        <RemoteMediaManager\r\n          visible={mediaManagerVisible}\r\n          setVisible={setMediaManagerVisible}\r\n          type={mediaManagerType}\r\n          actions={mediaManagerActions}\r\n        />\r\n        <h2 className=\"font-heading-white\">Update Recipe</h2>\r\n        <div\r\n          className=\"admin-newuser-container\"\r\n          style={{ padding: \"50px 50px 50px 20px\" }}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            form={form}\r\n          >\r\n            <Form.Item\r\n              label=\"Recipe Name\"\r\n              name=\"recipeName\"\r\n              rules={[{ required: true, message: \"Please input recipe name!\" }]}\r\n            >\r\n              <Input value={name} onChange={(e) => setName(e.target.value)} />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Recipe Description\"\r\n              name=\"recipeDescription\"\r\n              rules={[{ required: true }]}\r\n            >\r\n              <TextEditor\r\n                key={JSON.stringify(description)}\r\n                value={description}\r\n                setValue={setDescription}\r\n              />\r\n              {/* <Input.TextArea\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              /> */}\r\n            </Form.Item>\r\n            <Form.Item label=\"Featured Image\" name=\"featuredImage\">\r\n              <Button\r\n                onClick={() => {\r\n                  setMediaManagerVisible(true);\r\n                  setMediaManagerType(\"images\");\r\n                  setMediaManagerActions([featuredImage, setFeaturedImage]);\r\n                }}\r\n              >\r\n                Upload File\r\n              </Button>\r\n              {typeof featuredImage === \"object\" ? (\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      marginRight: \"15px\",\r\n                      marginTop: \"10px\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      alt=\"\"\r\n                      src={`${process.env.REACT_APP_SERVER}/api${\r\n                        typeof featuredImage === \"object\"\r\n                          ? featuredImage.link\r\n                          : featuredImage\r\n                      }`}\r\n                      height=\"100px\"\r\n                    />\r\n                    <span>\r\n                      {featuredImage.name}{\" \"}\r\n                      <CloseSquareOutlined\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() => setFeaturedImage()}\r\n                      />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      marginRight: \"15px\",\r\n                      marginTop: \"10px\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      alt=\"\"\r\n                      src={`${process.env.REACT_APP_SERVER}/api${featuredImage}`}\r\n                      height=\"100px\"\r\n                    />\r\n                    <span>\r\n                      <CloseSquareOutlined\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() => setFeaturedImage()}\r\n                      />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Form.Item>\r\n            <Form layout=\"vertical\" form={form}>\r\n              <div className=\"new-recipe-information-inputs-container\">\r\n                <Form.Item\r\n                  label=\"Prepration Time\"\r\n                  name=\"preprationTime\"\r\n                  // rules={[\r\n                  //   {\r\n                  //     required: true,\r\n                  //     message: \"Please input prepration time!\",\r\n                  //   },\r\n                  // ]}\r\n                  type=\"number\"\r\n                >\r\n                  <InputNumber\r\n                    value={preprationTime}\r\n                    onChange={(e) => setPreprationTime(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item label=\"Persons\" name=\"persons\" type=\"number\">\r\n                  <InputNumber\r\n                    value={persons}\r\n                    onChange={(e) => setPersons(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Kcal per person\"\r\n                  name=\"kcalPerPerson\"\r\n                  // rules={[\r\n                  //   {\r\n                  //     required: true,\r\n                  //     message: \"Please input number of calories per person!\",\r\n                  //   },\r\n                  // ]}\r\n                  type=\"number\"\r\n                >\r\n                  <InputNumber\r\n                    value={kcalPerPersons}\r\n                    onChange={(e) => setKcalPerPersons(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Saturation Index\"\r\n                  name=\"saturationIndex\"\r\n                  // rules={[\r\n                  //   {\r\n                  //     required: true,\r\n                  //     message: \"Please input saturation index!\",\r\n                  //   },\r\n                  // ]}\r\n                  type=\"number\"\r\n                >\r\n                  <InputNumber\r\n                    value={saturationIndex}\r\n                    onChange={(e) => setSaturationIndex(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Protein\"\r\n                  name=\"protein\"\r\n                  // rules={[{ required: true, message: \"Please input protein!\" }]}\r\n                  type=\"number\"\r\n                >\r\n                  <InputNumber\r\n                    value={protein}\r\n                    onChange={(e) => setProtein(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Carbohydrates\"\r\n                  name=\"carbohydrates\"\r\n                  // rules={[\r\n                  //   { required: true, message: \"Please input carbohydrates!\" },\r\n                  // ]}\r\n                  type=\"number\"\r\n                >\r\n                  <InputNumber\r\n                    value={carbohydrates}\r\n                    onChange={(e) => setCarbohydrates(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Fat\"\r\n                  name=\"fat\"\r\n                  // rules={[{ required: true, message: \"Please input fats!\" }]}\r\n                  type=\"number\"\r\n                >\r\n                  <InputNumber\r\n                    value={fat}\r\n                    onChange={(e) => setFat(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Fiber\"\r\n                  name=\"fiber\"\r\n                  // rules={[{ required: true, message: \"Please input fiber!\" }]}\r\n                  type=\"number\"\r\n                >\r\n                  <InputNumber\r\n                    value={fiber}\r\n                    onChange={(e) => setFiber(e)}\r\n                    style={{ width: \"100%\" }}\r\n                  />\r\n                </Form.Item>\r\n              </div>\r\n            </Form>\r\n            <Form.Item label=\"Meal Types\" name=\"mealTypes\">\r\n              <Select\r\n                mode=\"multiple\"\r\n                allowClear\r\n                style={{ width: \"100%\" }}\r\n                placeholder=\"Please select\"\r\n                value={mealTypes}\r\n                onChange={(e) => setMealTypes(e)}\r\n              >\r\n                {allMealTypes.map((meal) => (\r\n                  <Option value={meal._id}>{meal.name}</Option>\r\n                ))}\r\n              </Select>\r\n              <Button\r\n                style={{\r\n                  backgroundColor: \"var(--color-orange)\",\r\n                  border: \"none\",\r\n                  color: \"white\",\r\n                  float: \"right\",\r\n                  marginTop: \"5px\",\r\n                }}\r\n                onClick={() => setMealTypeModalVisible(true)}\r\n              >\r\n                Manage Meal Type\r\n              </Button>\r\n            </Form.Item>\r\n            <Form.Item label=\"Food Types\" name=\"foodTypes\">\r\n              <Select\r\n                mode=\"multiple\"\r\n                allowClear\r\n                style={{ width: \"100%\" }}\r\n                placeholder=\"Please select\"\r\n                value={foodType}\r\n                onChange={(e) => setFoodTypes(e)}\r\n              >\r\n                {allFoodTypes.map((food) => (\r\n                  <Option value={food._id}>{food.name}</Option>\r\n                ))}\r\n              </Select>\r\n              <Button\r\n                style={{\r\n                  backgroundColor: \"var(--color-orange)\",\r\n                  border: \"none\",\r\n                  color: \"white\",\r\n                  float: \"right\",\r\n                  marginTop: \"5px\",\r\n                }}\r\n                onClick={() => setFoodTypeModalVisible(true)}\r\n              >\r\n                Manage Food Type\r\n              </Button>\r\n            </Form.Item>\r\n            <Form.Item label=\"Diet\" name=\"diet\">\r\n              <Select\r\n                mode=\"multiple\"\r\n                allowClear\r\n                style={{ width: \"100%\" }}\r\n                placeholder=\"Please select\"\r\n                value={diet}\r\n                onChange={(e) => setDiet(e)}\r\n              >\r\n                {allDiets.map((d) => (\r\n                  <Option value={d._id}>{d.name}</Option>\r\n                ))}\r\n              </Select>\r\n              <Button\r\n                style={{\r\n                  backgroundColor: \"var(--color-orange)\",\r\n                  border: \"none\",\r\n                  color: \"white\",\r\n                  float: \"right\",\r\n                  marginTop: \"5px\",\r\n                }}\r\n                onClick={() => setDietModalVisible(true)}\r\n              >\r\n                Manage Diet\r\n              </Button>\r\n            </Form.Item>\r\n            {/* ingredients */}\r\n            {\r\n              <div className=\"new-recipe-ingredients-list-container\">\r\n                <List\r\n                  size=\"small\"\r\n                  header={\r\n                    <div className=\"new-recipe-ingredients-list-container-header\">\r\n                      <span className=\"font-heading-black\">\r\n                        Add Ingredients\r\n                      </span>\r\n                      <div>\r\n                        <Button\r\n                          className=\"hover-orange\"\r\n                          onClick={() => setIngredients([...ingredients, ing])}\r\n                        >\r\n                          Add Ingredient\r\n                        </Button>\r\n                        <Button\r\n                          className=\"hover-orange\"\r\n                          onClick={() => setNewIngredientModlVisible(true)}\r\n                        >\r\n                          Manage Ingredients\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                  bordered\r\n                  dataSource={ingredients}\r\n                  renderItem={renderIngredientsList}\r\n                />\r\n              </div>\r\n            }\r\n            {/* Cooking process */}\r\n            {\r\n              <div\r\n                className=\"new-recipe-ingredients-list-container\"\r\n                style={{ marginTop: \"30px\" }}\r\n              >\r\n                <List\r\n                  size=\"small\"\r\n                  header={\r\n                    <div className=\"new-recipe-ingredients-list-container-header\">\r\n                      <span className=\"font-heading-black\">\r\n                        Cooking Process\r\n                      </span>\r\n                      <div>\r\n                        <Button\r\n                          className=\"hover-orange\"\r\n                          onClick={() =>\r\n                            setCookingProcess([...cookingProcess, \"\"])\r\n                          }\r\n                        >\r\n                          Add Step\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  }\r\n                  bordered\r\n                  dataSource={cookingProcess}\r\n                  renderItem={renderCookingProcessList}\r\n                />\r\n              </div>\r\n            }\r\n\r\n            <Form.Item label=\"Notes\" name=\"notes\" style={{ marginTop: \"30px\" }}>\r\n              {/* <Input.TextArea\r\n                value={notes}\r\n                onChange={(e) => setNotes(e.target.value)}\r\n              /> */}\r\n              <TextEditor\r\n                key={JSON.stringify(notes)}\r\n                value={notes}\r\n                setValue={setNotes}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item label=\"Tips\" name=\"tips\">\r\n              {/* <Input.TextArea\r\n                value={tips}\r\n                onChange={(e) => setTips(e.target.value)}\r\n              /> */}\r\n              <TextEditor\r\n                key={JSON.stringify(tips)}\r\n                value={tips}\r\n                setValue={setTips}\r\n              />\r\n            </Form.Item>\r\n            {userInfo.role === \"admin\" && (\r\n              <>\r\n                {\" \"}\r\n                <Form.Item>\r\n                  <Checkbox\r\n                    checked={isPublic}\r\n                    onChange={(e) => setIsPublic(e.target.checked)}\r\n                  >\r\n                    Make Public\r\n                  </Checkbox>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Checkbox\r\n                    checked={allowReviews}\r\n                    onChange={(e) => setAllowReviews(e.target.checked)}\r\n                  >\r\n                    Allow Reviews\r\n                  </Checkbox>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Checkbox\r\n                    checked={allowComments}\r\n                    onChange={(e) => setAllowComments(e.target.checked)}\r\n                  >\r\n                    Allow Comments\r\n                  </Checkbox>\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n            {/* footer */}\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                style={{\r\n                  backgroundColor: \"var(--color-orange)\",\r\n                  borderColor: \"var(--color-orange)\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n                onClick={onFinish}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateRecipe;\r\n",["606","607"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\NewBlog.js",["608"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form, Input, Button, Select, Modal, List } from \"antd\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CloseSquareOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport {\r\n  createBlog,\r\n  createBlogCategory,\r\n  getAllBlogCategories,\r\n  removeBlogCategory,\r\n} from \"../../../services/blogs\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport EditCategoryName from \"./EditCategoryName\";\r\nimport TextEditor from \"../../TextEditor\";\r\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\r\nimport { createPost } from \"../../../services/posts\";\r\nimport slug from \"elegant-slug\";\r\nimport ReactHTMLParser from \"react-html-parser\";\r\nconst { Option } = Select;\r\n\r\nfunction NewBlog({ setCurrentSelection }) {\r\n  // user context\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const [t] = useTranslation();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [paragraph, setParagraph] = useState(\"\");\r\n  const [featuredImage, setFeaturedImage] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [videoLink, setVideLink] = useState(\"\");\r\n  //   category\r\n  const [category, setCategory] = useState(\"\");\r\n  const [allCategories, setAllCategories] = useState([]);\r\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n  const [categoryModalVisible, setCategoryModalVisible] = useState(false);\r\n  const [editCategoryNameModalVisible, setEditCategoryModelVisible] =\r\n    useState(false);\r\n\r\n  const [selectedCategoryForUpdate, setSelectedCategoryForUpdate] = useState(\r\n    {}\r\n  );\r\n  const [isPublic, setIsPublic] = useState(false);\r\n  const [allowComments, setAllowComments] = useState(false);\r\n  const [allowReviews, setAllowReviews] = useState(false);\r\n  const [userCreatePost, setUserCreatePost] = useState(false);\r\n  const [language, setLanguage] = useState(\"eng\");\r\n\r\n  useEffect(() => {\r\n    fethData();\r\n  }, []);\r\n  const fethData = async () => {\r\n    const data = await getAllBlogCategories();\r\n    setAllCategories(data.categories);\r\n    console.log(data);\r\n  };\r\n\r\n  const createNewBlog = async () => {\r\n    let flag = false;\r\n    if (title && paragraph && featuredImage && videoLink && category) {\r\n      flag = true;\r\n    }\r\n    if (!flag) {\r\n      alert(\"Please fill all the information\");\r\n    } else {\r\n      setLoading(true);\r\n      const vals = {\r\n        language: language,\r\n        title,\r\n        paragraph,\r\n        featuredImage: featuredImage.link,\r\n        videoLink: videoLink.link,\r\n        category,\r\n        user: userInfo.id,\r\n        isPublic: isPublic,\r\n        allowComments: allowComments,\r\n        allowReviews: allowReviews,\r\n      };\r\n      const res = await createBlog(vals);\r\n      console.log(\"ammarf\", res);\r\n      setLoading(false);\r\n      if (res) {\r\n        // return;\r\n        userCreatePost && createAPost(res.newBlog._id);\r\n        setCurrentSelection(2.1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const createAPost = async (id) => {\r\n    const values = {\r\n      title: title,\r\n      text: ReactHTMLParser(paragraph),\r\n      image: featuredImage.link,\r\n      type: \"Magazine\",\r\n      url: `/magazine/${slug(title)}/${id}`,\r\n    };\r\n    await createPost(values);\r\n    // setCreatePostModalVisible(false);\r\n    // console.log(values);\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(\"Success:\", values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* media manager */}\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      {/* edit category name modal */}\r\n      <EditCategoryName\r\n        editCategoryNameModalVisible={editCategoryNameModalVisible}\r\n        setEditCategoryModelVisible={setEditCategoryModelVisible}\r\n        fethData={fethData}\r\n        selectedForUpdate={selectedCategoryForUpdate}\r\n        titleName=\"Update Category\"\r\n      />\r\n      {/* modal to create a new meal type  */}\r\n      <Modal\r\n        onCancel={() => setCategoryModalVisible(false)}\r\n        footer={false}\r\n        visible={categoryModalVisible}\r\n      >\r\n        <p className=\"font-paragraph-white\">Manage Blog Category</p>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Input\r\n            value={newCategoryName}\r\n            onChange={(e) => setNewCategoryName(e.target.value)}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            onClick={async () => {\r\n              if (newCategoryName.length > 0) {\r\n                await createBlogCategory(newCategoryName);\r\n                // setEquipmentModal(false);\r\n                fethData();\r\n              }\r\n            }}\r\n            style={{\r\n              backgroundColor: \"var(--color-orange)\",\r\n              borderColor: \"var(--color-orange)\",\r\n              marginLeft: \"5px\",\r\n            }}\r\n          >\r\n            Create\r\n          </Button>\r\n        </div>\r\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n          <span className=\"font-subheading-white\">All Categories</span>\r\n          <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={allCategories}\r\n            renderItem={(cat) => (\r\n              <List.Item\r\n                style={{\r\n                  backgroundColor: \"#fff\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                <span>{cat.name}</span>\r\n                <span>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      await removeBlogCategory(cat._id);\r\n                      fethData();\r\n                    }}\r\n                    style={{ marginRight: \"10px\" }}\r\n                    type=\"primary\"\r\n                    danger\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => {\r\n                      setSelectedCategoryForUpdate(cat);\r\n                      setEditCategoryModelVisible(true);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </span>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </div>\r\n      </Modal>\r\n      <h2 className=\"font-heading-black\">New Blog</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <div style={{ marginTop: \"-40px\", float: \"right\" }}>\r\n          <span style={{ marginRight: \"5px\" }}>Select Language:</span>\r\n          <Select\r\n            allowClear\r\n            style={{ width: \"100px\" }}\r\n            placeholder=\"Please select\"\r\n            value={language}\r\n            onChange={(e) => setLanguage(e)}\r\n          >\r\n            <Option value={\"eng\"}>English</Option>\r\n            <Option value={\"du\"}>Dutch</Option>\r\n          </Select>\r\n        </div>\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Title\"\r\n            name=\"recipeName\"\r\n            rules={[{ required: true, message: \"Please input title!\" }]}\r\n          >\r\n            <Input value={title} onChange={(e) => setTitle(e.target.value)} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Featured Image\"\r\n            name=\"featuredImage\"\r\n            rules={[\r\n              { required: true, message: \"Please input featured image!\" },\r\n            ]}\r\n          >\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"images\");\r\n                setMediaManagerActions([featuredImage, setFeaturedImage]);\r\n              }}\r\n            >\r\n              Upload File\r\n            </Button>\r\n            {featuredImage && (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  marginRight: \"15px\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                <img\r\n                  alt=\"\"\r\n                  src={`${process.env.REACT_APP_SERVER}/api${featuredImage.link}`}\r\n                  height=\"auto\"\r\n                  width={\"80%\"}\r\n                />\r\n                <span>\r\n                  {featuredImage.name}{\" \"}\r\n                  <CloseSquareOutlined\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => setFeaturedImage(\"\")}\r\n                  />\r\n                </span>\r\n              </div>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Paragraph\"\r\n            name=\"paragraph\"\r\n            rules={[{ required: true }]}\r\n          >\r\n            {/* <Input.TextArea\r\n              rows={20}\r\n              value={paragraph}\r\n              onChange={(e) => setParagraph(e.target.value)}\r\n            /> */}\r\n            <TextEditor value={paragraph} setValue={setParagraph} />\r\n          </Form.Item>\r\n          <Form.Item label=\"Video Link\" name=\"videoLink\">\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"videos\");\r\n                setMediaManagerActions([videoLink, setVideLink]);\r\n              }}\r\n            >\r\n              Upload File\r\n            </Button>\r\n            {videoLink && (\r\n              <div className=\"font-paragraph-black\">\r\n                {videoLink.name}{\" \"}\r\n                <CloseSquareOutlined\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => setVideLink(\"\")}\r\n                />\r\n              </div>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item label=\"Category\" name=\"category\">\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Please select\"\r\n              value={category}\r\n              onChange={(e) => setCategory(e)}\r\n            >\r\n              {allCategories.map((cat) => (\r\n                <Option value={cat._id}>{cat.name}</Option>\r\n              ))}\r\n            </Select>\r\n            <Button\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                border: \"none\",\r\n                color: \"white\",\r\n                float: \"right\",\r\n                marginTop: \"5px\",\r\n              }}\r\n              onClick={() => setCategoryModalVisible(true)}\r\n            >\r\n              Manage Blog Categories\r\n            </Button>\r\n          </Form.Item>\r\n          {userInfo.role === \"admin\" && (\r\n            <>\r\n              {\" \"}\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={userCreatePost}\r\n                  onChange={(e) => setUserCreatePost(e.target.checked)}\r\n                >\r\n                  Create a post\r\n                </Checkbox>\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={isPublic}\r\n                  onChange={(e) => setIsPublic(e.target.checked)}\r\n                >\r\n                  Make Public\r\n                </Checkbox>\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={allowReviews}\r\n                  onChange={(e) => setAllowReviews(e.target.checked)}\r\n                >\r\n                  Allow Reviews\r\n                </Checkbox>\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Checkbox\r\n                  checked={allowComments}\r\n                  onChange={(e) => setAllowComments(e.target.checked)}\r\n                >\r\n                  Allow Comments\r\n                </Checkbox>\r\n              </Form.Item>\r\n            </>\r\n          )}\r\n          {loading ? (\r\n            <LoadingOutlined style={{ color: \"#ff7700\", fontSize: \"30px\" }} />\r\n          ) : (\r\n            <Button\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                border: \"none\",\r\n                color: \"white\",\r\n                marginTop: \"5px\",\r\n              }}\r\n              onClick={() => createNewBlog()}\r\n            >\r\n              {t(\"adminDashboard.create\")}\r\n            </Button>\r\n          )}\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewBlog;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AdminDashboard.js",["609","610"],"import React, { useContext, useState } from \"react\";\r\nimport \"../assets/adminDashboard.css\";\r\nimport Logo from \"../images/logo_orange.png\";\r\nimport { Avatar, Popover, Layout, Menu, Modal } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  CaretDownOutlined,\r\n  ShopOutlined,\r\n  NotificationOutlined,\r\n  AuditOutlined,\r\n  FolderViewOutlined,\r\n  VideoCameraAddOutlined,\r\n  UserAddOutlined,\r\n  InsertRowBelowOutlined,\r\n  CoffeeOutlined,\r\n  ControlOutlined,\r\n  QuestionCircleOutlined,\r\n  ExclamationCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { VFSBrowser } from \"../components/Admin/MediaManager/MediaManager\";\r\nimport AllChallenges from \"../components/Admin/ChallengeManager/AllChallenges\";\r\nimport NewChallenge from \"../components/Admin/ChallengeManager/NewChallenge\";\r\nimport AllExercises from \"../components/Admin/ExerciseManager/AllExercises\";\r\nimport NewExercise from \"../components/Admin/ExerciseManager/NewExercise\";\r\nimport NewUser from \"../components/Admin/UserManager/NewUser\";\r\nimport AllUsers from \"../components/Admin/UserManager/AllUsers\";\r\nimport AllProducts from \"../components/Admin/ShopManager/AllProducts\";\r\nimport NewProduct from \"../components/Admin/ShopManager/NewProduct\";\r\nimport AllRecipes from \"../components/Admin/RecipeManager/AllRecipes\";\r\nimport NewRecipe from \"../components/Admin/RecipeManager/NewRecipe\";\r\nimport AllBlogs from \"../components/Admin/BlogManager/AllBlogs\";\r\nimport NewBlog from \"../components/Admin/BlogManager/NewBlog\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport AllMemberships from \"../components/Admin/MembershipManager/AllMemberships\";\r\nimport NewMembership from \"../components/Admin/MembershipManager/NewMembership\";\r\nimport AllCoupons from \"../components/Admin/Coupons/AllCoupons\";\r\nimport NewCoupon from \"../components/Admin/Coupons/NewCoupon\";\r\nimport AllPosts from \"../components/Admin/PostsManager/AllPosts\";\r\n\r\nimport { userInfoContext } from \"../contexts/UserStore\";\r\nimport { logoutUser } from \"../services/authentication\";\r\nimport UpdateChallenge from \"../components/Admin/ChallengeManager/UpdateChallenge\";\r\nimport NewPost from \"../components/Admin/PostsManager/NewPost\";\r\nimport AllFaqs from \"../components/Admin/FaqManager/AllFaqs\";\r\nimport NewFaq from \"../components/Admin/FaqManager/NewFaq\";\r\nimport AllRequests from \"../components/Admin/RequestManager/AllRequests\";\r\n\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nfunction AdminDashboard(props) {\r\n  // eslint-disable-next-line\r\n  const [t] = useTranslation();\r\n  const [adminInfo, setAdminInfo] = useContext(userInfoContext);\r\n  const [currentSelection, setCurrentSelection] = useState(1);\r\n  const [selectedChallengeForUpdate, setSelectedChallengeForUpdate] = useState(\r\n    {}\r\n  );\r\n  const content = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      <Link to=\"/user/profile\" className=\"font-paragraph-white\">\r\n        {t(\"admin.profile_setting\")}\r\n      </Link>\r\n      <Link\r\n        className=\"font-paragraphw-white hover-orange\"\r\n        onClick={() => logoutUser(props.history, setAdminInfo)}\r\n      >\r\n        {t(\"admin.logout\")}\r\n      </Link>\r\n    </div>\r\n  );\r\n\r\n  function showConfirm(newPath) {\r\n    Modal.confirm({\r\n      title: (\r\n        <p className=\"font-paragraph-white\">\r\n          Are you sure, you want to leave before saving? All your progress will\r\n          be lost\r\n        </p>\r\n      ),\r\n      icon: null,\r\n      onOk() {\r\n        // console.log(\"OK\");\r\n        setCurrentSelection(newPath);\r\n      },\r\n      onCancel() {\r\n        console.log(\"Cancel\");\r\n      },\r\n    });\r\n  }\r\n\r\n  const checkBeforeMoving = (newLocation) => {\r\n    if (\r\n      currentSelection === 1.2 ||\r\n      currentSelection === 2.2 ||\r\n      currentSelection === 4.2 ||\r\n      currentSelection === 5.2 ||\r\n      currentSelection === 6.2 ||\r\n      currentSelection === 7.2 ||\r\n      currentSelection === 8.2 ||\r\n      currentSelection === 9.2 ||\r\n      currentSelection === 10.2 ||\r\n      currentSelection === 11.2\r\n    ) {\r\n      // alert(\"Are you sure you wanna do that pussy?\");\r\n      showConfirm(newLocation);\r\n      // setCurrentSelection(newLocation);\r\n    } else {\r\n      setCurrentSelection(newLocation);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {/* admin navbar */}\r\n      <div className=\"admin-dashboard-navbar\">\r\n        <div>\r\n          <Link to=\"/admin/dashboard\" className=\"navbar-logo\">\r\n            <img src={Logo} alt=\"logo\" className=\"logo small-screenlogo\" />\r\n          </Link>\r\n        </div>\r\n        <div className=\"loggedin-nav-userinfo\" style={{ width: \"150px\" }}>\r\n          <Avatar\r\n            shape=\"square\"\r\n            src={adminInfo.avatar}\r\n            icon={<UserOutlined />}\r\n          />\r\n          <Popover placement=\"bottom\" content={content} trigger=\"click\">\r\n            <div className=\"loggedin-nav-name font-paragraph-white\">\r\n              <span>\r\n                {adminInfo.username} <CaretDownOutlined />\r\n              </span>\r\n            </div>\r\n          </Popover>\r\n        </div>\r\n      </div>\r\n      {/* admin sidebar */}\r\n      {/* admin main container */}\r\n      <div className=\"admin-dashboard-container\">\r\n        <Layout style={{ minHeight: \"100vh\" }}>\r\n          <Sider\r\n            breakpoint=\"lg\"\r\n            collapsedWidth=\"0\"\r\n            style={{ minHeight: \"150vh\", background: \"var(--color-gray-dark)\" }}\r\n            onBreakpoint={(broken) => {\r\n              console.log(broken);\r\n            }}\r\n            onCollapse={(collapsed, type) => {\r\n              console.log(collapsed, type);\r\n            }}\r\n            onConte\r\n          >\r\n            <div className=\"logo\" />\r\n            <Menu\r\n              theme=\"dark\"\r\n              mode=\"inline\"\r\n              style={{ backgroundColor: \"var(--color-gray-dark)\" }}\r\n              defaultSelectedKeys={[\"1\"]}\r\n            >\r\n              {/* <Menu.Item\r\n                key=\"0\"\r\n                icon={<AuditOutlined />}\r\n                onClick={() => setCurrentSelection(0)}\r\n              >\r\n                {t(\"admin.requests\")}\r\n              </Menu.Item> */}\r\n\r\n              {adminInfo.role === \"admin\" && (\r\n                <SubMenu key=\"1\" icon={<ShopOutlined />} title=\"Manage Shop\">\r\n                  <Menu.Item\r\n                    key=\"1.1\"\r\n                    onClick={() => checkBeforeMoving(1.1)}\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 1.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 1.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                  >\r\n                    {t(\"admin.all_products\")}\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"1.2\"\r\n                    onClick={() => checkBeforeMoving(1.2)}\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 1.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 1.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                  >\r\n                    {t(\"admin.new_product\")}\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              {adminInfo.role === \"admin\" && (\r\n                <Menu.Item\r\n                  key=\"12\"\r\n                  icon={<FolderViewOutlined />}\r\n                  style={{\r\n                    backgroundColor:\r\n                      currentSelection === 12\r\n                        ? \"var(--color-orange)\"\r\n                        : \"transparent\",\r\n                    color: currentSelection === 12 ? \"#fff\" : \"\",\r\n                  }}\r\n                  onClick={() => checkBeforeMoving(12)}\r\n                >\r\n                  Manage Requests\r\n                </Menu.Item>\r\n              )}\r\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"blogger\") && (\r\n                <SubMenu key=\"2\" icon={<CoffeeOutlined />} title=\"Manage Blogs\">\r\n                  <Menu.Item\r\n                    key=\"2.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 2.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 2.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(2.1)}\r\n                  >\r\n                    {t(\"admin.all_blogs\")}\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"2.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 2.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 2.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(2.2)}\r\n                  >\r\n                    {t(\"admin.new_blog\")}\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              <Menu.Item\r\n                key=\"3\"\r\n                icon={<FolderViewOutlined />}\r\n                style={{\r\n                  backgroundColor:\r\n                    currentSelection === 3\r\n                      ? \"var(--color-orange)\"\r\n                      : \"transparent\",\r\n                  color: currentSelection === 3 ? \"#fff\" : \"\",\r\n                }}\r\n                onClick={() => checkBeforeMoving(3)}\r\n              >\r\n                {t(\"admin.media_manager\")}\r\n              </Menu.Item>\r\n\r\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"nutrist\") && (\r\n                <SubMenu key=\"4\" icon={<CoffeeOutlined />} title=\"Recipes\">\r\n                  <Menu.Item\r\n                    key=\"4.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 4.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 4.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(4.1)}\r\n                  >\r\n                    {t(\"admin.all_recipes\")}\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 4.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 4.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    key=\"4.2\"\r\n                    onClick={() => checkBeforeMoving(4.2)}\r\n                  >\r\n                    {t(\"admin.new_recipe\")}\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"trainer\") && (\r\n                <SubMenu key=\"5\" icon={<ControlOutlined />} title=\"Exercises\">\r\n                  <Menu.Item\r\n                    key=\"5.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 5.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 5.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(5.1)}\r\n                  >\r\n                    All Exercises\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"5.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 5.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 5.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(5.2)}\r\n                  >\r\n                    New Exercise\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"trainer\") && (\r\n                <SubMenu\r\n                  key=\"6\"\r\n                  icon={<VideoCameraAddOutlined />}\r\n                  title=\"Challenges\"\r\n                >\r\n                  <Menu.Item\r\n                    key=\"6.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 6.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 6.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(6.1)}\r\n                  >\r\n                    {t(\"admin.all_challenges\")}\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"6.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 6.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 6.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(6.2)}\r\n                  >\r\n                    {t(\"admin.new_challenge\")}\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              {adminInfo.role === \"admin\" && (\r\n                <SubMenu\r\n                  key=\"7\"\r\n                  icon={<UserAddOutlined />}\r\n                  title=\"Manage Users\"\r\n                >\r\n                  <Menu.Item\r\n                    key=\"7.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 7.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 7.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(7.1)}\r\n                  >\r\n                    {t(\"admin.all_users\")}\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"7.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 7.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 7.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(7.2)}\r\n                  >\r\n                    {t(\"admin.new_user\")}\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              {adminInfo.role === \"admin\" && (\r\n                <SubMenu\r\n                  key=\"8\"\r\n                  icon={<InsertRowBelowOutlined />}\r\n                  title=\"Manage Posts\"\r\n                >\r\n                  <Menu.Item\r\n                    key=\"8.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 8.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 8.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(8.1)}\r\n                  >\r\n                    All Posts\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"8.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 8.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 8.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(8.2)}\r\n                  >\r\n                    New Post\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              {/* {adminInfo.role === \"admin\" && (\r\n                <SubMenu\r\n                  key=\"9\"\r\n                  icon={<InsertRowBelowOutlined />}\r\n                  title=\"Membership\"\r\n                >\r\n                  <Menu.Item\r\n                    key=\"9.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 9.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 9.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(9.1)}\r\n                  >\r\n                    {t(\"admin.all_membership\")}\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"9.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 9.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 9.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(9.2)}\r\n                  >\r\n                    {t(\"admin.new_membership\")}\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )} */}\r\n              {adminInfo.role === \"admin\" && (\r\n                <SubMenu\r\n                  key=\"10\"\r\n                  icon={<NotificationOutlined />}\r\n                  title=\"Manage Coupons\"\r\n                >\r\n                  <Menu.Item\r\n                    key=\"10.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 10.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 10.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(10.1)}\r\n                  >\r\n                    {t(\"admin.all_coupons\")}\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"10.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 10.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 10.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(10.2)}\r\n                  >\r\n                    {t(\"admin.new_coupons\")}\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n              {adminInfo.role === \"admin\" && (\r\n                <SubMenu\r\n                  key=\"11\"\r\n                  icon={<QuestionCircleOutlined />}\r\n                  title=\"Help Center\"\r\n                >\r\n                  <Menu.Item\r\n                    key=\"11.1\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 11.1\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 11.1 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(11.1)}\r\n                  >\r\n                    All Faqs\r\n                  </Menu.Item>\r\n                  <Menu.Item\r\n                    key=\"11.2\"\r\n                    style={{\r\n                      backgroundColor:\r\n                        currentSelection === 11.2\r\n                          ? \"var(--color-orange)\"\r\n                          : \"transparent\",\r\n                      color: currentSelection === 11.2 ? \"#fff\" : \"\",\r\n                    }}\r\n                    onClick={() => checkBeforeMoving(11.2)}\r\n                  >\r\n                    New Faq\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n              )}\r\n            </Menu>\r\n          </Sider>\r\n          <div className=\"admin-dashboard-container-main\">\r\n            {currentSelection === 3 && <VFSBrowser />}\r\n            {currentSelection === 1.1 && <AllProducts />}\r\n            {currentSelection === 1.2 && <NewProduct />}\r\n            {currentSelection === 2.1 && <AllBlogs />}\r\n            {currentSelection === 2.2 && (\r\n              <NewBlog setCurrentSelection={setCurrentSelection} />\r\n            )}\r\n            {currentSelection === 4.1 && <AllRecipes />}\r\n            {currentSelection === 4.2 && (\r\n              <NewRecipe setCurrentSelection={setCurrentSelection} />\r\n            )}\r\n            {currentSelection === 5.1 && <AllExercises />}\r\n            {currentSelection === 5.2 && (\r\n              <NewExercise\r\n                setCurrentSelection={setCurrentSelection}\r\n                home={5.1}\r\n              />\r\n            )}\r\n\r\n            {currentSelection === 6.1 && (\r\n              <AllChallenges\r\n                setSelectedChallengeForUpdate={setSelectedChallengeForUpdate}\r\n                selectedChallengeForUpdate={selectedChallengeForUpdate}\r\n                setCurrentSelection={setCurrentSelection}\r\n                currentSelection={currentSelection}\r\n              />\r\n            )}\r\n            {currentSelection === 6.2 && <NewChallenge />}\r\n            {currentSelection === 5.3 && (\r\n              <UpdateChallenge\r\n                key={\r\n                  selectedChallengeForUpdate\r\n                    ? selectedChallengeForUpdate._id\r\n                    : \"\"\r\n                }\r\n                setSelectedChallengeForUpdate={setSelectedChallengeForUpdate}\r\n                selectedChallengeForUpdate={selectedChallengeForUpdate}\r\n                setCurrentSelection={setCurrentSelection}\r\n                currentSelection={currentSelection}\r\n              />\r\n            )}\r\n\r\n            {currentSelection === 7.1 && <AllUsers />}\r\n            {currentSelection === 7.2 && (\r\n              <NewUser setCurrentSelection={setCurrentSelection} home={7.1} />\r\n            )}\r\n            {currentSelection === 8.1 && <AllPosts />}\r\n            {currentSelection === 8.2 && (\r\n              <NewPost setCurrentSelection={setCurrentSelection} home={8.1} />\r\n            )}\r\n            {currentSelection === 9.1 && <AllMemberships />}\r\n            {currentSelection === 9.2 && <NewMembership />}\r\n            {currentSelection === 10.1 && <AllCoupons />}\r\n            {currentSelection === 10.2 && (\r\n              <NewCoupon\r\n                setCurrentSelection={setCurrentSelection}\r\n                home={10.1}\r\n              />\r\n            )}\r\n            {currentSelection === 11.1 && <AllFaqs />}\r\n            {currentSelection === 11.2 && (\r\n              <NewFaq setCurrentSelection={setCurrentSelection} home={11.1} />\r\n            )}\r\n            {currentSelection === 12 && <AllRequests />}\r\n          </div>\r\n        </Layout>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(AdminDashboard);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\blogs.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\UpdateBlog.js",["611","612"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeAdditionalTab.js",["613","614","615","616","617"],"import React, { useState, useContext } from \"react\";\r\nimport { Select, Input, Button, Checkbox, Upload, List, message } from \"antd\";\r\nimport { v4 } from \"uuid\";\r\nimport { UploadOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\n\r\nconst Option = Select.Option;\r\n\r\nfunction NewChallengeAdditionalTab({\r\n  results,\r\n  setResults,\r\n  allProducts,\r\n  setAllProducts,\r\n  makePublic,\r\n  setMakePublic,\r\n  allowComments,\r\n  setAllowComments,\r\n  allowReviews,\r\n  setAllowReviews,\r\n  additionalProducts,\r\n  setAdditionalProducts,\r\n  informationList,\r\n  setInformationList,\r\n  createChallenge,\r\n  update,\r\n  updateChallenge,\r\n  userCreatePost,\r\n  setUserCreatePost,\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const userInfo = useContext(userInfoContext)[0];\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  var info = {\r\n    id: v4(),\r\n    icon: \"\",\r\n    thumbnailBase64: \"\",\r\n    text: \"\",\r\n  };\r\n\r\n  const handleInfoTextChange = (value, id) => {\r\n    let w = [...informationList];\r\n    w = w.map((i) => {\r\n      if (i.id === id) {\r\n        return {\r\n          ...i,\r\n          text: value,\r\n        };\r\n      }\r\n      return i;\r\n    });\r\n    setInformationList(w);\r\n  };\r\n  const addInfoToList = () => {\r\n    setInformationList((prev) => [...prev, info]);\r\n  };\r\n  const uploadIcon = (id, file) => {\r\n    var infoList = informationList.map((i) => {\r\n      if (i.id === id) {\r\n        return {\r\n          ...i,\r\n          file: file,\r\n        };\r\n      }\r\n      return i;\r\n    });\r\n    console.log(infoList);\r\n    setInformationList(infoList);\r\n  };\r\n\r\n  const removeListItem = (id) => {\r\n    var n = informationList.filter((i) => i.id !== id);\r\n    setInformationList(n);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <RemoteMediaManager\r\n          visible={mediaManagerVisible}\r\n          setVisible={setMediaManagerVisible}\r\n          type={mediaManagerType}\r\n          actions={mediaManagerActions}\r\n        />\r\n        <p className=\"font-subheading-black\">\r\n          {t(\"adminDashboard.challenges.sp\")}\r\n        </p>\r\n        <Select\r\n          mode=\"multiple\"\r\n          showSearch\r\n          style={{ width: \"100%\" }}\r\n          optionFilterProp=\"children\"\r\n          value={additionalProducts}\r\n          onChange={(e) => setAdditionalProducts(e)}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {allProducts.map((m, i) => (\r\n            <Option value={m._id}>{m.name}</Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      <div>\r\n        <p className=\"font-subheading-black\">Results</p>\r\n        <Input.TextArea\r\n          className=\"font-paragraph-black\"\r\n          value={results}\r\n          onChange={(e) => setResults(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <p className=\"font-subheading-black\">\r\n          {t(\"adminDashboard.challenges.il\")}\r\n        </p>\r\n        {/* <Input.TextArea\r\n          maxLength={200}\r\n          showCount\r\n          className=\"font-paragraph-black\"\r\n          value={info}\r\n          onChange={(e) => setInfo(e.target.value)}\r\n        /> */}\r\n        <List\r\n          header={\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n              <Button onClick={addInfoToList}>\r\n                {t(\"adminDashboard.challenges.af\")}\r\n              </Button>\r\n            </div>\r\n          }\r\n          footer={false}\r\n          bordered\r\n          dataSource={informationList}\r\n          renderItem={(info) => (\r\n            <List.Item\r\n              key={info.id}\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: \"0.1fr 1fr 1fr\",\r\n                gridGap: \"20px\",\r\n              }}\r\n            >\r\n              <Button type=\"danger\" onClick={() => removeListItem(info.id)}>\r\n                X\r\n              </Button>\r\n              <Input.TextArea\r\n                rows={4}\r\n                placeholder=\"Input Information\"\r\n                value={info.text}\r\n                onChange={(e) => handleInfoTextChange(e.target.value, info.id)}\r\n              />\r\n              <div>\r\n                {/* <Upload\r\n                  showUploadList={false}\r\n                  beforeUpload={beforeUpload}\r\n                  customRequest={dummyRequest}\r\n                  onChange={(e) => handleChange(e, info.id)}\r\n                  style={{ width: \"100px\" }}\r\n                > */}\r\n                {info.file ? (\r\n                  <img\r\n                    src={`${process.env.REACT_APP_SERVER}/api${info.file.link}`}\r\n                    alt=\"\"\r\n                    height=\"100px\"\r\n                    width=\"120px\"\r\n                  />\r\n                ) : (\r\n                  <>\r\n                    <p\r\n                      className=\"font-paragraph-white\"\r\n                      style={{\r\n                        color: \"var(--color-orange)\",\r\n                        fontWeight: \"600\",\r\n                      }}\r\n                    >\r\n                      Upload Icon\r\n                    </p>\r\n                    <Button\r\n                      className=\"new-workout-creator-container-1-btn font-paragraph-white\"\r\n                      style={{ marginTop: 0 }}\r\n                      onClick={() => {\r\n                        setMediaManagerVisible(true);\r\n                        setMediaManagerType(\"images\");\r\n                        setMediaManagerActions([\"\", uploadIcon, info.id]);\r\n                      }}\r\n                      icon={<UploadOutlined />}\r\n                    >\r\n                      Click to Upload\r\n                    </Button>\r\n                  </>\r\n                )}\r\n\r\n                {/* </Upload> */}\r\n              </div>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </div>\r\n      {userInfo.role === \"admin\" && (\r\n        <>\r\n          <div>\r\n            <Checkbox\r\n              checked={allowComments}\r\n              onChange={(e) => setAllowComments(e.target.checked)}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              {t(\"adminDashboard.challenges.allowcb\")}\r\n            </Checkbox>\r\n          </div>\r\n          <div>\r\n            <Checkbox\r\n              checked={allowReviews}\r\n              onChange={(e) => setAllowReviews(e.target.checked)}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              {t(\"adminDashboard.challenges.allowrv\")}\r\n            </Checkbox>\r\n          </div>\r\n          <div>\r\n            <Checkbox\r\n              checked={makePublic}\r\n              onChange={(e) => setMakePublic(e.target.checked)}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              {t(\"adminDashboard.challenges.mp\")}\r\n            </Checkbox>\r\n          </div>\r\n          {!update && (\r\n            <div>\r\n              <Checkbox\r\n                checked={userCreatePost}\r\n                onChange={(e) => setUserCreatePost(e.target.checked)}\r\n                className=\"font-paragraph-black\"\r\n              >\r\n                Create a post\r\n              </Checkbox>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n      {update ? (\r\n        <Button\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            backgroundColor: \"var(--color-orange)\",\r\n            border: \"none\",\r\n            marginTop: \"20px\",\r\n          }}\r\n          onClick={updateChallenge}\r\n        >\r\n          Update Challenge\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            backgroundColor: \"var(--color-orange)\",\r\n            border: \"none\",\r\n            marginTop: \"20px\",\r\n          }}\r\n          onClick={createChallenge}\r\n        >\r\n          {t(\"adminDashboard.challenges.createAC\")}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewChallengeAdditionalTab;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\AllBlogs.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\recipes.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\AllRecipes.js",["618"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\main.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\AllChallenges.js",["619"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Tag, Table, Space, Input } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  getAllUserChallenges,\r\n  removeChallenge,\r\n} from \"../../../services/createChallenge/main\";\r\nimport { Select } from \"antd\";\r\nimport UpdateChallenge from \"./UpdateChallenge\";\r\nimport { getAllTrainers } from \"../../../services/trainers\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport slug from \"elegant-slug\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction AllChallenges({ setCurrentSelection, setSelectedChallengeForUpdate }) {\r\n  const [t] = useTranslation();\r\n  const [filterAllChallenges, setFilterAllChallenge] = useState([]);\r\n  const [allChallenges, setAllChallenges] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [allTrainers, setAllTrainers] = useState([]);\r\n  const userInfo = useContext(userInfoContext);\r\n\r\n  useEffect(() => {\r\n    if (filter === \"all\") {\r\n      setFilterAllChallenge(allChallenges);\r\n      return;\r\n    }\r\n    const admins = allChallenges.filter((c) =>\r\n      c.trainers.some((t) => t.username === filter)\r\n    );\r\n    setFilterAllChallenge(admins);\r\n  }, [allChallenges, filter]);\r\n\r\n  useEffect(() => {\r\n    fetchChallenges();\r\n  }, []);\r\n\r\n  const fetchChallenges = async () => {\r\n    const c = await getAllUserChallenges();\r\n    const t = await getAllTrainers();\r\n    console.log(\"trainers\", t);\r\n    console.log(c);\r\n    setAllChallenges(c.challenges);\r\n    setAllTrainers(t.trainers);\r\n    setFilterAllChallenge(c.challenges);\r\n  };\r\n\r\n  const openChallengeUpdater = (record) => {\r\n    setSelectedChallengeForUpdate(record);\r\n    setCurrentSelection(5.3);\r\n    // setShow(true);\r\n  };\r\n\r\n  const deleteChallenge = async (c) => {\r\n    await removeChallenge(c._id);\r\n    fetchChallenges();\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Challenge ID\",\r\n      dataIndex: \"_id\",\r\n      key: \"_id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Challenge Name\",\r\n      dataIndex: \"challengeName\",\r\n      key: \"challengeName\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Updated At\",\r\n      dataIndex: \"createdAt\",\r\n      key: \"createdAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      dataIndex: \"price\",\r\n      key: \"price\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Points\",\r\n      dataIndex: \"points\",\r\n      key: \"points\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Trainers\",\r\n      key: \"trainers\",\r\n      dataIndex: \"trainers\",\r\n      render: (tags) => (\r\n        <>\r\n          {tags.map((tag) => {\r\n            return (\r\n              <Tag color={\"volcano\"} key={tag._id}>\r\n                {tag.firstName}\r\n              </Tag>\r\n            );\r\n          })}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Access\",\r\n      key: \"access\",\r\n      dataIndex: \"access\",\r\n      render: (tags) => (\r\n        <>\r\n          {tags.map((tag) => {\r\n            let color = tag.length > 5 ? \"orange\" : \"orange\";\r\n            if (tag === \"loser\") {\r\n              color = \"volcano\";\r\n            }\r\n            return (\r\n              <Tag color={color} key={tag}>\r\n                {tag.toUpperCase()}\r\n              </Tag>\r\n            );\r\n          })}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          {/* <Button\r\n            type=\"primary\"\r\n            onClick={() => duplicateChallenge(text, record)}\r\n          >\r\n            {t(\"adminDashboard.duplicate\")}\r\n          </Button>\r\n          <Button type=\"primary\">{t(\"adminDashboard.preview\")}</Button>*/}\r\n          <Link\r\n            to={`/challenge/${slug(text.challengeName)}/${text._id}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" \"}\r\n            <Button type=\"primary\">{t(\"adminDashboard.preview\")}</Button>\r\n          </Link>\r\n          <Button type=\"primary\" onClick={() => openChallengeUpdater(record)}>\r\n            {t(\"adminDashboard.edit\")}\r\n          </Button>\r\n          <Button type=\"danger\" onClick={() => deleteChallenge(text)}>\r\n            {t(\"adminDashboard.delete\")}\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // const duplicateChallenge = (i, r) => {\r\n  //   setAllChallenges([...allChallenges, { ...i, id: i.id + 10 }]);\r\n  // };\r\n  return (\r\n    <div>\r\n      <h2 className=\"font-heading-black\">\r\n        {t(\"adminDashboard.challenges.all\")}\r\n      </h2>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        {userInfo.role === \"admin\" && (\r\n          <div>\r\n            <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\r\n              Filter By Trainer:\r\n            </span>\r\n            <Select\r\n              defaultValue=\"\"\r\n              style={{ width: 120, marginLeft: \"10px\" }}\r\n              onChange={(e) => setFilter(e)}\r\n            >\r\n              <Select.Option key={1} value={\"all\"}>\r\n                All\r\n              </Select.Option>\r\n              {allTrainers &&\r\n                allTrainers.map((t, i) => (\r\n                  <Select.Option key={i} value={t.username}>\r\n                    {t.username}\r\n                  </Select.Option>\r\n                ))}\r\n            </Select>\r\n          </div>\r\n        )}\r\n        <Input\r\n          placeholder=\"Search Challenge\"\r\n          onChange={(e) =>\r\n            setFilterAllChallenge(\r\n              allChallenges.filter((challenge) =>\r\n                challenge.challengeName\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Input\r\n          style={{ marginTop: \"10px\" }}\r\n          placeholder=\"Search Challenge By ID\"\r\n          onChange={(e) =>\r\n            setFilterAllChallenge(\r\n              allChallenges.filter((challenge) =>\r\n                challenge._id\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Table columns={columns} dataSource={filterAllChallenges} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllChallenges;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\AllExercises.js",["620"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Select, Table, Space, Input } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  getAllUserExercises,\r\n  removeExercise,\r\n} from \"../../../services/createChallenge/main\";\r\nimport UpdateExercise from \"./UpdateExercise\";\r\nimport { getAllTrainers } from \"../../../services/trainers\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\n// import UpdateExercises from \"./UpdateExercises\";\r\n\r\nfunction AllExercises() {\r\n  const [t] = useTranslation();\r\n  const [filterAllExercises, setFilterAllExercises] = useState([]);\r\n  const [allExercises, setAllExercises] = useState([]);\r\n  const [selectedExercisesForUpdate, setSelectedExercisesForUpdate] = useState(\r\n    {}\r\n  );\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [allTrainers, setAllTrainers] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n\r\n  useEffect(() => {\r\n    fetchExercises();\r\n    fetchTrainers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filter === \"all\") {\r\n      setFilterAllExercises(allExercises);\r\n      return;\r\n    }\r\n    // console.log(allExercises)\r\n    const admins = allExercises.filter((e) => e.trainer._id === filter);\r\n    setFilterAllExercises(admins);\r\n  }, [allExercises, filter]);\r\n\r\n  const fetchTrainers = async () => {\r\n    const res = await getAllTrainers();\r\n    if (res) {\r\n      setAllTrainers(res.trainers);\r\n    }\r\n  };\r\n\r\n  const fetchExercises = async () => {\r\n    const c = await getAllUserExercises();\r\n    console.log(\"===================>\", c);\r\n    setAllExercises(c.exercises);\r\n    setFilterAllExercises(c.exercises);\r\n  };\r\n\r\n  const openExercisesUpdater = (record) => {\r\n    setSelectedExercisesForUpdate(record);\r\n    setOpenModal(true);\r\n  };\r\n\r\n  const deleteExercises = async (c) => {\r\n    await removeExercise(c._id);\r\n    fetchExercises();\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Exercise ID\",\r\n      dataIndex: \"_id\",\r\n      key: \"_id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Exercise Name\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Trainer\",\r\n      dataIndex: \"trainer\",\r\n      key: \"trainer\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text.username}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Updated At\",\r\n      dataIndex: \"updatedAt\",\r\n      key: \"updatedAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Created By\",\r\n      dataIndex: \"user\",\r\n      key: \"user\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text && text.username}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"primary\" onClick={() => openExercisesUpdater(record)}>\r\n            {t(\"adminDashboard.edit\")}\r\n          </Button>\r\n          <Button type=\"danger\" onClick={() => deleteExercises(text)}>\r\n            {t(\"adminDashboard.delete\")}\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // const duplicateExercises = (i, r) => {\r\n  //   setAllExercises([...allExercises, { ...i, id: i.id + 10 }]);\r\n  // };\r\n  return (\r\n    <div>\r\n      <UpdateExercise\r\n        show={openModal}\r\n        setShow={setOpenModal}\r\n        key={selectedExercisesForUpdate ? selectedExercisesForUpdate._id : \"\"}\r\n        exerciseValues={selectedExercisesForUpdate}\r\n        fetchExercises={fetchExercises}\r\n        allTrainers={allTrainers}\r\n      />\r\n      <h2 className=\"font-heading-black\">All Exercises</h2>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        {userInfo.role === \"admin\" && (\r\n          <div>\r\n            <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\r\n              Filter By Trainer:\r\n            </span>\r\n\r\n            <Select\r\n              defaultValue=\"\"\r\n              style={{ width: 120, marginLeft: \"10px\" }}\r\n              onChange={(e) => setFilter(e)}\r\n            >\r\n              <Select.Option key={1} value={\"all\"}>\r\n                All\r\n              </Select.Option>\r\n              {allTrainers &&\r\n                allTrainers.map((t, i) => (\r\n                  <Select.Option key={i} value={t._id}>\r\n                    {t.username}\r\n                  </Select.Option>\r\n                ))}\r\n            </Select>\r\n          </div>\r\n        )}\r\n\r\n        <Input\r\n          placeholder=\"Search Exercises By Title\"\r\n          onChange={(e) =>\r\n            setFilterAllExercises(\r\n              allExercises.filter((exercise) =>\r\n                exercise.title\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n\r\n        <Input\r\n          style={{ marginTop: \"10px\" }}\r\n          placeholder=\"Search Exercises By ID\"\r\n          onChange={(e) =>\r\n            setFilterAllExercises(\r\n              allExercises.filter((exercise) =>\r\n                exercise._id\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Table columns={columns} dataSource={filterAllExercises} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllExercises;\r\n",["621","622"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\NewExercise.js",["623"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RequestManager\\AllRequests.js",["624","625","626"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Table, Space, Input, Select, Switch } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  getAllAdminRequests,\r\n  updateAdminRequest,\r\n} from \"../../../services/adminRequests\";\r\nimport slug from \"elegant-slug\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction AllRequests() {\r\n  const [t] = useTranslation();\r\n  const [filterAllData, setFilterAllData] = useState([]);\r\n  const [allData, setAllData] = useState([]);\r\n  const [requestsTypeFilter, setRequestsTypeFilter] = useState(\"challenge\");\r\n  const [requestsApprovedFilter, setRequestsApprovedFilter] =\r\n    useState(\"notApproved\");\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function updateRequestStatus(id, type, value) {\r\n    const res = await updateAdminRequest(\r\n      id,\r\n      type,\r\n      value === \"approved\" ? true : false\r\n    );\r\n    console.log(res);\r\n    fetchData();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (requestsTypeFilter === \"challenge\") {\r\n      if (requestsApprovedFilter === \"approved\") {\r\n        setFilterAllData(allData?.challenges?.filter((f) => f.adminApproved));\r\n      }\r\n      if (requestsApprovedFilter === \"notApproved\") {\r\n        setFilterAllData(allData?.challenges?.filter((f) => !f.adminApproved));\r\n      }\r\n    }\r\n    if (requestsTypeFilter === \"recipe\") {\r\n      if (requestsApprovedFilter === \"approved\") {\r\n        setFilterAllData(allData?.recipes?.filter((f) => f.adminApproved));\r\n      }\r\n      if (requestsApprovedFilter === \"notApproved\") {\r\n        setFilterAllData(allData?.recipes?.filter((f) => !f.adminApproved));\r\n      }\r\n    }\r\n    if (requestsTypeFilter === \"magazine\") {\r\n      if (requestsApprovedFilter === \"approved\") {\r\n        setFilterAllData(allData?.blogs?.filter((f) => f.adminApproved));\r\n      }\r\n      if (requestsApprovedFilter === \"notApproved\") {\r\n        setFilterAllData(allData?.blogs?.filter((f) => !f.adminApproved));\r\n      }\r\n    }\r\n  }, [requestsApprovedFilter, allData, requestsTypeFilter]);\r\n\r\n  const fetchData = async () => {\r\n    const data = await getAllAdminRequests();\r\n    setAllData(data.res);\r\n    console.log(\"all magazines\", data.res);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"_id\",\r\n      key: \"_id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Type\",\r\n      dataIndex: \"type\",\r\n      key: \"type\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{requestsTypeFilter}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      key: \"bang\",\r\n      render: (text, record) =>\r\n        text.name\r\n          ? text.name\r\n          : text.challengeName\r\n          ? text.challengeName\r\n          : text.title\r\n          ? text.title\r\n          : \"\",\r\n    },\r\n    {\r\n      title: \"Is Public\",\r\n      dataIndex: \"isPublic\",\r\n      key: \"isPublic\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text ? \"True\" : \"False\"}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Admin Approved\",\r\n      dataIndex: \"adminApproved\",\r\n      key: \"adminApproved\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text ? \"True\" : \"False\"}</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Updated At\",\r\n      key: \"updatedAt\",\r\n      dataIndex: \"updatedAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <>\r\n          {console.log(\"yas\", text)}\r\n          <Link\r\n            to={`/${requestsTypeFilter}/${slug(\r\n              text.name\r\n                ? text.name\r\n                : text.challengeName\r\n                ? text.challengeName\r\n                : text.title\r\n                ? text.title\r\n                : \"\"\r\n            )}/${text._id}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" \"}\r\n            <Button type=\"primary\">{t(\"adminDashboard.preview\")}</Button>\r\n          </Link>\r\n\r\n          <Select\r\n            style={{ width: 150, marginLeft: \"10px\" }}\r\n            value={text.adminApproved ? \"approved\" : \"notApproved\"}\r\n            onChange={(e) =>\r\n              updateRequestStatus(text._id, requestsTypeFilter, e)\r\n            }\r\n          >\r\n            <Select.Option key={1} value={\"approved\"}>\r\n              Approved\r\n            </Select.Option>\r\n            <Select.Option key={2} value={\"notApproved\"}>\r\n              Not Approved\r\n            </Select.Option>\r\n          </Select>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <h2 className=\"font-heading-black\">Manage Requets</h2>\r\n      <div style={{ display: \"flex\" }}>\r\n        <div>\r\n          <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\r\n            Filter By Type:\r\n          </span>\r\n          <Select\r\n            defaultValue={requestsTypeFilter}\r\n            style={{ width: 120, marginLeft: \"10px\" }}\r\n            onChange={(e) => setRequestsTypeFilter(e)}\r\n          >\r\n            <Select.Option key={1} value={\"challenge\"}>\r\n              Challenges\r\n            </Select.Option>\r\n            <Select.Option key={2} value={\"recipe\"}>\r\n              Recipes\r\n            </Select.Option>\r\n            <Select.Option key={3} value={\"magazine\"}>\r\n              Blogs\r\n            </Select.Option>\r\n          </Select>\r\n        </div>\r\n        <div style={{ marginLeft: \"20px\" }}>\r\n          <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\r\n            Filter By Status:\r\n          </span>\r\n          <Select\r\n            defaultValue={requestsApprovedFilter}\r\n            style={{ width: 150, marginLeft: \"10px\" }}\r\n            onChange={(e) => setRequestsApprovedFilter(e)}\r\n          >\r\n            <Select.Option key={1} value={\"notApproved\"}>\r\n              Not Approved\r\n            </Select.Option>\r\n            <Select.Option key={2} value={\"approved\"}>\r\n              Approved\r\n            </Select.Option>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        <Table columns={columns} dataSource={filterAllData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllRequests;\r\n",["627","628"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\adminRequests.js",[],["629","630"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\index.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\LanguageContext.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Login.js",["631","632","633","634","635","636"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Input, Form } from \"antd\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport \"../assets/login.css\";\r\nimport \"../assets/home.css\";\r\nimport FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport Logo from \"../images/logo.png\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  loginUser,\r\n  loginUserWithGoogle,\r\n  loginUserWithFacebook,\r\n} from \"../services/authentication\";\r\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\r\nimport setAuthToken from \"../helpers/setAuthToken\";\r\nimport { getUserPoints } from \"../services/users\";\r\n\r\nfunction Login(props) {\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [userPoints, setUserPoints] = useContext(userPointsContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errror, setError] = useState(\"\");\r\n  const [t] = useTranslation();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"jwtToken\")) {\r\n      props.history.push(\"/user/dashboard\");\r\n    }\r\n  }, []);\r\n\r\n  const responseFacebook = async (response) => {\r\n    // setLoading(true);\r\n    const res = await loginUserWithFacebook({\r\n      id: response.id,\r\n      email: response.email,\r\n    });\r\n    if (!res.success) {\r\n      console.log(res);\r\n      setError(\"Unable to login.\");\r\n      // setLoading(false);\r\n    } else {\r\n      setError(\"\");\r\n      // setLoading(false);\r\n      setUserInfo({\r\n        ...userInfo,\r\n        id: res.res.user_id,\r\n        role: res.res.role,\r\n        username: res.res.username,\r\n        authenticated: true,\r\n      });\r\n      console.log(res);\r\n      localStorage.setItem(\"jwtToken\", res.res.token);\r\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n      // localStorage.setItem(\"role\", res.res.role);\r\n      if (\r\n        res.res.role === \"admin\" ||\r\n        res.res.role === \"trainer\" ||\r\n        res.res.role === \"nutrist\" ||\r\n        res.res.role === \"blogger\" ||\r\n        res.res.role === \"shopmanager\"\r\n      ) {\r\n        props.history.push(\"/admin/dashboard\");\r\n        return;\r\n      }\r\n      // \"admin\",\r\n      //   \"trainer\",\r\n      //   \"nutrist\",\r\n      //   \"blogger\",\r\n      //   \"shopmanager\",\r\n      if (res.res.role === \"customer\") {\r\n        props.history.push(\"/user/dashboard\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const responseGoogle = async (response) => {\r\n    return;\r\n    // setLoading(true);\r\n    console.log(\"response google\");\r\n    const res = await loginUserWithGoogle({\r\n      googleId: response.googleId,\r\n      email: response.profileObj.email,\r\n    });\r\n    if (!res.success) {\r\n      console.log(res);\r\n      setError(\"Unable to login.\");\r\n      // setLoading(false);\r\n    } else {\r\n      setError(\"\");\r\n      // setLoading(false);\r\n      setUserInfo({\r\n        ...userInfo,\r\n        id: res.res.user_id,\r\n        role: res.res.role,\r\n        username: res.res.username,\r\n        authenticated: true,\r\n      });\r\n      console.log(res);\r\n      localStorage.setItem(\"jwtToken\", res.res.token);\r\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n      // localStorage.setItem(\"role\", res.res.role);\r\n      if (res.res.role === \"admin\") {\r\n        props.history.push(\"/admin/dashboard\");\r\n        return;\r\n      }\r\n      if (res.res.role === \"customer\") {\r\n        props.history.push(\"/user/dashboard\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = () => {};\r\n  const onFinish = async (values) => {\r\n    setLoading(true);\r\n    const res = await loginUser(values.username, values.password);\r\n    if (!res.success) {\r\n      console.log(res);\r\n      setError(\r\n        \"Unable to login. Please make sure you've entered correct username and password.\"\r\n      );\r\n      setLoading(false);\r\n    } else {\r\n      setError(\"\");\r\n      setLoading(false);\r\n      setUserInfo({\r\n        ...userInfo,\r\n        id: res.res.user_id,\r\n        email: res.res.email,\r\n        // isActive: ,\r\n        role: res.res.role,\r\n        username: res.res.username,\r\n        authenticated: true,\r\n      });\r\n      console.log(\"res from login\", res);\r\n      localStorage.setItem(\"jwtToken\", res.res.token);\r\n      localStorage.setItem(\"isActive\", res.res.isActive);\r\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n      getUserPoints(userPoints, setUserPoints);\r\n      // localStorage.setItem(\"role\", res.res.role);\r\n      if (\r\n        res.res.role === \"admin\" ||\r\n        res.res.role === \"trainer\" ||\r\n        res.res.role === \"nutrist\" ||\r\n        res.res.role === \"blogger\" ||\r\n        res.res.role === \"shopmanager\"\r\n      ) {\r\n        props.history.push(\"/admin/dashboard\");\r\n        return;\r\n      }\r\n      if (res.res.role === \"customer\") {\r\n        props.history.push(\"/user/dashboard\");\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"login-container\">\r\n        <div className=\"login-container-column1\">\r\n          <img className=\"login-logo\" src={Logo} alt=\"logo\" />\r\n          <h1 className=\"font-heading-white\">{t(\"login.login\")}</h1>\r\n          <Form\r\n            layout=\"vertical\"\r\n            name=\"basic\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <div className=\"login-textfield-box\">\r\n              <Form.Item\r\n                label={\r\n                  <span className=\"font-paragraph-white\">\r\n                    {t(\"login.username\")}\r\n                  </span>\r\n                }\r\n                name=\"username\"\r\n                rules={[\r\n                  { required: true, message: \"Please input your username!\" },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"login-textfield-box\">\r\n              <Form.Item\r\n                label={\r\n                  <span className=\"font-paragraph-white\">\r\n                    {t(\"login.password\")}\r\n                  </span>\r\n                }\r\n                name=\"password\"\r\n                rules={[\r\n                  { required: true, message: \"Please input your password!\" },\r\n                ]}\r\n                hasFeedback\r\n              >\r\n                <Input.Password />\r\n              </Form.Item>\r\n            </div>\r\n            <Link to=\"/forgot-password\" className=\"login-forgot-password\">\r\n              {t(\"login.forgot_pass\")}\r\n            </Link>\r\n            <div style={{ textAlign: \"center\", margin: \"10px 0\" }}>\r\n              {loading ? (\r\n                <LoadingOutlined\r\n                  style={{ color: \"#ff7700\", fontSize: \"30px\" }}\r\n                />\r\n              ) : (\r\n                <button\r\n                  className=\"common-orange-button signup-btn\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  <span className=\"font-paragraph-white\">\r\n                    {t(\"login.login\")}\r\n                  </span>\r\n                </button>\r\n              )}\r\n            </div>\r\n            <p\r\n              className=\"font-paragraph-white\"\r\n              style={{ color: \"#ff4d4f\", margin: \"5px\" }}\r\n            >\r\n              {errror}\r\n            </p>\r\n          </Form>\r\n\r\n          <FacebookLogin\r\n            appId={process.env.REACT_APP_FACEBOOK_APP_ID}\r\n            fields=\"name,email,picture\"\r\n            callback={responseFacebook}\r\n            render={(renderProps) => (\r\n              <button\r\n                class=\"loginBtn loginBtn--facebook\"\r\n                onClick={renderProps.onClick}\r\n              >\r\n                Login With Facebook\r\n              </button>\r\n            )}\r\n          />\r\n          <GoogleLogin\r\n            clientId={process.env.REACT_APP_GOOGLE_APP_ID}\r\n            render={(renderProps) => (\r\n              <button\r\n                class=\"loginBtn loginBtn--google\"\r\n                onClick={renderProps.onClick}\r\n                disabled={renderProps.disabled}\r\n              >\r\n                Login with Google\r\n              </button>\r\n            )}\r\n            buttonText=\"Login\"\r\n            onSuccess={responseGoogle}\r\n            onFailure={responseGoogle}\r\n          />\r\n        </div>\r\n        <div className=\"login-container-column2\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n",["637","638"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Trainers.js",["639","640","641","642"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../assets/home.css\";\r\nimport \"../assets/trainers.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Input, Collapse } from \"antd\";\r\nimport { ArrowRightOutlined, SearchOutlined } from \"@ant-design/icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\r\nimport { getAllTrainers } from \"../services/trainers\";\r\nimport slug from 'elegant-slug';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst filterTextStyle = {\r\n  margin: 0,\r\n  padding: 0,\r\n  cursor: \"pointer\",\r\n  fontSize: \"16px\",\r\n  padding: \"5px 12px\",\r\n  marginRight: \"10px\",\r\n};\r\n\r\nfunction Trainers() {\r\n  const [name, setName] = useState(\"\");\r\n  const [t] = useTranslation();\r\n  // eslint-disable-next-line\r\n  const [allTrainers, setAllTrainers] = useState([]);\r\n  const [filterTrainers, setFilterTrainers] = useState([]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [filterGender, setFilterGender] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // setFilterTrainers(allTrainers);\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const g = allTrainers.filter((trainer) => trainer.gender === filterGender);\r\n    setFilterTrainers(g.length ? g : allTrainers);\r\n  }, [filterGender]);\r\n\r\n  const fetchData = async () => {\r\n    const data = await getAllTrainers();\r\n    // console.log(data);\r\n    setAllTrainers(data.trainers);\r\n    setFilterTrainers(data.trainers);\r\n    // setRecommandedChallenges(data.challenges);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      {/* <Hero /> */}\r\n      <div className=\"page-header\">\r\n        <div className=\"page-header-textbox\">\r\n          <h1 className=\"font-heading-white\">{t(\"trainers.skill\")}</h1>\r\n          <p className=\"font-paragraph-white\">{t(\"trainers.let_us\")}</p>\r\n        </div>\r\n      </div>\r\n      {/* 2nd row */}\r\n      <div style={{ backgroundColor: \"#222932\" }}>\r\n        <div className=\"trainers-2-row\">\r\n          <p className=\"font-paragraph-white\">\r\n            {t(\"trainers.real_challenge_coach\")}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      {/* trainers */}\r\n      <div style={{ backgroundColor: \"#171e27\" }}>\r\n        <div className=\"trainers-3-row\">\r\n          <Input\r\n            size=\"large\"\r\n            placeholder=\"Search Trainers By Name\"\r\n            style={{\r\n              // backgroundColor: \"transparent\",\r\n              padding: \"20px\",\r\n              color: \"#fff\",\r\n              fontSize: \"2rem\",\r\n              opacity: \"0.8\",\r\n            }}\r\n            value={searchText}\r\n            onChange={(e) => {\r\n              setSearchText(e.target.value);\r\n              setFilterTrainers(\r\n                allTrainers.filter((trainer) =>\r\n                  trainer.username\r\n                    .toUpperCase()\r\n                    .includes(e.target.value.toUpperCase())\r\n                )\r\n              );\r\n            }}\r\n            prefix={<SearchOutlined />}\r\n          />\r\n          <Collapse ghost>\r\n            <Panel\r\n              showArrow={false}\r\n              header={\r\n                <p\r\n                  className=\"font-paragraph-white\"\r\n                  style={{\r\n                    margin: 0,\r\n                    padding: 0,\r\n                    fontSize: \"18px\",\r\n                  }}\r\n                >\r\n                  Filter Trainers\r\n                </p>\r\n              }\r\n              key=\"1\"\r\n            >\r\n              <p className=\"font-paragraph-white\">Filter By Gender</p>\r\n              <div style={{ display: \"flex\" }}>\r\n                <p\r\n                  className=\"font-paragraph-white\"\r\n                  onClick={() =>\r\n                    filterGender === \"male\"\r\n                      ? setFilterGender(\"\")\r\n                      : setFilterGender(\"male\")\r\n                  }\r\n                  style={{\r\n                    ...filterTextStyle,\r\n                    backgroundColor:\r\n                      filterGender === \"male\" ? \"#ff7700\" : \"#454b52\",\r\n                  }}\r\n                >\r\n                  Male\r\n                </p>\r\n                <p\r\n                  className=\"font-paragraph-white\"\r\n                  onClick={() =>\r\n                    filterGender === \"female\"\r\n                      ? setFilterGender(\"\")\r\n                      : setFilterGender(\"female\")\r\n                  }\r\n                  style={{\r\n                    ...filterTextStyle,\r\n                    backgroundColor:\r\n                      filterGender === \"female\" ? \"#ff7700\" : \"#454b52\",\r\n                  }}\r\n                >\r\n                  Female\r\n                </p>\r\n                <p\r\n                  className=\"font-paragraph-white\"\r\n                  onClick={() =>\r\n                    filterGender === \"other\"\r\n                      ? setFilterGender(\"\")\r\n                      : setFilterGender(\"other\")\r\n                  }\r\n                  style={{\r\n                    ...filterTextStyle,\r\n                    backgroundColor:\r\n                      filterGender === \"other\" ? \"#ff7700\" : \"#454b52\",\r\n                  }}\r\n                >\r\n                  Other\r\n                </p>\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n          <div className=\"trainers-3-row-cards\">\r\n            {filterTrainers.map((trainer) => (\r\n              <Link to={`/trainer/${slug(trainer.username)}/${trainer._id}`}>\r\n                <ChallengeCard\r\n                  picture={\r\n                    trainer.avatarLink\r\n                      ? `${process.env.REACT_APP_SERVER}/api${trainer.avatarLink}`\r\n                      : \"\"\r\n                  }\r\n                  // rating={5}\r\n                  name={trainer.username}\r\n                  // location={trainer.location}\r\n                  newc={false}\r\n                />\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* 3th row */}\r\n      <div className=\"home-row-7 background-trainers\">\r\n        <div className=\"home-row-7-container\" style={{ minHeight: \"350px\" }}>\r\n          <div className=\"home-row-7-container-text\">\r\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\r\n              {t(\"trainers.need_more\")}\r\n            </h2>\r\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\r\n              {t(\"trainers.feel_better\")}\r\n            </h1>\r\n            <p\r\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              {t(\"trainers.become\")}\r\n            </p>\r\n            <Link className=\"home-button\" to=\"/how-it-works\">\r\n              <span className=\"home-button-text font-paragraph-white\">\r\n                {t(\"trainers.inspire\")} <ArrowRightOutlined />\r\n              </span>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* 7th row */}\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Trainers;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\BreakTimer.js",["643","644","645","646","647"],"import React, { useEffect, useContext } from \"react\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Progress } from \"antd\";\r\nimport tune from \"../../assets/music/break-end.wav\";\r\nimport {\r\n  breakContext,\r\n  playerStateContext,\r\n  timerVisibleContext,\r\n} from \"../../contexts/PlayerState\";\r\n\r\nfunction BreakTimer({\r\n  exercise,\r\n  nextExerciseTitle,\r\n  moveToNextExercise,\r\n  // playPauseVideo,\r\n}) {\r\n  const [currentBreak, setCurrentBreak] = useContext(breakContext);\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [timerVisible, setTimerVisible] = useContext(timerVisibleContext);\r\n  useEffect(() => {\r\n    if (exercise.break) {\r\n    } else {\r\n      moveToNextExercise();\r\n      setTimerVisible(false);\r\n      setCurrentBreak(false);\r\n    }\r\n  }, []);\r\n  const playAudio = () => {\r\n    new Audio(tune).play();\r\n  };\r\n\r\n  const CountdownDisplay = ({ hours, minutes, seconds, total }) => {\r\n    const totalSeconds = total / 1000;\r\n    const givenSeconds = (exercise.break * 1000) / 1000;\r\n    const progress = ((givenSeconds - totalSeconds) / givenSeconds) * 100;\r\n    return (\r\n      <div className=\"inner-layout-break\">\r\n        <div style={{ width: \"30%\", textAlign: \"center\" }}>\r\n          <span style={{ marginTop: \"10px\" }}>\r\n            <span className=\"inner-layout-break-totalsecs\">{totalSeconds}</span>\r\n            <span className=\"inner-layout-break-sec\">Sec</span>\r\n          </span>\r\n          <Progress percent={progress} showInfo={false} />\r\n        </div>\r\n        <div className=\"inner-layout-break-text\">\r\n          {nextExerciseTitle ? (\r\n            <>\r\n              <span>\r\n                {exercise.exerciseGroupName === \"Introduction\"\r\n                  ? \"First Exercise\"\r\n                  : \"Next Exercise\"}\r\n              </span>{\" \"}\r\n              <span>{nextExerciseTitle}</span>\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"break-layout-for-player\">\r\n      <Countdown\r\n        date={Date.now() + exercise.break * 1000}\r\n        renderer={CountdownDisplay}\r\n        onMount={() => {\r\n          setCurrentBreak(true);\r\n          console.log(\"break mounted\");\r\n        }}\r\n        onTick={(e) => {\r\n          if (e.seconds === 3) {\r\n            playAudio();\r\n          }\r\n          console.log(\"tick tick tick mf\", e);\r\n        }}\r\n        onComplete={(e) => {\r\n          console.log(\"timer completed\");\r\n          setTimerVisible(false);\r\n          setCurrentBreak(false);\r\n          moveToNextExercise();\r\n          // setPlayerState({ ...playerState, playing: true });\r\n          console.log(\"break ended\");\r\n          // startVideoPlayer();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(BreakTimer);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\NewCoupon.js",["648"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\AllUsers.js",["649"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Table, Space, Input, Select } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { deleteUser, getAllUsers } from \"../../../services/users\";\r\nimport UpdateUser from \"./UpdateUser\";\r\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\r\n\r\nfunction AllUsers() {\r\n  const [filterAllUsers, setFilterAllUsers] = useState([]);\r\n  const [allChallengeGoals, setAllChallengeGoals] = useState([]);\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [selectedUser, setSelectedUser] = useState({});\r\n  const [show, setShow] = useState(\"\");\r\n\r\n  async function fetchUsers() {\r\n    const users = await getAllUsers();\r\n    const aCh = await getAllChallengeGoals();\r\n    if (aCh.challengeGoals) {\r\n      setAllChallengeGoals(aCh.challengeGoals);\r\n    }\r\n    setAllUsers(users.users);\r\n    setFilterAllUsers(users.users);\r\n  }\r\n\r\n  useEffect(async () => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (filter === \"all\") {\r\n      setFilterAllUsers(allUsers);\r\n    }\r\n    if (filter === \"admin\") {\r\n      const admins = allUsers.filter((f) => f.role === \"admin\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"customer\") {\r\n      const admins = allUsers.filter((f) => f.role === \"customer\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"nutrist\") {\r\n      const admins = allUsers.filter((f) => f.role === \"nutrist\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"shopmanager\") {\r\n      const admins = allUsers.filter((f) => f.role === \"shopmanager\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"blogger\") {\r\n      const admins = allUsers.filter((f) => f.role === \"blogger\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n    if (filter === \"trainer\") {\r\n      const admins = allUsers.filter((f) => f.role === \"trainer\");\r\n      setFilterAllUsers(admins);\r\n    }\r\n  }, [allUsers, filter]);\r\n\r\n  const removeUser = async (d) => {\r\n    await deleteUser(d._id);\r\n    fetchUsers();\r\n  };\r\n\r\n  const onUpdateComplete = async (setLoading, vals, blogId) => {\r\n    // await updateBlog(vals, blogId);\r\n    // setLoading(false);\r\n    // setShow(false);\r\n    // fetchData();\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"_id\",\r\n      key: \"_id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Username\",\r\n      dataIndex: \"username\",\r\n      key: \"username\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    // {\r\n    //   title: \"Firstname\",\r\n    //   dataIndex: \"firstName\",\r\n    //   key: \"firstname\",\r\n    //   render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    // },\r\n    // {\r\n    //   title: \"Lastname\",\r\n    //   dataIndex: \"lastName\",\r\n    //   key: \"lastname\",\r\n    //   render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    // },\r\n    {\r\n      title: \"Email\",\r\n      dataIndex: \"email\",\r\n      key: \"email\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n\r\n    {\r\n      title: \"Role\",\r\n      key: \"role\",\r\n      dataIndex: \"role\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\" style={{ color: \"#ff7700\" }}>\r\n          {text}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Created At\",\r\n      key: \"updatedAt\",\r\n      dataIndex: \"updatedAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              setSelectedUser(record);\r\n              setShow(true);\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Button type=\"danger\" onClick={() => removeUser(record)}>\r\n            Delete\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <UpdateUser\r\n        userInfo={selectedUser}\r\n        show={show}\r\n        setShow={setShow}\r\n        onUpdateComplete={onUpdateComplete}\r\n        allChallengeGoals={allChallengeGoals}\r\n        fetchUsers={fetchUsers}\r\n        key={selectedUser ? selectedUser._id : \"\"}\r\n      />\r\n      <h2 className=\"font-heading-black\">All Users</h2>\r\n      <div>\r\n        <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\r\n          Filter By Role:\r\n        </span>\r\n        <Select\r\n          defaultValue=\"\"\r\n          style={{ width: 120, marginLeft: \"10px\" }}\r\n          onChange={(e) => setFilter(e)}\r\n        >\r\n          {[\r\n            \"all\",\r\n            \"admin\",\r\n            \"customer\",\r\n            \"trainer\",\r\n            \"blogger\",\r\n            \"shopmanager\",\r\n            \"nutrist\",\r\n          ].map((t) => (\r\n            <Select.Option value={t}>{t}</Select.Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        <Input\r\n          placeholder=\"Search Users By Username\"\r\n          onChange={(e) =>\r\n            setFilterAllUsers(\r\n              allUsers.filter((user) =>\r\n                user.username\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Input\r\n          placeholder=\"Search User By ID\"\r\n          style={{ marginTop: \"10px\" }}\r\n          onChange={(e) =>\r\n            setFilterAllUsers(\r\n              allUsers.filter((user) =>\r\n                user._id.toUpperCase().includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Table columns={columns} dataSource={filterAllUsers} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllUsers;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\equipments.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\New\\Wizard.js",["650","651","652"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Nutrition.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\TermsAndCondition.js",["653","654","655","656"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Footer.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\UpdateCoupon.js",["657","658"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Input, Modal, Form, InputNumber, Switch, Select } from \"antd\";\r\nimport { updateCoupon } from \"../../../services/coupons\";\r\n\r\nfunction UpdateCoupon({\r\n  visible,\r\n  setVisible,\r\n  selectedCoupon,\r\n  fetchData,\r\n  allChallenges,\r\n}) {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState();\r\n  const [code, setCode] = useState(\"\");\r\n  const [active, setActive] = useState(null);\r\n  const [applicableOn, setApplicableOn] = useState([]);\r\n  const [challengesApplicableOn, setChallengesApplicableOn] = useState([]);\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      name: selectedCoupon.name,\r\n      couponCode: selectedCoupon.code,\r\n      usageCount: selectedCoupon.limitUsage,\r\n      discount: selectedCoupon.discountPercent,\r\n      active: selectedCoupon.isActive,\r\n      applicableOn: selectedCoupon.applicableOn,\r\n      challengesApplicableOn: selectedCoupon.challengesApplicableOn,\r\n    });\r\n    setCode(selectedCoupon.code);\r\n    setActive(selectedCoupon.isActive);\r\n    setApplicableOn(selectedCoupon.applicableOn);\r\n    setChallengesApplicableOn(\r\n      selectedCoupon.challengesApplicableOn ? challengesApplicableOn : []\r\n    );\r\n  }, [selectedCoupon]);\r\n  const onFinish = async (values) => {\r\n    setLoading(true);\r\n    if (code.length > 0) {\r\n      const s = {\r\n        name: values.name,\r\n        code: code,\r\n        discountPercent: parseInt(values.discount),\r\n        limitUsage: values.usageCount,\r\n        isActive: values.active,\r\n        applicableOn: values.applicableOn,\r\n        challengesApplicableOn:\r\n          challengesApplicableOn.length > 0 ? challengesApplicableOn : null,\r\n      };\r\n      const res = await updateCoupon(s, selectedCoupon._id);\r\n      fetchData();\r\n      console.log(res);\r\n    } else {\r\n      alert(\"Please enter coupon code\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      width=\"60%\"\r\n      visible={visible}\r\n      footer={false}\r\n      onCancel={() => setVisible(false)}\r\n    >\r\n      <h2 className=\"font-heading-white\">Update Coupon</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          form={form}\r\n        >\r\n          <Form.Item\r\n            label=\"Name\"\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input coupon name!\" }]}\r\n            type=\"number\"\r\n          >\r\n            <Input style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Coupon Code\" name=\"couponCode\">\r\n            <Input value={code} onChange={(e) => setCode(e.target.value)} />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Discount\"\r\n            name=\"discount\"\r\n            rules={[{ required: true, message: \"Please input discount!\" }]}\r\n            type=\"number\"\r\n          >\r\n            <Input\r\n              placeholder=\"Must be in percentage eg 10\"\r\n              type=\"number\"\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Usage Count\"\r\n            name=\"usageCount\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input number of times the code can be used!\",\r\n              },\r\n            ]}\r\n            type=\"number\"\r\n          >\r\n            <InputNumber style={{ width: \"100%\" }} />\r\n          </Form.Item>\r\n          <Form.Item label=\"Active\" name=\"active\">\r\n            <Switch\r\n              checkedChildren=\"is active\"\r\n              unCheckedChildren=\"not active\"\r\n              checked={active}\r\n              onChange={(e) => setActive(e)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\"Applicable On Specific Plan\" name=\"applicableOn\">\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={applicableOn}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setApplicableOn(e)}\r\n            >\r\n              {[\r\n                \"ALL\",\r\n                \"CHALLENGE ONE\",\r\n                \"CHALLENGE THREE\",\r\n                \"CHALLENGE TWELVE\",\r\n              ].map((e, i) => (\r\n                <Select.Option key={i + 1} value={e}>\r\n                  {e}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Applicable On Specific Challenge\"\r\n            name=\"challengesApplicableOn\"\r\n          >\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={challengesApplicableOn}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setChallengesApplicableOn(e)}\r\n            >\r\n              {allChallenges.map((e, i) => (\r\n                <Select.Option key={i + 1} value={e._id}>\r\n                  {e.challengeName}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default UpdateCoupon;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\PlayerControls.js",["659","660","661"],"import React, { forwardRef, useState, useContext, useEffect } from \"react\";\r\nimport FullScreenPlayerVideosBrowser from \"./FullScreenPlayerVideosBrowser\";\r\nimport { VideoSeekSlider } from \"react-video-seek-slider\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-video-seek-slider/lib/ui-video-seek-slider.css\";\r\nimport { PauseOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport PlayerAudioIcon from \"../../assets/icons/player-audio-icon.svg\";\r\nimport PlayerAudioMuteIcon from \"../../assets/icons/player-audio-mute-icon.svg\";\r\nimport PlayerChromeIcon from \"../../assets/icons/chrome-tv-icon.svg\";\r\nimport PlayerMusicIcon from \"../../assets/icons/player-music-icon.svg\";\r\nimport PlayerSmallFullscreenIcon from \"../../assets/icons/player-fullscreen-small-icon.svg\";\r\nimport SmPlayerAudioIcon from \"../../assets/icons/sm-player-audio-icon.svg\";\r\nimport SmPlayerAudioMuteIcon from \"../../assets/icons/sm-player-audio-mute-icon.svg\";\r\nimport SmPlayerChromeIcon from \"../../assets/icons/sm-chrome-tv-icon.svg\";\r\nimport SmPlayerMusicIcon from \"../../assets/icons/sm-player-music-icon.svg\";\r\nimport SmPlayerFullscreenIcon from \"../../assets/icons/sm-player-fullscreen-icon.svg\";\r\nimport {\r\n  exerciseWorkoutTimeTrackContext,\r\n  playerFullscreenContext,\r\n  playerStateContext,\r\n} from \"../../contexts/PlayerState\";\r\nimport screenfull from \"screenfull\";\r\nimport MusicPlayer from \"./MusicPlayer\";\r\nimport SkipLeftIcon from \"../../assets/icons/player-play-left-icon.svg\";\r\nimport SkipRightIcon from \"../../assets/icons/player-play-right-icon.svg\";\r\nimport PlayerPlayIcon from \"../../assets/icons/player-play-icon.svg\";\r\nimport PlayerPauseIcon from \"../../assets/icons/player-pause-icon.svg\";\r\nimport BackButton from \"../../assets/icons/big-back-button.svg\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\n\r\nconst playerIconStyle = {\r\n  // width: \"24px\",\r\n  cursor: \"pointer\",\r\n  marginRight: \"10px\",\r\n};\r\nconst formatTime = (seconds) => {\r\n  if (isNaN(seconds)) {\r\n    return \"00:00\";\r\n    // return \"0 sec\";\r\n  }\r\n\r\n  const date = new Date(seconds * 1000);\r\n  const hh = date.getUTCHours();\r\n  const mm = date.getUTCMinutes();\r\n  const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\r\n  if (hh) {\r\n    return `${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\r\n  }\r\n  return `${mm}:${ss}`;\r\n  // return `${Math.round(seconds)} sec`;\r\n};\r\n\r\nfunction PlayerControls(\r\n  {\r\n    playerRef,\r\n    playerContainerRef,\r\n    descriptionRef,\r\n    exerciseTitle,\r\n    exerciseLength,\r\n    breakTime,\r\n    musicList,\r\n    exerciseSeconds,\r\n    // for full screen player video browser\r\n    resumeSecondsCounter,\r\n    pauseSecondsCounter,\r\n    workout,\r\n    setExerciseForHelpModal,\r\n    setOpenHelpModal,\r\n    setCurrentExercise,\r\n    currentExercise,\r\n    moveToNextExercise,\r\n    moveToPrevExercise,\r\n    challengePageAddress,\r\n  },\r\n  ref\r\n) {\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [musicPlayerVisible, setMusicPlayerVisible] = useState(false);\r\n  const [fullscreen, setFullscreen] = useContext(playerFullscreenContext);\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\r\n    exerciseWorkoutTimeTrackContext\r\n  );\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  useEffect(() => {\r\n    console.log(\"lworkout\", exerciseWorkoutTimeTrack);\r\n  }, [exerciseWorkoutTimeTrack]);\r\n  useEffect(() => {\r\n    if (\r\n      width === playerContainerRef.current.clientWidth &&\r\n      height === playerContainerRef.current.clientHeight\r\n    ) {\r\n      setFullscreen(true);\r\n      console.log(\"in full screen\");\r\n    } else {\r\n      setFullscreen(false);\r\n    }\r\n  });\r\n  const currentTime = playerRef.current\r\n    ? playerRef.current.getCurrentTime()\r\n    : \"00:00\";\r\n  // const currentTime = playerRef.current\r\n  //   ? playerRef.current.getCurrentTime()\r\n  //   : \"0 sec\";\r\n  const duration = playerRef.current\r\n    ? playerRef.current.getDuration()\r\n    : \"00:00\";\r\n  // const duration = playerRef.current\r\n  //   ? playerRef.current.getDuration()\r\n  //   : \"0 sec\";\r\n  const elapsedTime = formatTime(currentTime);\r\n  const totalDuration = formatTime(duration);\r\n\r\n  const onMute = () => {\r\n    setPlayerState({ ...playerState, muted: !playerState.muted });\r\n  };\r\n\r\n  const onPlayPause = () => {\r\n    setPlayerState({ ...playerState, playing: !playerState.playing });\r\n  };\r\n\r\n  const toggleFullscreen = () => {\r\n    if (fullscreen) {\r\n      setFullscreen(false);\r\n    } else {\r\n      setFullscreen(true);\r\n    }\r\n\r\n    screenfull.toggle(playerContainerRef.current);\r\n    console.log(screenfull.isFullscreen, playerContainerRef.current);\r\n  };\r\n\r\n  const onSeek = (e) => {\r\n    setPlayerState({\r\n      ...playerState,\r\n      progress: { ...playerState.progress, played: parseFloat(e / 100) },\r\n    });\r\n    playerRef.current.seekTo(e / 100);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() - 15);\r\n  };\r\n\r\n  const handleFastforward = () => {\r\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() + 15);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"controls-details\" ref={descriptionRef}>\r\n        <div className=\"controls-details-top-title font-paragraph-white\">\r\n          <span>{exerciseTitle}</span>\r\n          {exerciseLength && (\r\n            <span style={{ marginTop: \"10px\" }}>\r\n              <span style={{ fontSize: \"26px\", marginRight: \"5px\" }}>\r\n                {Math.round(exerciseSeconds)}\r\n              </span>\r\n              Sec\r\n            </span>\r\n          )}\r\n        </div>\r\n        {console.log(workout, currentExercise)}\r\n        <div className=\"controls-details-bottom-title font-paragraph-white\">\r\n          {breakTime && (\r\n            <span>\r\n              Up next: Rest\r\n              <span style={{ fontSize: \"26px\", margin: \"0 5px\" }}>\r\n                {breakTime}\r\n              </span>\r\n              sec\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"controls-wrapper\" ref={ref}>\r\n        {fullscreen && (\r\n          <FullScreenPlayerVideosBrowser\r\n            showVideos={true}\r\n            workout={workout}\r\n            setExerciseForHelpModal={setExerciseForHelpModal}\r\n            setOpenHelpModal={setOpenHelpModal}\r\n            setCurrentExercise={setCurrentExercise}\r\n            currentExercise={currentExercise}\r\n          />\r\n        )}\r\n        <div>\r\n          <MusicPlayer\r\n            musicList={musicList}\r\n            setMusicPlayerVisible={setMusicPlayerVisible}\r\n            visible={musicPlayerVisible}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"controls-wrapper-top\">\r\n          <div>\r\n            {(fullscreen || width <= 768) && (\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Link\r\n                  to={challengePageAddress}\r\n                  style={{\r\n                    color: \"#ff7700\",\r\n                    alignSelf: \"flex-start\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={BackButton}\r\n                    alt=\"back-button\"\r\n                    className=\"player-back-button\"\r\n                  />\r\n                </Link>\r\n                <div className=\"player-back-text\">\r\n                  <span className=\"font-heading-white\">{workout.title}</span>\r\n                  <span className=\"font-paragraph-white\">\r\n                    {workout.subtitle}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"player-top-icons\">\r\n            {fullscreen ? (\r\n              <>\r\n                {playerState.muted ? (\r\n                  <img\r\n                    src={PlayerAudioMuteIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                    onClick={onMute}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    onClick={onMute}\r\n                    src={PlayerAudioIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                  />\r\n                )}\r\n                <img\r\n                  src={PlayerChromeIcon}\r\n                  alt=\"player-chrome-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={PlayerMusicIcon}\r\n                  onClick={() => setMusicPlayerVisible(!musicPlayerVisible)}\r\n                  alt=\"player-music-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={PlayerSmallFullscreenIcon}\r\n                  alt=\"player-fullscreen-icon\"\r\n                  style={playerIconStyle}\r\n                  onClick={toggleFullscreen}\r\n                />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {playerState.muted ? (\r\n                  <img\r\n                    src={SmPlayerAudioMuteIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                    onClick={onMute}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    onClick={onMute}\r\n                    src={SmPlayerAudioIcon}\r\n                    alt=\"player-audio-icon\"\r\n                    style={playerIconStyle}\r\n                  />\r\n                )}\r\n                <img\r\n                  src={SmPlayerChromeIcon}\r\n                  alt=\"player-chrome-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={SmPlayerMusicIcon}\r\n                  onClick={() => setMusicPlayerVisible(!musicPlayerVisible)}\r\n                  alt=\"player-music-icon\"\r\n                  style={playerIconStyle}\r\n                />\r\n                <img\r\n                  src={SmPlayerFullscreenIcon}\r\n                  alt=\"player-fullscreen-icon\"\r\n                  style={playerIconStyle}\r\n                  onClick={toggleFullscreen}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* middle controls */}\r\n        {playerState.loading ? (\r\n          <span\r\n            style={{\r\n              height: \"100%\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <LoadingOutlined\r\n              style={{\r\n                color: \"var(--color-orange)\",\r\n              }}\r\n              className=\"middle-player-icons\"\r\n            />\r\n          </span>\r\n        ) : (\r\n          <div className=\"controls-wrapper-middle\">\r\n            <span className=\"controls-wrapper-middle-icons\"></span>\r\n\r\n            <span className=\"controls-wrapper-middle-icons\"></span>\r\n          </div>\r\n        )}\r\n\r\n        {!workout.isRendered ? (\r\n          <>\r\n            <div\r\n              className=\"controls-wrapper-bottom\"\r\n              style={{ position: \"relative\" }}\r\n            >\r\n              <span className=\"font-paragraph-white player-elasped-time-container\">\r\n                {elapsedTime}\r\n              </span>\r\n              <div>\r\n                <img\r\n                  src={SkipLeftIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={handleRewind}\r\n                />\r\n                <span className=\"font-paragraph-white\">15</span>\r\n                {playerState.playing ? (\r\n                  // PlayerPauseIcon\r\n                  <img\r\n                    src={PlayerPauseIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 20px 0 35px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src={PlayerPlayIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 20px 0 35px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                )}\r\n                <span className=\"font-paragraph-white\">15</span>\r\n                <img\r\n                  src={SkipRightIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={handleFastforward}\r\n                />\r\n              </div>\r\n              <span\r\n                className=\"font-paragraph-white player-elasped-time-container\"\r\n                style={{ textAlign: \"right\" }}\r\n              >\r\n                {totalDuration}\r\n              </span>\r\n            </div>\r\n            <div style={{ margin: \"0 30px 0 35px\", paddingBottom: \"20px\" }}>\r\n              <VideoSeekSlider\r\n                max={100}\r\n                currentTime={playerState.progress.played * 100}\r\n                progress={playerState.progress.loaded * 100}\r\n                onChange={onSeek}\r\n                offset={0}\r\n                limitTimeTooltipBySides={true}\r\n                hideSeekTimes={false}\r\n                secondsPrefix=\"00:00:\"\r\n                minutesPrefix=\"00:\"\r\n                tipFormatter={(v) => `${elapsedTime}`}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div\r\n              className=\"controls-wrapper-bottom\"\r\n              style={{ position: \"relative\" }}\r\n            >\r\n              <span className=\"font-paragraph-white player-elasped-time-container\">\r\n                {/* {elapsedTime} */}\r\n                {formatTime(exerciseWorkoutTimeTrack.current)}\r\n              </span>\r\n              <div>\r\n                <img\r\n                  src={SkipLeftIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    if (currentExercise && currentExercise.index !== 0) {\r\n                      const s =\r\n                        parseInt(exerciseLength) - parseInt(exerciseSeconds);\r\n                      // console.log(\"exerciseSeconds\",totalDurationTimer,s, parseInt(workout.exercises[currentExercise.index - 1].exerciseLength))\r\n                      // setTotalDurationTimer(totalDurationTimer - s - parseInt(workout.exercises[currentExercise.index - 1].exerciseLength));\r\n                      moveToPrevExercise();\r\n                    }\r\n                  }}\r\n                />\r\n                {/* PlayerPlayIcon */}\r\n                {playerState.playing ? (\r\n                  <img\r\n                    src={PlayerPauseIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 30px 0 30px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src={PlayerPlayIcon}\r\n                    alt=\"skip-left-icon\"\r\n                    style={{ cursor: \"pointer\", margin: \"0 25px 0 35px\" }}\r\n                    className=\"controls-wrapper-bottom-icons\"\r\n                    onClick={onPlayPause}\r\n                  />\r\n                )}\r\n                <img\r\n                  src={SkipRightIcon}\r\n                  alt=\"skip-left-icon\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    if (\r\n                      currentExercise &&\r\n                      currentExercise.index !== workout.exercises.length - 1\r\n                    ) {\r\n                      // const s = parseInt(exerciseLength);\r\n                      // console.log(\"exerciseSeconds\",totalDurationTimer,s)\r\n                      // setTotalDurationTimer(totalDurationTimer + s);\r\n                      moveToNextExercise();\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <span\r\n                className=\"font-paragraph-white player-elasped-time-container\"\r\n                style={{ textAlign: \"right\" }}\r\n              >\r\n                {/* {totalDuration} */}\r\n                {formatTime(exerciseWorkoutTimeTrack.total)}\r\n              </span>\r\n            </div>\r\n            <div\r\n              className=\"react-player-stepper-container\"\r\n              style={{\r\n                gridTemplateColumns: `repeat(${\r\n                  workout && workout.exercises.length\r\n                }, 1fr)`,\r\n              }}\r\n            >\r\n              {workout &&\r\n                workout.exercises.map((j, i) => (\r\n                  <div\r\n                    className=\"react-player-stepper\"\r\n                    style={{\r\n                      background:\r\n                        currentExercise &&\r\n                        currentExercise.index === i &&\r\n                        currentExercise.index !== -1\r\n                          ? \"#fff\"\r\n                          : \"#FB7600\",\r\n                    }}\r\n                  ></div>\r\n                ))}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default forwardRef(PlayerControls);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteModal.js",["662","663"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport ClappingIcon from \"../../assets/icons/large-clapping-icon.svg\";\r\nimport YelloIcon from \"../../assets/icons/yellow-diamond-icon.svg\";\r\nimport \"../../assets/challengeCompletedModal.css\";\r\nimport { Button, Input, Rate } from \"antd\";\r\nimport { ReactComponent as FacebookIcon } from \"../../assets/icons/complete-challenge-facebook-button.svg\";\r\nimport { ReactComponent as TwitterIcon } from \"../../assets/icons/complete-challenge-twitter-button.svg\";\r\nimport { ReactComponent as InstagramIcon } from \"../../assets/icons/complete-challenge-instagram-button.svg\";\r\nimport { ReactComponent as PintrestIcon } from \"../../assets/icons/complete-challenge-pinterest-button.svg\";\r\nimport { ReactComponent as LinkedinIcon } from \"../../assets/icons/complete-challenge-linkedin-button.svg\";\r\nimport { addChallengeReview } from \"../../services/createChallenge/main\";\r\nimport { getRecommandedChallenges } from \"../../services/users\";\r\nimport { userInfoContext } from \"../../contexts/UserStore\";\r\nimport ChallengeCompleteNextModal from \"./ChallengeCompleteNextModal\";\r\nimport { createPost } from \"../../services/communityPosts\";\r\nimport slug from \"elegant-slug\";\r\n\r\nconst ChallengeCompleteModal = ({\r\n  visible,\r\n  setVisible,\r\n  points,\r\n  challenge,\r\n  challengeId,\r\n  fetchData,\r\n}) => {\r\n  const userInfo = useContext(userInfoContext)[0];\r\n  const [input, setInput] = useState(\"\");\r\n  const [rating, setRating] = useState(1);\r\n  const [currentLayout, setCurrentLayout] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [recommandedChallenges, setRecommandedChallenges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getNextChallenges();\r\n  }, []);\r\n\r\n  const getNextChallenges = async () => {\r\n    setLoading(true);\r\n    const rc = await getRecommandedChallenges(userInfo.id);\r\n    rc && setRecommandedChallenges(rc.recommendedchallenge);\r\n    setLoading(false);\r\n  };\r\n  const submitReview = async () => {\r\n    // console.log(challenge);\r\n    // return;\r\n    if (input.length > 0 && rating) {\r\n      const data = {\r\n        title: `I have completed ${challenge?.challengeName}`,\r\n        text: input,\r\n        image: challenge?.thumbnailLink,\r\n        type: \"Finished Completed\",\r\n        url: `/challenge/${slug(challenge?.challengeName)}/${challenge?._id}`,\r\n      };\r\n\r\n      const res = await addChallengeReview(challengeId, rating, input);\r\n      await createPost(data);\r\n\r\n      if (res.success) {\r\n        setVisible(false);\r\n        fetchData();\r\n      }\r\n      // console.log(\"ewvie\", res);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={visible}\r\n      onRequestClose={() => setVisible(false)}\r\n      contentLabel=\"Example Modal\"\r\n    >\r\n      {currentLayout === 1 ? (\r\n        <div className=\"challenge-complete-modal-container\">\r\n          <div className=\"challenge-complete-modal-container--c1\">\r\n            <img src={ClappingIcon} alt=\"clapping-icon\" />\r\n            <h3 className=\"font-heading-white\">Well done!</h3>\r\n            <p className=\"font-paragraph-white\">\r\n              {\" \"}\r\n              <img src={YelloIcon} alt=\"points-earned\" />{\" \"}\r\n              <span>{challenge?.points} points earned</span>\r\n            </p>\r\n            <span className=\"font-paragraph-white\">\r\n              You did it! Congratulations on finishing the challenge. Keep this\r\n              momentum going and continue creating these healthy habits for a\r\n              happy balanced healthy lifestyle\r\n            </span>\r\n          </div>\r\n          <div className=\"challenge-complete-modal-container--c2\">\r\n            <div className=\"challenge-complete-modal-container--c2--r1\">\r\n              <p className=\"font-paragraph-white\">\r\n                Please review this challenge.\r\n              </p>\r\n              <Input.TextArea\r\n                rows={3}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                value={input}\r\n              />\r\n              <Rate onChange={(e) => setRating(e)} value={rating} />\r\n              <button\r\n                className=\"common-transparent-button font-paragraph-white\"\r\n                onClick={submitReview}\r\n                style={{\r\n                  border: \"2px solid #ff7700\",\r\n                  display: \"block\",\r\n                  marginTop: \"10px\",\r\n                  padding: \"10px 50px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n            <div className=\"challenge-complete-modal-container--c2--r2\">\r\n              <p className=\"font-paragraph-white\">Spread the word :)</p>\r\n              <div>\r\n                <FacebookIcon className=\"challenge-completed-icon\" />\r\n                <TwitterIcon className=\"challenge-completed-icon\" />\r\n                <InstagramIcon className=\"challenge-completed-icon\" />\r\n                <LinkedinIcon className=\"challenge-completed-icon\" />\r\n                <PintrestIcon className=\"challenge-completed-icon\" />\r\n              </div>\r\n              <button\r\n                className=\"common-transparent-button font-paragraph-white\"\r\n                onClick={() => setCurrentLayout(2)}\r\n                style={{\r\n                  border: \"2px solid #ff7700\",\r\n                  display: \"block\",\r\n                  marginTop: \"10px\",\r\n                  padding: \"10px 50px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <ChallengeCompleteNextModal\r\n          goBack={() => setCurrentLayout(1)}\r\n          loading={loading}\r\n          recommandedChallenges={recommandedChallenges}\r\n        />\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\nexport default ChallengeCompleteModal;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Nutrition\\SearchNutrition.js",["664"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../../assets/home.css\";\r\nimport \"../../assets/trainers.css\";\r\nimport { Collapse, Input, Slider } from \"antd\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport \"../../assets/nutrition.css\";\r\nimport _ from \"lodash\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ChallengeCard from \"../Cards/ChallengeCard\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\nimport slug from \"elegant-slug\";\r\n\r\nfunction SearchNutrition({\r\n  allRecipies,\r\n  allDiets,\r\n  allMealTypes,\r\n  allIngredients,\r\n}) {\r\n  const [t] = useTranslation();\r\n  const [mealName, setMealName] = useState(\"\");\r\n  const [allMeals, setAllMeals] = useState([]);\r\n  const [mealTypeFilters, setMealTypeFilters] = useState([]);\r\n  const [ingredientsTypeFilter, setIngredientsTypeFilter] = useState([]);\r\n  const [dietTypeFilter, setDietTypeFilter] = useState([]);\r\n  const [preprationTimeFilter, setPreprationTimeFilter] = useState([5, 55]);\r\n  const [caloriesFilter, setCaloriesFilter] = useState([100, 955]);\r\n  const [filterMeals, setFilterMeals] = useState([]);\r\n  const { width } = useWindowDimensions();\r\n\r\n  useEffect(() => {\r\n    const r = allRecipies ? allRecipies.filter((r) => r.isPublic) : [];\r\n    setAllMeals(r);\r\n    console.log(r);\r\n    setFilterMeals(r);\r\n  }, [allRecipies]);\r\n\r\n  // useEffect(\r\n  //   () => {\r\n  //     let filteredWithMealType = allMeals.map((meal) => {\r\n  //       if (mealTypeFilters.every((val) => meal.mealTypes.includes(val))) {\r\n  //         return meal;\r\n  //       } else {\r\n  //         return undefined;\r\n  //       }\r\n  //     });\r\n  //     filteredWithMealType = allMeals.map((meal) => {\r\n  //       if (\r\n  //         ingredientsTypeFilter.every((val) => meal.ingredients.includes(val))\r\n  //       ) {\r\n  //         return meal;\r\n  //       } else {\r\n  //         return undefined;\r\n  //       }\r\n  //     });\r\n  //     filteredWithMealType = allMeals.map((meal) => {\r\n  //       if (dietTypeFilter.every((val) => meal.diet.includes(val))) {\r\n  //         return meal;\r\n  //       } else {\r\n  //         return undefined;\r\n  //       }\r\n  //     });\r\n  //     filteredWithMealType = allMeals.map((meal) => {\r\n  //       if (\r\n  //         meal.preprationTime >= preprationTimeFilter[0] &&\r\n  //         meal.preprationTime < preprationTimeFilter[1]\r\n  //       ) {\r\n  //         console.log(\"here\");\r\n  //         return meal;\r\n  //       } else {\r\n  //         return undefined;\r\n  //       }\r\n  //     });\r\n  //     filteredWithMealType = allMeals.map((meal) => {\r\n  //       if (\r\n  //         meal.calories >= caloriesFilter[0] &&\r\n  //         meal.calories < caloriesFilter[1]\r\n  //       ) {\r\n  //         console.log(\"here\");\r\n  //         return meal;\r\n  //       } else {\r\n  //         return undefined;\r\n  //       }\r\n  //     });\r\n  //     setFilterMeals(_.compact(filteredWithMealType));\r\n  //   },\r\n  //   // eslint-disable-next-line\r\n  //   [\r\n  //     // filteredWithMealType,\r\n  //     mealTypeFilters,\r\n  //     ingredientsTypeFilter,\r\n  //     dietTypeFilter,\r\n  //     preprationTimeFilter,\r\n  //     caloriesFilter,\r\n  //   ]\r\n  // );\r\n\r\n  function onSelectFilter(type, value) {\r\n    if (type === \"mealType\") {\r\n      const check = mealTypeFilters.includes(value);\r\n      if (check) {\r\n        const newArray = mealTypeFilters.filter((str) => str !== value);\r\n        setMealTypeFilters(newArray);\r\n        // console.log(\"====>\", newArray);\r\n      } else {\r\n        setMealTypeFilters((prev) => [...prev, value]);\r\n      }\r\n      console.log(value);\r\n      console.log(check);\r\n      console.log(mealTypeFilters);\r\n    }\r\n    if (type === \"ingredientsType\") {\r\n      const check = ingredientsTypeFilter.includes(value);\r\n      if (check) {\r\n        const newArray = ingredientsTypeFilter.filter((str) => str !== value);\r\n        setIngredientsTypeFilter(newArray);\r\n        // console.log(\"====>\", newArray);\r\n      } else {\r\n        setIngredientsTypeFilter((prev) => [...prev, value]);\r\n      }\r\n      console.log(value);\r\n      console.log(check);\r\n      console.log(mealTypeFilters);\r\n    }\r\n    if (type === \"diet\") {\r\n      const check = dietTypeFilter.includes(value);\r\n      if (check) {\r\n        const newArray = dietTypeFilter.filter((str) => str !== value);\r\n        setDietTypeFilter(newArray);\r\n        // console.log(\"====>\", newArray);\r\n      } else {\r\n        setDietTypeFilter((prev) => [...prev, value]);\r\n      }\r\n\r\n      console.log(value);\r\n      console.log(check);\r\n      console.log(mealTypeFilters);\r\n    }\r\n  }\r\n  function removeAllFilters() {\r\n    setMealTypeFilters([]);\r\n    setIngredientsTypeFilter([]);\r\n    setDietTypeFilter([]);\r\n    setPreprationTimeFilter([5, 55]);\r\n    setCaloriesFilter([100, 955]);\r\n    setFilterMeals(allRecipies);\r\n  }\r\n  return (\r\n    <div className=\"search-nutrition-container\">\r\n      {/* trainers */}\r\n      <div className=\"trainers-3-row\">\r\n        <Input\r\n          size=\"large\"\r\n          placeholder=\"Search Keyword\"\r\n          style={{\r\n            backgroundColor: \"transparent\",\r\n            padding: \"20px\",\r\n            color: \"#fff\",\r\n            fontSize: \"2rem\",\r\n            opacity: \"0.8\",\r\n          }}\r\n          value={mealName}\r\n          onChange={(e) => {\r\n            console.log(e.target.value);\r\n            setMealName(e.target.value);\r\n            // setFilterMeals(\r\n            console.log(\r\n              allMeals.filter((meal) =>\r\n                meal.name.toUpperCase().includes(e.target.value.toUpperCase())\r\n              )\r\n            );\r\n\r\n            // );\r\n          }}\r\n          prefix={<SearchOutlined />}\r\n        />\r\n        {width <= 700 && (\r\n          <Collapse ghost>\r\n            <Collapse.Panel\r\n              showArrow={false}\r\n              header={\r\n                <p\r\n                  className=\"font-paragraph-white\"\r\n                  style={{\r\n                    margin: 0,\r\n                    padding: 0,\r\n                    fontSize: \"18px\",\r\n                  }}\r\n                >\r\n                  Filter Nutritions\r\n                </p>\r\n              }\r\n              key=\"1\"\r\n            >\r\n              <div className=\"nutrition-filters\">\r\n                <div\r\n                  className=\"nutrition-filters-mealtype\"\r\n                  style={{ paddingTop: \"20px\" }}\r\n                >\r\n                  <h2\r\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                    className=\"font-subheading-white\"\r\n                  >\r\n                    {t(\"userDashboard.nutrient.mealtype\")}\r\n                  </h2>\r\n                  <div className=\"selectable-values\">\r\n                    {allMealTypes.map((value) => (\r\n                      <div\r\n                        className=\"selectable-values-value font-paragraph-white\"\r\n                        style={{\r\n                          backgroundColor: mealTypeFilters.includes(value._id)\r\n                            ? \"#ff7700\"\r\n                            : \"#333b44\",\r\n                        }}\r\n                        onClick={() => onSelectFilter(\"mealType\", value._id)}\r\n                      >\r\n                        {value.name}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div className=\"nutrition-filters-ingredients\">\r\n                  <h2\r\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                    className=\"font-subheading-white\"\r\n                  >\r\n                    {t(\"userDashboard.nutrient.ingredients\")}\r\n                  </h2>\r\n                  <div className=\"selectable-values\">\r\n                    {allIngredients.map((value) => (\r\n                      <div\r\n                        className=\"selectable-values-value font-paragraph-white\"\r\n                        style={{\r\n                          backgroundColor: ingredientsTypeFilter.includes(\r\n                            value._id\r\n                          )\r\n                            ? \"#ff7700\"\r\n                            : \"#333b44\",\r\n                        }}\r\n                        onClick={() =>\r\n                          onSelectFilter(\"ingredientsType\", value._id)\r\n                        }\r\n                      >\r\n                        {value.name}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div className=\"nutrition-filters-preprationTime\">\r\n                  <h2\r\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                    className=\"font-subheading-white\"\r\n                  >\r\n                    {t(\"userDashboard.nutrient.pt\")}\r\n                  </h2>\r\n                  {console.log(\"recipes all meals\", allMeals)}\r\n                  <Slider\r\n                    min={5}\r\n                    max={55}\r\n                    range\r\n                    onChange={(value) => setPreprationTimeFilter(value)}\r\n                    defaultValue={preprationTimeFilter}\r\n                  />\r\n                  <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\r\n                    {`${preprationTimeFilter[0]} - ${preprationTimeFilter[1]}`}\r\n                  </div>\r\n                </div>\r\n                <div className=\"nutrition-filters-calories\">\r\n                  <h2\r\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                    className=\"font-subheading-white\"\r\n                  >\r\n                    {t(\"userDashboard.nutrient.calories\")}\r\n                  </h2>\r\n                  <Slider\r\n                    min={100}\r\n                    max={955}\r\n                    range\r\n                    onChange={(value) => setCaloriesFilter(value)}\r\n                    defaultValue={caloriesFilter}\r\n                  />\r\n                  <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\r\n                    {`${caloriesFilter[0]} - ${caloriesFilter[1]}`}\r\n                  </div>\r\n                </div>\r\n                <div className=\"nutrition-filters-diet\">\r\n                  <h2\r\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                    className=\"font-subheading-white\"\r\n                  >\r\n                    {t(\"userDashboard.nutrient.diet\")}\r\n                  </h2>\r\n                  <div className=\"selectable-values\">\r\n                    {allDiets.map((value) => (\r\n                      <div\r\n                        className=\"selectable-values-value font-paragraph-white\"\r\n                        style={{\r\n                          backgroundColor: dietTypeFilter.includes(value._id)\r\n                            ? \"#ff7700\"\r\n                            : \"#333b44\",\r\n                        }}\r\n                        onClick={() => onSelectFilter(\"diet\", value._id)}\r\n                      >\r\n                        {value.name}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"reset-all-filters\"\r\n                  onClick={() => removeAllFilters()}\r\n                >\r\n                  {t(\"userDashboard.nutrient.raf\")}\r\n                </div>\r\n              </div>\r\n            </Collapse.Panel>\r\n          </Collapse>\r\n        )}\r\n\r\n        <div className=\"nutrition-container\">\r\n          {width > 700 && (\r\n            <div className=\"nutrition-filters\">\r\n              <div\r\n                className=\"nutrition-filters-mealtype\"\r\n                style={{ paddingTop: \"20px\" }}\r\n              >\r\n                <h2\r\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                  className=\"font-subheading-white\"\r\n                >\r\n                  {t(\"userDashboard.nutrient.mealtype\")}\r\n                </h2>\r\n                <div className=\"selectable-values\">\r\n                  {allMealTypes.map((value) => (\r\n                    <div\r\n                      className=\"selectable-values-value font-paragraph-white\"\r\n                      style={{\r\n                        backgroundColor: mealTypeFilters.includes(value._id)\r\n                          ? \"#ff7700\"\r\n                          : \"#333b44\",\r\n                      }}\r\n                      onClick={() => onSelectFilter(\"mealType\", value._id)}\r\n                    >\r\n                      {value.name}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"nutrition-filters-ingredients\">\r\n                <h2\r\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                  className=\"font-subheading-white\"\r\n                >\r\n                  {t(\"userDashboard.nutrient.ingredients\")}\r\n                </h2>\r\n                <div className=\"selectable-values\">\r\n                  {allIngredients.map((value) => (\r\n                    <div\r\n                      className=\"selectable-values-value font-paragraph-white\"\r\n                      style={{\r\n                        backgroundColor: ingredientsTypeFilter.includes(\r\n                          value._id\r\n                        )\r\n                          ? \"#ff7700\"\r\n                          : \"#333b44\",\r\n                      }}\r\n                      onClick={() =>\r\n                        onSelectFilter(\"ingredientsType\", value._id)\r\n                      }\r\n                    >\r\n                      {value.name}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"nutrition-filters-preprationTime\">\r\n                <h2\r\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                  className=\"font-subheading-white\"\r\n                >\r\n                  {t(\"userDashboard.nutrient.pt\")}\r\n                </h2>\r\n                {console.log(\"recipes all meals\", allMeals)}\r\n                <Slider\r\n                  min={5}\r\n                  max={55}\r\n                  range\r\n                  onChange={(value) => setPreprationTimeFilter(value)}\r\n                  defaultValue={preprationTimeFilter}\r\n                />\r\n                <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\r\n                  {`${preprationTimeFilter[0]} - ${preprationTimeFilter[1]}`}\r\n                </div>\r\n              </div>\r\n              <div className=\"nutrition-filters-calories\">\r\n                <h2\r\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                  className=\"font-subheading-white\"\r\n                >\r\n                  {t(\"userDashboard.nutrient.calories\")}\r\n                </h2>\r\n                <Slider\r\n                  min={100}\r\n                  max={955}\r\n                  range\r\n                  onChange={(value) => setCaloriesFilter(value)}\r\n                  defaultValue={caloriesFilter}\r\n                />\r\n                <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\r\n                  {`${caloriesFilter[0]} - ${caloriesFilter[1]}`}\r\n                </div>\r\n              </div>\r\n              <div className=\"nutrition-filters-diet\">\r\n                <h2\r\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\r\n                  className=\"font-subheading-white\"\r\n                >\r\n                  {t(\"userDashboard.nutrient.diet\")}\r\n                </h2>\r\n                <div className=\"selectable-values\">\r\n                  {allDiets.map((value) => (\r\n                    <div\r\n                      className=\"selectable-values-value font-paragraph-white\"\r\n                      style={{\r\n                        backgroundColor: dietTypeFilter.includes(value._id)\r\n                          ? \"#ff7700\"\r\n                          : \"#333b44\",\r\n                      }}\r\n                      onClick={() => onSelectFilter(\"diet\", value._id)}\r\n                    >\r\n                      {value.name}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"reset-all-filters\"\r\n                onClick={() => removeAllFilters()}\r\n              >\r\n                {t(\"userDashboard.nutrient.raf\")}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"trainers-3-row-cards nutrition-cards\">\r\n            {filterMeals.map((meal) => (\r\n              <Link to={`/recipe/${slug(meal.name)}/${meal._id}`}>\r\n                {console.log(meal)}\r\n                <ChallengeCard\r\n                  picture={`${process.env.REACT_APP_SERVER}/api${meal.image}`}\r\n                  name={meal.name}\r\n                  rating={meal.rating}\r\n                  newc={true}\r\n                  preprationTime={meal.prepTime}\r\n                  recipe={true}\r\n                />\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchNutrition;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\ScrollToTop.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserProfile.js",["665","666"],"import React, { useState } from \"react\";\r\nimport \"../assets/trainerprofile.css\";\r\nimport \"../assets/home.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport { StarOutlined, ForwardOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-modal-video/scss/modal-video.scss\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\r\n\r\nfunction UserProfile() {\r\n  const [t] = useTranslation();\r\n  // eslint-disable-next-line\r\n  const [trainer, setTrainer] = useState({\r\n    id: 12313123123,\r\n    name: \"Anton Fekete\",\r\n    about:\r\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\r\n    avatar:\r\n      \"https://realchallenge.fit/wp-content/uploads/2020/05/Nadine-de-Ruiter.jpg\",\r\n    challenges: [\r\n      {\r\n        name: \"Danish challenge\",\r\n        picture:\r\n          \"https://realchallenge.fit/wp-content/uploads/2020/05/Didi-photo-1.jpg\",\r\n        rating: 5,\r\n      },\r\n      {\r\n        name: \"Danish challenge\",\r\n        picture:\r\n          \"https://realchallenge.fit/wp-content/uploads/2020/05/Didi-photo-1.jpg\",\r\n        rating: 5,\r\n      },\r\n      {\r\n        name: \"Englsih challenge\",\r\n        picture:\r\n          \"https://realchallenge.fit/wp-content/uploads/2020/05/Didi-photo-1.jpg\",\r\n        rating: 3,\r\n      },\r\n    ],\r\n  });\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div className=\"trainer-profile-container\">\r\n        <div\r\n          className=\"trainer-profile-container-column1\"\r\n          style={{ alignItems: \"center\" }}\r\n        >\r\n          <div className=\"profile-box\" style={{ margin: 0 }}>\r\n            <div\r\n              className=\"profile-box-row1\"\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              <div className=\"profile-box-row1-avatar\">\r\n                <img src={trainer.avatar} alt=\"trainer-profile\" />\r\n              </div>\r\n              <div className=\"profile-box-row1-information\">\r\n                <h2 className=\"font-heading-white\">{trainer.name}</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"trainer-profile-container-column2\">\r\n          <div className=\"trainer-profile-aboutme\">\r\n            <div\r\n              className=\"trainer-profile-aboutme-heading font-paragraph-white\"\r\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"user_profile.about_me\")}\r\n            </div>\r\n            <div className=\"trainer-profile-aboutme-container font-paragraph-white\">\r\n              {trainer.about}\r\n            </div>\r\n          </div>\r\n          <div className=\"trainer-profile-challenges\">\r\n            <div\r\n              className=\"trainer-profile-challenges-heading font-paragraph-white\"\r\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"user_profile.challenges\")}\r\n            </div>\r\n            <div className=\"trainer-profile-challenges-container\">\r\n              {trainer.challenges.map((challenge) => (\r\n                <Link to={`/trainers/${challenge.id}`}>\r\n                  <ChallengeCard\r\n                    picture={challenge.picture}\r\n                    name={challenge.name}\r\n                    rating={challenge.rating}\r\n                  />\r\n                </Link>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengePlayer.js",["667","668","669","670"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport \"../assets/challengePlayer.css\";\r\nimport Player from \"../components/Player/Player\";\r\nimport HelpPopupPlayer from \"../components/Player/HelpPopupPlayer\";\r\n\r\nimport {\r\n  playerStateContext,\r\n  exerciseWorkoutTimeTrackContext,\r\n} from \"../contexts/PlayerState\";\r\nimport PlayerVideoBrowser from \"../components/Player/PlayerVideoBrowser\";\r\nimport { withRouter } from \"react-router-dom\";\r\n// import BreakTimer from \"../components/Player/BreakTimer\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  getMusicByChallengeId,\r\n  getWorkoutById,\r\n} from \"../services/createChallenge/main\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { v4 } from \"uuid\";\r\nimport {\r\n  getChallengeProgress,\r\n  getUserProfileInfo,\r\n  saveChallengeProgress,\r\n} from \"../services/users\";\r\nimport { userInfoContext } from \"../contexts/UserStore\";\r\nimport { checkUser } from \"../services/authentication\";\r\nimport BackButton from \"../assets/icons/Back-button.png\";\r\nimport FileIcon from \"../assets/icons/file-icon.png\";\r\nimport DumbbellIcon from \"../assets/icons/Dumbell-icon.png\";\r\nimport ShopIcon from \"../assets/icons/shoppingbag-icon.png\";\r\nimport useWindowDimensions from \"../helpers/useWindowDimensions\";\r\nimport WorkoutCompleteModal from \"../components/Challenge/WorkoutCompleteModal\";\r\n\r\nfunction ChallengePlayer(props) {\r\n  // for non-rendered workouts\r\n  const [t] = useTranslation();\r\n  const [loading, setLoading] = useState(false);\r\n  const [workout, setWorkout] = useState({});\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [customerDetails, setCustomerDetails] = useState(\"\");\r\n  const [currentExercise, setCurrentExercise] = useState({\r\n    exercise: {},\r\n    index: 0,\r\n    completed: 0,\r\n  });\r\n  const [openHelpModal, setOpenHelpModal] = useState(false);\r\n  const [exerciseForHelpModal, setExerciseForHelpModal] = useState({});\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [finishWorkoutPopupVisible, setFinishWorkoutPopupVisible] =\r\n    useState(false);\r\n  const [musics, setMusics] = useState([]);\r\n  const [savingProgress, setSavingProgress] = useState(false);\r\n  const [challengeProgress, setChallengeProgress] = useState(null);\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\r\n    exerciseWorkoutTimeTrackContext\r\n  );\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  useEffect(() => {\r\n    checkUser(\r\n      userInfo,\r\n      setUserInfo,\r\n      localStorage.getItem(\"jwtToken\"),\r\n      props.history\r\n    );\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    const workoutId = props.match.params.workoutId;\r\n    const challengeId = props.match.params.challengeId;\r\n    // console.log(challengeId);\r\n    let res = await getWorkoutById(workoutId);\r\n    // getting challenge progress start:\r\n    let challengeProgress = await getChallengeProgress(challengeId);\r\n    if (challengeProgress.data) {\r\n      setChallengeProgress(challengeProgress.data);\r\n    }\r\n    console.log(\"challengeProgress\", challengeProgress);\r\n    console.log(\"workout\", res);\r\n    const resExercises =\r\n      res && res.isRendered\r\n        ? res.exercises.map((e) => ({\r\n            break: e.break,\r\n            createdAt: e.exerciseId.createdAt,\r\n            exerciseGroupName: e.groupName,\r\n            exerciseLength: e.exerciseLength,\r\n            title: e.exerciseId.title,\r\n            videoURL: e.exerciseId.videoURL,\r\n            voiceOverLink: e.exerciseId.voiceOverLink,\r\n            _id: e.exerciseId._id,\r\n          }))\r\n        : res.exercises.map((e) => ({\r\n            title: e.renderedWorkoutExerciseName,\r\n            videoURL: e.renderedWorkoutExerciseVideo,\r\n            _id: e._id,\r\n          }));\r\n    res.exercises = resExercises;\r\n    console.log(\"ressssssss\", res);\r\n    res &&\r\n      res.introVideoLink &&\r\n      res.exercises.unshift({\r\n        break: 5,\r\n        createdAt: \"\",\r\n        exerciseGroupName: \"Introduction\",\r\n        exerciseLength: res.introVideoLength,\r\n        title: \"Introduction to workout\",\r\n        videoURL: res.introVideoLink,\r\n        voiceOverLink: \"\",\r\n        _id: v4(),\r\n      });\r\n\r\n    const musics = await getMusicByChallengeId(challengeId);\r\n    const cd = await getUserProfileInfo(userInfo.id);\r\n\r\n    if (musics) {\r\n      setMusics(musics.music);\r\n    }\r\n    if (cd) {\r\n      setCustomerDetails(cd);\r\n    }\r\n\r\n    setWorkout(res);\r\n    setCurrentExercise({\r\n      exercise: res.exercises[0],\r\n      index: 0,\r\n      completed: 0,\r\n    });\r\n    setLoading(false);\r\n\r\n    console.log(\"resss\", res);\r\n    console.log(\"customer details\", customerDetails);\r\n  };\r\n\r\n  const updateTrackChallengeInBackend = async (\r\n    exercise,\r\n    completeionRate,\r\n    workoutCompleted\r\n  ) => {\r\n    const cId = props.match.params.challengeId;\r\n    const wId = props.match.params.workoutId;\r\n    if (!workoutCompleted) {\r\n      const p = {\r\n        currentWorkout: wId,\r\n        currentExercise: exercise._id,\r\n        challenge: cId,\r\n        completedWorkouts: challengeProgress\r\n          ? challengeProgress.completedWorkouts\r\n          : [],\r\n        currentWorkoutCompletionRate: completeionRate,\r\n        challengeCompleted: false,\r\n        challengeReview: challengeProgress\r\n          ? challengeProgress.challengeReview\r\n          : undefined,\r\n        challengePointGained: challengeProgress?.challengePointGained,\r\n      };\r\n      setSavingProgress(true);\r\n      await saveChallengeProgress(p, userInfo.id);\r\n      setSavingProgress(false);\r\n    } else {\r\n      const p = {\r\n        currentWorkout: null,\r\n        currentExercise: null,\r\n        challenge: cId,\r\n        completedWorkouts: challengeProgress\r\n          ? challengeProgress.completedWorkouts.includes(wId)\r\n            ? [...challengeProgress.completedWorkouts]\r\n            : [...challengeProgress.completedWorkouts, wId]\r\n          : [wId],\r\n        currentWorkoutCompletionRate: 0,\r\n        challengeCompleted: false,\r\n        challengeReview: challengeProgress\r\n          ? challengeProgress.challengeReview\r\n          : undefined,\r\n        challengePointGained: challengeProgress?.challengePointGained,\r\n      };\r\n      setSavingProgress(true);\r\n      await saveChallengeProgress(p, userInfo.id);\r\n      setSavingProgress(false);\r\n    }\r\n  };\r\n\r\n  const updateExerciseWorkoutTimer = (type, index) => {\r\n    if (type === \"next\") {\r\n      const allExercisesBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\r\n      const allBreaksBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\r\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current:\r\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\r\n      }));\r\n    }\r\n\r\n    if (type === \"prev\") {\r\n      const allExercisesBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\r\n      const allBreaksBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\r\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current:\r\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const moveToNextExercise = (playerProgress) => {\r\n    if (workout.exercises[currentExercise.index + 1]) {\r\n      // console.log(\"dasdsa\", currentExercise);\r\n      const completeionRate = Math.round(\r\n        ((currentExercise.index + 1) / (workout.exercises.length - 1)) * 100\r\n      );\r\n      setCurrentExercise({\r\n        exercise: workout.exercises[currentExercise.index + 1],\r\n        index: currentExercise.index + 1,\r\n        completed: completeionRate,\r\n      });\r\n      updateTrackChallengeInBackend(\r\n        workout.exercises[currentExercise.index + 1],\r\n        completeionRate,\r\n        false\r\n      );\r\n      updateExerciseWorkoutTimer(\"next\", currentExercise.index + 1);\r\n      // setPlayerState({ ...playerState, playing: true });\r\n      return;\r\n    } else {\r\n      setPlayerState({ ...playerState, playing: false });\r\n      setCurrentExercise({\r\n        exercise: currentExercise.exercise,\r\n        index: -1,\r\n        completed: 100,\r\n      });\r\n      setFinishWorkoutPopupVisible(true);\r\n      updateTrackChallengeInBackend(\r\n        workout.exercises[currentExercise.index + 1],\r\n        0,\r\n        true\r\n      );\r\n      localStorage.removeItem(\"music-playing\");\r\n    }\r\n  };\r\n\r\n  const moveToPrevExercise = (playerProgress) => {\r\n    if (workout.exercises[currentExercise.index - 1]) {\r\n      // console.log(\"dasdsa\", currentExercise);\r\n      const completeionRate = Math.round(\r\n        ((currentExercise.index - 1) / (workout.exercises.length - 1)) * 100\r\n      );\r\n      setCurrentExercise({\r\n        exercise: workout.exercises[currentExercise.index - 1],\r\n        index: currentExercise.index - 1,\r\n        completed: completeionRate,\r\n      });\r\n      workout.exercises[currentExercise.index - 2] &&\r\n        updateTrackChallengeInBackend(\r\n          workout.exercises[currentExercise.index - 1],\r\n          completeionRate,\r\n          false\r\n        );\r\n      updateExerciseWorkoutTimer(\"prev\", currentExercise.index - 1);\r\n      // setPlayerState({ ...playerState, playing: true });\r\n      return;\r\n    } else {\r\n      alert(\"nothing on backside\");\r\n    }\r\n  };\r\n\r\n  const handleCloseExerciseForHelp = () => {\r\n    setPlayerState({ ...playerState, playing: false, muted: true });\r\n    setOpenHelpModal(false);\r\n    setExerciseForHelpModal({});\r\n    if (\r\n      localStorage.getItem(\"music-playing\") &&\r\n      localStorage.getItem(\"music-playing\") === false\r\n    ) {\r\n      localStorage.setItem(\"music-playing\", true);\r\n    }\r\n  };\r\n\r\n  return loading ? (\r\n    <div className=\"center-inpage\">\r\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\r\n    </div>\r\n  ) : (\r\n    <div className=\"challenge-player-container\">\r\n      {/* open help modal */}\r\n      {openHelpModal && (\r\n        <HelpPopupPlayer\r\n          open={openHelpModal}\r\n          onCancel={handleCloseExerciseForHelp}\r\n          setOpen={setOpenHelpModal}\r\n          exercise={exerciseForHelpModal}\r\n        />\r\n      )}\r\n\r\n      <div className=\"fullplayer-container\">\r\n        {width > 768 && (\r\n          <div\r\n            className=\"challenge-player-container-exercies challenge-player-container-nav\"\r\n            style={{ marginTop: \"0\" }}\r\n          >\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <Link\r\n                to={`/challenge/${props.match.params.challengeName}/${props.match.params.challengeId}`}\r\n                style={{\r\n                  color: \"#ff7700\",\r\n                  // alignSelf: \"flex-start\",\r\n                  // marginTop: \"10px\",\r\n                }}\r\n              >\r\n                <img\r\n                  src={BackButton}\r\n                  alt=\"back-button\"\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    marginRight: \"20px\",\r\n                    height: \"30px\",\r\n                  }}\r\n                />\r\n              </Link>\r\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <span\r\n                  className=\"font-heading-white\"\r\n                  style={{ fontSize: \"25px\" }}\r\n                >\r\n                  {workout.title}\r\n                </span>\r\n                <span className=\"font-paragraph-white\">{workout.subtitle}</span>\r\n              </div>\r\n            </div>\r\n            {savingProgress && (\r\n              <LoadingOutlined\r\n                style={{\r\n                  fontSize: \"30px\",\r\n                  color: \"#ff7700\",\r\n                  marginRight: \"20px\",\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <Player\r\n          moveToNextExercise={moveToNextExercise}\r\n          moveToPrevExercise={moveToPrevExercise}\r\n          // musics={workout.musics}\r\n          nextExerciseTitle={\r\n            workout.exercises && workout.exercises[currentExercise.index + 1]\r\n              ? workout.exercises[currentExercise.index + 1].title\r\n              : \"\"\r\n          }\r\n          musics={musics}\r\n          exercise={currentExercise.exercise}\r\n          challengePageAddress={`/challenge/${props.match.params.challengeName}/${props.match.params.challengeId}`}\r\n          // key={currentExercise.exercise._id}\r\n          // for full screen player video browser\r\n          workout={workout}\r\n          setExerciseForHelpModal={setExerciseForHelpModal}\r\n          setOpenHelpModal={setOpenHelpModal}\r\n          setCurrentExercise={setCurrentExercise}\r\n          currentExercise={currentExercise}\r\n        />\r\n\r\n        <PlayerVideoBrowser\r\n          workout={workout}\r\n          playerState={playerState}\r\n          setPlayerState={setPlayerState}\r\n          setExerciseForHelpModal={setExerciseForHelpModal}\r\n          setOpenHelpModal={setOpenHelpModal}\r\n          setCurrentExercise={setCurrentExercise}\r\n          currentExercise={currentExercise}\r\n        />\r\n\r\n        <div className=\"player-download-stuff\">\r\n          {workout.infoFile ? (\r\n            <div className=\"workout-info\">\r\n              <p\r\n                className=\"font-paragraph-white\"\r\n                style={{\r\n                  color: \"#555A61\",\r\n                  fontWeight: \"500\",\r\n                  textTransform: \"uppercase\",\r\n                }}\r\n              >\r\n                Today's Workout Attachment\r\n              </p>\r\n\r\n              <a\r\n                href={`${process.env.REACT_APP_SERVER}/api${workout.infoFile}`}\r\n                target=\"_blank\"\r\n                download\r\n              >\r\n                <button className=\"challenge-player-attachment font-paragraph-white\">\r\n                  <img src={FileIcon} alt=\"\" style={{ marginRight: \"10px\" }} />\r\n                  {workout.infoTitle ? workout.infoTitle : \"Attachment\"}\r\n                </button>\r\n              </a>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {workout.relatedEquipments && workout.relatedEquipments.length > 0 && (\r\n            <div className=\"workout-info\">\r\n              <p\r\n                className=\"font-paragraph-white\"\r\n                style={{\r\n                  color: \"#555A61\",\r\n                  fontWeight: \"500\",\r\n                  textTransform: \"uppercase\",\r\n                }}\r\n              >\r\n                Today's Equipments\r\n              </p>\r\n              <div>\r\n                {workout.relatedEquipments.map((e) => (\r\n                  <button\r\n                    key={e._id}\r\n                    className=\"challenge-player-attachment font-paragraph-white\"\r\n                  >\r\n                    <img\r\n                      src={DumbbellIcon}\r\n                      alt=\"\"\r\n                      style={{ marginRight: \"10px\" }}\r\n                    />\r\n                    {e.name}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n          {workout.relatedProducts && workout.relatedProducts.length > 0 && (\r\n            <div className=\"workout-info\">\r\n              <p\r\n                className=\"font-paragraph-white\"\r\n                style={{\r\n                  color: \"#555A61\",\r\n                  fontWeight: \"500\",\r\n                  textTransform: \"uppercase\",\r\n                }}\r\n              >\r\n                RELATED PRODUCT FROM E-SHOP\r\n              </p>\r\n              <div>\r\n                {workout.relatedProducts.map((e) => (\r\n                  <button\r\n                    key={e._id}\r\n                    className=\"challenge-player-attachment font-paragraph-white\"\r\n                  >\r\n                    <img\r\n                      src={ShopIcon}\r\n                      alt=\"\"\r\n                      style={{ marginRight: \"10px\" }}\r\n                    />\r\n                    {e.name}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <WorkoutCompleteModal\r\n            finishWorkoutPopupVisible={finishWorkoutPopupVisible}\r\n            setFinishWorkoutPopupVisible={setFinishWorkoutPopupVisible}\r\n            challengeId={props.match.params.challengeId}\r\n            challengeSlug={props.match.params.challengeName}\r\n            history={props.history}\r\n            t={t}\r\n          />\r\n\r\n          {/* <div className=\"buy-related-products\">\r\n          <p className=\"font-heading-white\">Related Products</p>\r\n          {workout.relatedProducts.map((p) => (\r\n            <div className=\"buy-related-products-p font-paragraph-white\">\r\n              {p.name}\r\n            </div>\r\n          ))}\r\n          <button className=\"green-button font-paragraph-white\">\r\n            Buy Products\r\n          </button>\r\n        </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(ChallengePlayer);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Navbar.js",["671","672"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../assets/navbar.css\";\r\nimport {\r\n  MenuOutlined,\r\n  CloseOutlined,\r\n  CaretDownOutlined,\r\n  UserOutlined,\r\n  BellOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Logo from \"../images/logo.png\";\r\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\r\nimport { languageContext } from \"../contexts/LanguageContext\";\r\nimport { Avatar, Popover, Badge } from \"antd\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { logoutUser } from \"../services/authentication\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Coins from \"../assets/icons/coins.svg\";\r\n\r\nfunction Navbar({ color, history }) {\r\n  const [click, setClick] = useState(false);\r\n  const [navbar, setNavbar] = useState(false);\r\n  const [button, setButton] = useState(true);\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const userPoints = useContext(userPointsContext)[0];\r\n  const [language, setLangauge] = useContext(languageContext);\r\n\r\n  const [t] = useTranslation();\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n  const notificationContent = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      {userInfo.notifications.map((v) => (\r\n        <span className=\"font-paragraph-white\">{v.value}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n  const content = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      <Link to=\"/user/dashboard\" className=\"font-paragraph-white nav-links\">\r\n        {t(\"navbar.success_overview\")}\r\n      </Link>\r\n      <Link to=\"/user/update\" className=\"font-paragraph-white nav-links\">\r\n        {t(\"navbar.update\")}\r\n      </Link>\r\n\r\n      <Link to=\"/user/settings\" className=\"font-paragraph-white nav-links\">\r\n        {t(\"navbar.setting\")}\r\n      </Link>\r\n      <Link\r\n        className=\"font-paragraphw-white nav-links\"\r\n        onClick={() => logoutUser(history, setUserInfo)}\r\n      >\r\n        {\" \"}\r\n        {t(\"navbar.logout\")}\r\n      </Link>\r\n    </div>\r\n  );\r\n  const contentAdmin = (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      <Link to=\"/admin/dashboard\" className=\"font-paragraph-white nav-links\">\r\n        {t(\"navbar.admin_dashboard\")}\r\n      </Link>\r\n      <Link\r\n        className=\"font-paragraphw-white nav-links\"\r\n        onClick={() => logoutUser(history, setUserInfo)}\r\n      >\r\n        {\" \"}\r\n        {t(\"navbar.logout\")}\r\n      </Link>\r\n    </div>\r\n  );\r\n\r\n  const languageChooser = (\r\n    <div\r\n      style={{ display: \"flex\", flexDirection: \"column\", cursor: \"pointer\" }}\r\n    >\r\n      <span\r\n        onClick={() => {\r\n          setLangauge(\"English\");\r\n          localStorage.setItem(\"locale\", \"eng\");\r\n          window.location.reload();\r\n        }}\r\n        className=\"font-paragraph-white nav-links\"\r\n      >\r\n        English\r\n      </span>\r\n      <span\r\n        onClick={() => {\r\n          setLangauge(\"Dutch\");\r\n          localStorage.setItem(\"locale\", \"du\");\r\n          window.location.reload();\r\n        }}\r\n        className=\"font-paragraph-white nav-links\"\r\n      >\r\n        Dutch\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    showButton();\r\n    if (localStorage.getItem(\"locale\") === \"du\") {\r\n      setLangauge(\"Dutch\");\r\n    }\r\n  }, []);\r\n\r\n  window.addEventListener(\"resize\", showButton);\r\n  const changeBackground = () => {\r\n    if (window.scrollY >= 85) {\r\n      setNavbar(true);\r\n    } else {\r\n      setNavbar(false);\r\n    }\r\n  };\r\n  window.addEventListener(\"scroll\", changeBackground);\r\n  return (\r\n    <>\r\n      <nav\r\n        className={\r\n          navbar\r\n            ? `navbar active ${\r\n                color === \"dark\" && \"navbar-for-white-background\"\r\n              }`\r\n            : `navbar  ${color === \"dark\" && \"navbar-for-white-background\"}`\r\n        }\r\n      >\r\n        <div className=\"navbar-container\">\r\n          <Link to=\"/\" className=\"navbar-logo\" onClick={closeMobileMenu}>\r\n            <img src={Logo} alt=\"logo\" className=\"logo\" />\r\n          </Link>\r\n\r\n          <div className=\"menu-icon\" onClick={handleClick}>\r\n            {click ? (\r\n              <CloseOutlined style={{ color: \"#fff\", fontSize: \"2rem\" }} />\r\n            ) : (\r\n              <MenuOutlined style={{ color: \"#fff\", fontSize: \"2rem\" }} />\r\n            )}\r\n          </div>\r\n          <div style={{ position: \"absolute\", right: \"60px\", top: \"30px\" }}>\r\n            {!userInfo.authenticated && !button && (\r\n              <Link to=\"/new\" className=\"nav-button font-paragraph-white\">\r\n                Start Now\r\n              </Link>\r\n            )}\r\n            {!userInfo.authenticated && !button && (\r\n              <Link\r\n                to=\"/login\"\r\n                className=\"nav-button-login font-paragraph-white\"\r\n              >\r\n                Log In\r\n              </Link>\r\n            )}\r\n          </div>\r\n          <ul className={click ? \"nav-menu active\" : \"nav-menu\"}>\r\n            <li className=\"nav-item font-paragraph-white\">\r\n              <Link\r\n                to=\"/challenges\"\r\n                style={{ fontWeight: \"600\" }}\r\n                className=\"nav-links\"\r\n                onClick={closeMobileMenu}\r\n              >\r\n                {t(\"navbar.challenges\")}\r\n              </Link>\r\n              {/* </li> */}\r\n              {/* <li className=\"nav-item font-paragraph-white\"> */}\r\n              <Link\r\n                style={{ fontWeight: \"600\" }}\r\n                to=\"/trainers\"\r\n                className=\"nav-links\"\r\n                onClick={closeMobileMenu}\r\n              >\r\n                {t(\"navbar.trainers\")}\r\n              </Link>\r\n              {/* </li> */}\r\n              {/* <li className=\"nav-item font-paragraph-white\"> */}\r\n              <Link\r\n                style={{ fontWeight: \"600\" }}\r\n                to=\"/nutrition\"\r\n                className=\"nav-links\"\r\n                onClick={closeMobileMenu}\r\n              >\r\n                {t(\"navbar.nutrient\")}\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className=\"nav-item font-paragraph-white\"\r\n              style={{ justifyContent: !click && \"flex-end\" }}\r\n            >\r\n              <Link\r\n                to=\"/how-it-works\"\r\n                style={{ fontWeight: \"400\", fontSize: \"13px\" }}\r\n                className=\"nav-links\"\r\n                onClick={closeMobileMenu}\r\n              >\r\n                {t(\"navbar.how_it_works\")}\r\n              </Link>\r\n              {/* </li>\r\n            <li className=\"nav-item font-paragraph-white\"> */}\r\n              <Link\r\n                to=\"/pricing\"\r\n                className=\"nav-links\"\r\n                style={{ fontWeight: \"400\", fontSize: \"13px\" }}\r\n                onClick={closeMobileMenu}\r\n              >\r\n                {t(\"navbar.pricing\")}\r\n              </Link>\r\n              {/* </li>\r\n            <li className=\"nav-item font-paragraph-white\"> */}\r\n              <Link\r\n                to=\"/magazine\"\r\n                className=\"nav-links\"\r\n                style={{ fontWeight: \"400\", fontSize: \"13px\" }}\r\n                onClick={closeMobileMenu}\r\n              >\r\n                {t(\"navbar.magazine\")}\r\n              </Link>\r\n              <div className=\"loggedin-nav-userinfo\">\r\n                <Popover\r\n                  placement=\"bottom\"\r\n                  content={languageChooser}\r\n                  trigger=\"click\"\r\n                >\r\n                  <span\r\n                    className=\"font-paragraph-white\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                  >\r\n                    {language} <CaretDownOutlined />\r\n                  </span>\r\n                </Popover>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          {userInfo.authenticated ? (\r\n            <div className=\"loggedin-nav-userinfo\">\r\n              <Popover\r\n                placement=\"bottom\"\r\n                content={notificationContent}\r\n                trigger=\"click\"\r\n              >\r\n                <Badge\r\n                  count={userInfo.notifications.length}\r\n                  style={{\r\n                    backgroundColor: \"var(--color-orange)\",\r\n                    marginRight: \"20px\",\r\n                  }}\r\n                >\r\n                  <BellOutlined\r\n                    style={{\r\n                      fontSize: \"2.5rem\",\r\n                      color: \"#677182\",\r\n                      cursor: \"pointer\",\r\n                      backgroundColor: \"#171E27\",\r\n                      padding: \"5px\",\r\n                      marginRight: \"20px\",\r\n                    }}\r\n                  />\r\n                </Badge>\r\n              </Popover>\r\n              <Avatar\r\n                shape=\"square\"\r\n                src={userInfo.avatar}\r\n                icon={<UserOutlined />}\r\n                style={{\r\n                  marginRight: \"20px\",\r\n                }}\r\n              />\r\n              <Popover\r\n                placement=\"bottom\"\r\n                content={userInfo.role === \"customer\" ? content : contentAdmin}\r\n                trigger=\"click\"\r\n              >\r\n                <div className=\"loggedin-nav-name font-paragraph-white\">\r\n                  <span>\r\n                    {userInfo.username} <CaretDownOutlined />\r\n                  </span>\r\n                  <span style={{ color: \"#677182\", fontSize: \"1.6rem\" }}>\r\n                    <img src={Coins} /> {userPoints}\r\n                  </span>\r\n                </div>\r\n              </Popover>\r\n            </div>\r\n          ) : (\r\n            <div style={{ width: \"200px\" }}>\r\n              {button && (\r\n                <Link to=\"/new\" className=\"nav-button font-paragraph-white\">\r\n                  Start Now\r\n                </Link>\r\n              )}\r\n              {button && (\r\n                <Link\r\n                  to=\"/login\"\r\n                  className=\"nav-button-login font-paragraph-white\"\r\n                >\r\n                  Log In\r\n                </Link>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* <div\r\n            className=\"loggedin-nav-userinfo\"\r\n            style={{ width: \"fit-content\" }}\r\n          >\r\n            <Avatar\r\n              shape=\"square\"\r\n              src={userInfo.avatar}\r\n              icon={<UserOutlined />}\r\n              style={{\r\n                marginRight: \"20px\",\r\n              }}\r\n            />\r\n            <Popover placement=\"bottom\" content={content} trigger=\"click\">\r\n              <div className=\"loggedin-nav-name font-paragraph-white\">\r\n                <span>\r\n                  {userInfo.username} <CaretDownOutlined />\r\n                </span>\r\n                <span>\r\n                  <RocketOutlined style={{ color: \"var(--color-orange)\" }} />{\" \"}\r\n                  {userInfo.points}\r\n                </span>\r\n              </div>\r\n            </Popover>\r\n          </div> */}\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\coupons.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\AllFaqs.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallenge.js",["673","674","675","676"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeCompleteNextModal.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\users.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ChallengeProfile.js",["677","678","679","680","681"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"../assets/trainerprofile.css\";\r\nimport \"../assets/home.css\";\r\nimport \"../assets/challengeProfile.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport {\r\n  ArrowRightOutlined,\r\n  LoadingOutlined,\r\n  DownOutlined,\r\n  UpOutlined,\r\n  UndoOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Attachment from \"../assets/icons/attachement-symbol.png\";\r\nimport Ellipse from \"../assets/icons/ellipse.svg\";\r\nimport { addComment, getChallengeById } from \"../services/createChallenge/main\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport ModalVideo from \"react-modal-video\";\r\nimport { Tooltip, Collapse, Input, Avatar, Progress } from \"antd\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { userInfoContext } from \"../contexts/UserStore\";\r\nimport { checkUserPackage } from \"../services/payment\";\r\nimport { selectedChallengeContext } from \"../contexts/PaymentProcessStore\";\r\nimport { getChallengeProgress, getUserProfileInfo } from \"../services/users\";\r\nimport { addChallengeToCustomerDetail } from \"../services/customer\";\r\nimport { checkUser } from \"../services/authentication\";\r\nimport moment from \"moment\";\r\nimport HelpIcon from \"../assets/icons/Help-icon.png\";\r\nimport ShoopingIcon from \"../assets/icons/shopping-symbol.png\";\r\nimport ChallengeProfileSubtract from \"../assets/icons/challenge-profile-subtract.svg\";\r\nimport StarFilled from \"../assets/icons/star-orange.svg\";\r\nimport StartTransparent from \"../assets/icons/star-transparent.svg\";\r\nimport ForwardWhite from \"../assets/icons/forward-white.png\";\r\nimport ChallengeCompleteModal from \"../components/Challenge/ChallengeCompleteModal\";\r\nimport ReplaceFreeChallengePopup from \"../components/Challenge/ReplaceFreeChallengePopup\";\r\nimport ChallengeReviewModal from \"../components/Challenge/ChallengeReviewModal\";\r\nimport { set } from \"lodash\";\r\nimport slug from \"elegant-slug\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst tooltipText = `\r\nIf you don’t choose any plan and hit start now, you can go through the wizard, get your free intake, make a free account and enjoy our free challenges collection and one week meal plan. \r\n`;\r\nfunction ChallengeProfile(props) {\r\n  const [reviewOpen, setReviewOpen] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  // eslint-disable-next-line\r\n  const [t] = useTranslation();\r\n  const [challenge, setChallenge] = useState({});\r\n  const [usereDtails, setUserDetails] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [pack, setPack] = useState(\"\");\r\n  const [selectedChallenge, setSelectedChallenge] = useContext(\r\n    selectedChallengeContext\r\n  );\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const [commentButtonLoading, setCommentButtomLoading] = useState(false);\r\n  const [showChangePanel, setShowChangePanel] = useState([]);\r\n  const [allComments, setAllComments] = useState([]);\r\n  const [challengeProgress, setChallengeProgress] = useState(null);\r\n\r\n  // flag if user owns this challenge or not\r\n  const [userOwnsThisChallenge, setUserOwnsThisChallenge] = useState(\"\");\r\n  const [finishChallengePopupVisible, setFinishChallengePopupVisible] =\r\n    useState(false);\r\n  const [\r\n    replaceFreeChallengePopupVisible,\r\n    setReplaceFreeChallengePopupVisible,\r\n  ] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    const res = await getChallengeById(props.match.params.id);\r\n    setChallenge(res);\r\n    setAllComments(res.comments);\r\n    if (localStorage.getItem(\"jwtToken\") && userInfo.id) {\r\n      const uInfo = await getUserProfileInfo(userInfo.id);\r\n      uInfo && setUserDetails(uInfo.customer);\r\n      const check =\r\n        uInfo &&\r\n        uInfo.customer &&\r\n        uInfo.customer.customerDetails &&\r\n        uInfo.customer.customerDetails.challenges.find(\r\n          (f) => f._id === res._id\r\n        );\r\n      console.log(\"check\", check, uInfo);\r\n      setUserOwnsThisChallenge(check);\r\n      // if users the challenge\r\n      if (check) {\r\n        let challengeProgress = await getChallengeProgress(\r\n          props.match.params.id\r\n        );\r\n        if (challengeProgress.data) {\r\n          setChallengeProgress(challengeProgress.data);\r\n          console.log(\"ammar\", challengeProgress, challenge);\r\n          if (\r\n            challengeProgress.data &&\r\n            challengeProgress.data.challengeCompletionRate === 100 &&\r\n            !challengeProgress.data.challengeReview\r\n          ) {\r\n            setFinishChallengePopupVisible(true);\r\n          }\r\n        }\r\n        console.log(\"challengeProgress\", challengeProgress);\r\n      }\r\n      console.log(\"uInfo\", uInfo);\r\n    }\r\n    setLoading(false);\r\n    console.log(res, \"res\");\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [userInfo]);\r\n\r\n  const postCommentToBackend = async () => {\r\n    setCommentButtomLoading(true);\r\n    const res = await addComment(challenge._id, commentText);\r\n\r\n    if (res) {\r\n      setAllComments(res.comments);\r\n    }\r\n    setCommentButtomLoading(false);\r\n    setCommentText(\"\");\r\n    // console.log(res);\r\n  };\r\n\r\n  function isWorkoutLocked(workoutId, i, j) {\r\n    // when is workout locked.\r\n    // if there is no challenge progress in backend so we only show first workout unlocked everything else is locked.\r\n    // if therer is a challenge progress, we only unlock a workout with the following 3 cases:\r\n    //workout is completed\r\n    // workout is in progress\r\n    // workout is next one to the one completed\r\n    var flag = true;\r\n    const isPrevWorkoutCompleted =\r\n      challenge &&\r\n      challengeProgress &&\r\n      j > 0 &&\r\n      challengeProgress.completedWorkouts.includes(\r\n        challenge.weeks[i].workouts[j - 1]._id\r\n      );\r\n\r\n    const isPrevWeekCompleted =\r\n      challenge &&\r\n      challengeProgress &&\r\n      i >= 1 &&\r\n      challenge.weeks[i - 1].workouts.every((r) =>\r\n        challengeProgress.completedWorkouts.includes(r._id)\r\n      );\r\n\r\n    console.log(\r\n      \"hahshasd\",\r\n      i >= 1 &&\r\n        challengeProgress &&\r\n        challenge.weeks[i - 1].workouts.every((r) =>\r\n          challengeProgress.completedWorkouts.includes(r._id)\r\n        )\r\n    );\r\n    if (challengeProgress === null && (i !== 0 || j !== 0)) {\r\n      flag = true;\r\n    }\r\n\r\n    if (challengeProgress) {\r\n      if (\r\n        challengeProgress.completedWorkouts.includes(workoutId) ||\r\n        challengeProgress.currentWorkout === workoutId ||\r\n        isPrevWorkoutCompleted ||\r\n        isPrevWeekCompleted\r\n      ) {\r\n        flag = false;\r\n      }\r\n    }\r\n\r\n    console.log(\r\n      \"flagggggggggggg\",\r\n      flag,\r\n      isPrevWorkoutCompleted,\r\n      isPrevWeekCompleted\r\n    );\r\n\r\n    return flag;\r\n  }\r\n\r\n  function getEquipmentsFromWorkouts(weeks) {\r\n    const workouts =\r\n      weeks &&\r\n      weeks.map((w) => {\r\n        return w.workouts;\r\n      });\r\n    const merged = [].concat.apply([], workouts);\r\n    const relatedEquipments = merged.map((m) => m.relatedEquipments);\r\n    const eg = [].concat.apply([], relatedEquipments);\r\n    return eg.length > 0 ? (\r\n      <div className=\"trainer-profile-goals\">\r\n        <div\r\n          className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n          style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\r\n        >\r\n          {t(\"challenge_profile.equipments\")}\r\n        </div>\r\n        <div className=\"trainer-profile-goals-container\">\r\n          {/* {getEquipmentsFromWorkouts(challenge.weeks)} */}\r\n          {eg.map((body) => (\r\n            <div\r\n              className=\"trainer-profile-goal font-paragraph-white\"\r\n              style={{ marginRight: \"1px\", background: \"#283443\" }}\r\n            >\r\n              {body.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <></>\r\n    );\r\n  }\r\n\r\n  const pushCustomerOnConditions = async () => {\r\n    // console.log(\"YAAAAAAAAS\");\r\n    // check if user is logged in\r\n    if (userInfo.id) {\r\n      //this check wheater the customer is subscribed or not\r\n      //TODO: if customer is susbcribed and he doest not already have access to 3 challenges, I need to add this challenge to his challenge array(make sure he is not subscirbed to package 1)\r\n      const ch = checkUserPackage(\r\n        usereDtails,\r\n        challenge,\r\n        pack,\r\n        props.history,\r\n        setSelectedChallenge,\r\n        setReplaceFreeChallengePopupVisible\r\n      );\r\n      // console.log(\"chhhhhh\", ch);\r\n      // return;\r\n      if (ch) {\r\n        if (ch.success && ch.message === \"SUBSCRIBE\") {\r\n          const res = await addChallengeToCustomerDetail(\r\n            userInfo.id,\r\n            challenge._id\r\n          );\r\n          if (res && res.success) {\r\n            fetchData();\r\n          }\r\n          console.log(\"res\", res);\r\n          console.log(\"complete this part\", ch);\r\n        }\r\n      }\r\n    } else {\r\n      console.log(userInfo.id);\r\n      setSelectedChallenge(challenge);\r\n      localStorage.setItem(\"package-type\", pack);\r\n      props.history.push(\"/new\");\r\n    }\r\n  };\r\n\r\n  const getWeeksComponent = () => {\r\n    if (userOwnsThisChallenge) {\r\n      return <div></div>;\r\n    } else {\r\n      if (challenge && challenge.access && challenge.access.includes(\"FREE\")) {\r\n        return (\r\n          <>\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\r\n            >\r\n              SUBSCRIPTION\r\n              <Tooltip placement=\"top\" title={tooltipText}>\r\n                <img src={HelpIcon} alt=\"\" style={{ marginLeft: \"5px\" }} />\r\n              </Tooltip>\r\n            </div>\r\n            <div className=\"font-paragraph-white\">\r\n              Get access to all features\r\n            </div>\r\n\r\n            <div className=\"unlock-challenge-div font-paragraph-white\">\r\n              <span style={{ fontSize: \"20px\", fontWeight: \"600\" }}>\r\n                One free challenge\r\n              </span>\r\n              <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>€0</span>\r\n              <span className=\"font-paragraph-white\">No Subscription</span>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ color: \"#9F9F9F\" }}\r\n              >\r\n                Hit start now, and find the challenge on your dashboard\r\n              </span>\r\n            </div>\r\n          </>\r\n        );\r\n      } else {\r\n        if (\r\n          usereDtails &&\r\n          usereDtails.customerDetails &&\r\n          usereDtails.customerDetails.membership &&\r\n          usereDtails.customerDetails.membership.length > 0\r\n        ) {\r\n          <div></div>;\r\n        } else {\r\n          return (\r\n            <>\r\n              <div\r\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\r\n              >\r\n                SUBSCRIPTION\r\n                <Tooltip placement=\"top\" title={tooltipText}>\r\n                  <img src={HelpIcon} alt=\"\" style={{ marginLeft: \"5px\" }} />\r\n                </Tooltip>\r\n              </div>\r\n              <div className=\"font-paragraph-white\">\r\n                Get access to all features\r\n              </div>\r\n              <div className=\"unlock-challenge-packages\">\r\n                <div\r\n                  className=\"unlock-challenge-pack font-paragraph-white\"\r\n                  onClick={() => {\r\n                    if (pack === \"CHALLENGE_1\") {\r\n                      setPack(\"\");\r\n                    } else {\r\n                      setPack(\"CHALLENGE_1\");\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    border:\r\n                      pack === \"CHALLENGE_1\"\r\n                        ? \"2px solid #f37720\"\r\n                        : \"2px solid #2a2f36\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"20px\",\r\n                      fontWeight: \"400\",\r\n                      marginBottom: \"30px\",\r\n                    }}\r\n                  >\r\n                    One-Time <br /> Challenge\r\n                  </span>\r\n                  <span\r\n                    style={{ fontSize: \"26px\", fontWeight: \"600\" }}\r\n                  >{`${challenge.currency}${challenge.price}`}</span>\r\n                  <span style={{ margin: \"15px 0\" }}>No subscription</span>\r\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\r\n                    Billed Once\r\n                  </span>\r\n                </div>\r\n                <div\r\n                  className=\"unlock-challenge-pack font-paragraph-white\"\r\n                  onClick={() => {\r\n                    if (pack === \"CHALLENGE_12\") {\r\n                      setPack(\"\");\r\n                    } else {\r\n                      setPack(\"CHALLENGE_12\");\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    border:\r\n                      pack === \"CHALLENGE_12\"\r\n                        ? \"2px solid #f37720\"\r\n                        : \"2px solid #2a2f36\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"20px\",\r\n                      fontWeight: \"400\",\r\n                      marginBottom: \"10px\",\r\n                    }}\r\n                  >\r\n                    Repeat & Save\r\n                  </span>\r\n                  <span\r\n                    className=\"font-paragraph-white\"\r\n                    style={{\r\n                      fontSize: \"13px\",\r\n                      backgroundColor: \"#f37720\",\r\n                      padding: \"5px\",\r\n                      width: \"120px\",\r\n                      fontWeight: \"600\",\r\n                      alignSelf: \"center\",\r\n                      marginBottom: \"10px\",\r\n                    }}\r\n                  >\r\n                    Save up to 60%\r\n                  </span>\r\n                  <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>\r\n                    €4.5 <span style={{ fontSize: \"14px\" }}>/Week</span>\r\n                  </span>\r\n                  <span style={{ margin: \"15px 0\" }}>12 months plan</span>\r\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\r\n                    Billed Monthly\r\n                  </span>\r\n                </div>\r\n                <div\r\n                  className=\"unlock-challenge-pack font-paragraph-white\"\r\n                  onClick={() => {\r\n                    if (pack === \"CHALLENGE_3\") {\r\n                      setPack(\"\");\r\n                    } else {\r\n                      setPack(\"CHALLENGE_3\");\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    border:\r\n                      pack === \"CHALLENGE_3\"\r\n                        ? \"2px solid #f37720\"\r\n                        : \"2px solid #2a2f36\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"20px\",\r\n                      fontWeight: \"400\",\r\n                      marginBottom: \"10px\",\r\n                    }}\r\n                  >\r\n                    Repeat & Save\r\n                  </span>\r\n                  <span\r\n                    className=\"font-paragraph-white\"\r\n                    style={{\r\n                      fontSize: \"13px\",\r\n                      backgroundColor: \"#f37720\",\r\n                      padding: \"5px\",\r\n                      width: \"120px\",\r\n                      fontWeight: \"600\",\r\n                      alignSelf: \"center\",\r\n                      marginBottom: \"10px\",\r\n                    }}\r\n                  >\r\n                    Save up to 30%\r\n                  </span>\r\n                  <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>\r\n                    €6 <span style={{ fontSize: \"14px\" }}>/Week</span>\r\n                  </span>\r\n                  <span style={{ margin: \"15px 0\" }}>3 months plan</span>\r\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\r\n                    Billed Monthly\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </>\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  function openChallengePlayer(address, workout, i, j) {\r\n    if (isWorkoutLocked(workout._id, i, j) && (i !== 0 || j !== 0)) {\r\n    } else {\r\n      props.history.push(address);\r\n    }\r\n  }\r\n  const getWeeks = () => {\r\n    // if user has that specific challenge in its details\r\n    console.log(\"usereDtails asdasdasd\", usereDtails);\r\n    if (userOwnsThisChallenge) {\r\n      return (\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          {challenge.weeks &&\r\n            challenge.weeks.map((w, i) => (\r\n              <>\r\n                <h3\r\n                  className=\"font-paragraph-white\"\r\n                  style={{ margin: \"10px 0\" }}\r\n                >\r\n                  {w.weekName}\r\n                </h3>\r\n                <div\r\n                  className=\"trainer-profile-goals-container\"\r\n                  // style={{ backgroundColor: \"#2D3239\" }}\r\n                >\r\n                  {w.workouts &&\r\n                    w.workouts.map((workout, j) => (\r\n                      <div\r\n                        onClick={() =>\r\n                          openChallengePlayer(\r\n                            `/play-challenge/${props.match.params.challengeName}/${challenge._id}/${workout._id}`,\r\n                            workout,\r\n                            i,\r\n                            j\r\n                          )\r\n                        }\r\n                        className={`challenge-profile-comment font-paragraph-white`}\r\n                        key={workout._id}\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-between\",\r\n                          flexDirection: \"row\",\r\n                          alignItems: \"center\",\r\n                          cursor: \"pointer\",\r\n                          backgroundColor: \"#2D3239\",\r\n                          position: \"relative\",\r\n                        }}\r\n                      >\r\n                        {isWorkoutLocked(workout._id, i, j) &&\r\n                          (i !== 0 || j !== 0) && (\r\n                            <div className=\"workout-card-disabled\"></div>\r\n                          )}\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <img\r\n                            src={Ellipse}\r\n                            alt=\"\"\r\n                            style={{\r\n                              marginRight: \"5px\",\r\n                            }}\r\n                          />\r\n                          <div\r\n                            className=\"font-paragraph-white\"\r\n                            style={{\r\n                              margin: \"0 5px\",\r\n                              display: \"flex\",\r\n                              flexDirection: \"column\",\r\n                            }}\r\n                          >\r\n                            <span>{workout.title}</span>\r\n                            <span\r\n                              style={{ color: \"#BABCBF\", fontSize: \"14px\" }}\r\n                            >\r\n                              {workout.subtitle}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                          {workout.introVideoLink && (\r\n                            <span\r\n                              className=\"font-paragraph-white\"\r\n                              style={{\r\n                                backgroundColor: \"#354c63\",\r\n                                padding: \"3px 10px\",\r\n                                margin: \"0 2px\",\r\n                              }}\r\n                            >\r\n                              Intro\r\n                            </span>\r\n                          )}\r\n                          {workout.relatedEquipments &&\r\n                            workout.relatedEquipments.map((w) => (\r\n                              <span\r\n                                className=\"font-paragraph-white\"\r\n                                style={{\r\n                                  backgroundColor: \"#354c63\",\r\n                                  padding: \"5px 10px\",\r\n                                  margin: \"0 2px\",\r\n                                }}\r\n                              >\r\n                                {w.name}\r\n                              </span>\r\n                            ))}\r\n                          {workout.infoFile && (\r\n                            <img\r\n                              src={Attachment}\r\n                              alt=\"\"\r\n                              style={{\r\n                                margin: \"0 2px\",\r\n                              }}\r\n                            />\r\n                          )}\r\n\r\n                          {workout.relatedProducts &&\r\n                            workout.relatedProducts.length > 0 && (\r\n                              <img\r\n                                src={ShoopingIcon}\r\n                                alt=\"\"\r\n                                style={{\r\n                                  margin: \"0 2px\",\r\n                                }}\r\n                              />\r\n                            )}\r\n\r\n                          {challengeProgress &&\r\n                          challengeProgress.completedWorkouts.includes(\r\n                            workout._id\r\n                          ) ? (\r\n                            <UndoOutlined\r\n                              style={{\r\n                                margin: \"0 5px\",\r\n                              }}\r\n                            />\r\n                          ) : (\r\n                            <ArrowRightOutlined\r\n                              style={{\r\n                                margin: \"0 5px\",\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                        {challengeProgress &&\r\n                          (challengeProgress.completedWorkouts.includes(\r\n                            workout._id\r\n                          ) ||\r\n                            challengeProgress.currentWorkout ===\r\n                              workout._id) && (\r\n                            <span\r\n                              className=\"workout-bottom-border\"\r\n                              style={{\r\n                                width:\r\n                                  challengeProgress &&\r\n                                  challengeProgress.currentWorkout ===\r\n                                    workout._id\r\n                                    ? `${challengeProgress.currentWorkoutCompletionRate}%`\r\n                                    : \"100%\",\r\n                              }}\r\n                            ></span>\r\n                          )}\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              </>\r\n            ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <Collapse\r\n          defaultActiveKey={[]}\r\n          onChange={(e) => setShowChangePanel(e)}\r\n          style={{\r\n            backgroundColor: \"#171e27\",\r\n            marginTop: \"10px\",\r\n            padding: \"10px\",\r\n          }}\r\n        >\r\n          {challenge.weeks &&\r\n            challenge.weeks.map((w, i) => (\r\n              <Collapse.Panel\r\n                showArrow={false}\r\n                style={{ backgroundColor: \"#1b2632\", marginBottom: \"5px\" }}\r\n                header={\r\n                  <>\r\n                    {console.log(\"week\", w)}\r\n                    <span\r\n                      className=\"font-paragraph-white\"\r\n                      style={{\r\n                        fontSize: \"13px\",\r\n                        backgroundColor: \"#f37720\",\r\n                        padding: \"5px\",\r\n                        width: \"120px\",\r\n                        textTransform: \"uppercase\",\r\n                        margin: \"0 0 12px 5px\",\r\n                      }}\r\n                    >\r\n                      {w.weekName}\r\n                    </span>\r\n                    <div\r\n                      style={{\r\n                        fontWeight: \"500\",\r\n                        fontSize: \"16px\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"space-between\",\r\n                        padding: \"8px\",\r\n                        textTransform: \"uppercase\",\r\n                      }}\r\n                      className=\"font-paragraph-white\"\r\n                    >\r\n                      <span> {w.weekSubtitle}</span>\r\n                      <span>\r\n                        {showChangePanel.includes(`${i + 1}`) ? (\r\n                          <UpOutlined style={{ color: \"#ff7700\" }} />\r\n                        ) : (\r\n                          <DownOutlined style={{ color: \"#ff7700\" }} />\r\n                        )}\r\n                      </span>\r\n                    </div>\r\n                  </>\r\n                }\r\n                key={i + 1}\r\n              >\r\n                <div\r\n                  className=\"trainer-profile-goals-container\"\r\n                  style={{ backgroundColor: \"#1b2632\" }}\r\n                >\r\n                  {w.workouts &&\r\n                    w.workouts.map((workout) => (\r\n                      <div\r\n                        className=\"challenge-profile-comment font-paragraph-white\"\r\n                        key={workout._id}\r\n                        style={{\r\n                          display: \"flex\",\r\n                          flexDirection: \"column\",\r\n                          justifyContent: \"space-between\",\r\n                          alignItems: \"flex-start\",\r\n                          backgroundColor: \"transparent\",\r\n                        }}\r\n                      >\r\n                        <span>{workout.title}</span>\r\n                        <span\r\n                          className=\"font-paragraph-white\"\r\n                          style={{ fontSize: \"13px\" }}\r\n                        >\r\n                          {workout.subtitle}\r\n                        </span>\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              </Collapse.Panel>\r\n            ))}\r\n        </Collapse>\r\n      );\r\n    }\r\n  };\r\n\r\n  return loading ? (\r\n    <div className=\"center-inpage\">\r\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <Helmet>\r\n        <title>{`Realchallenge: ${challenge.challengeName}`}</title>\r\n        <meta name=\"description\" content={challenge.description} />\r\n        <meta property=\"og:title\" content={challenge.challengeName} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:description\" content={challenge.description} />\r\n        <meta\r\n          property=\"og:url\"\r\n          content={`http://localhost:3001/${slug(challenge.challengeName)}/${\r\n            challenge._id\r\n          }`}\r\n        />\r\n        <meta name=\"author\" content=\"Realchallenge\" />\r\n      </Helmet>\r\n      <Navbar />\r\n      {/* video modal */}\r\n      <ModalVideo\r\n        channel=\"custom\"\r\n        autoplay\r\n        isOpen={open}\r\n        controlsList=\"nodownload\"\r\n        url={challenge.videoThumbnailLink}\r\n        onClose={() => setOpen(false)}\r\n      />\r\n      <ChallengeReviewModal\r\n        visible={reviewOpen}\r\n        setVisible={setReviewOpen}\r\n        challenge={challenge}\r\n      />\r\n      <div className=\"trainer-profile-container\">\r\n        <div\r\n          className=\"trainer-profile-container-column1\"\r\n          style={{\r\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${\r\n              process.env.REACT_APP_SERVER\r\n            }/api${challenge.thumbnailLink ? challenge.thumbnailLink : \"\"})`,\r\n            backgroundSize: \"cover\",\r\n            backgroundPosition: \"10% 10%\",\r\n          }}\r\n        >\r\n          <div className=\"profile-box\">\r\n            <div className=\"challenge-profile-box-1\">\r\n              <img\r\n                src={ChallengeProfileSubtract}\r\n                alt=\"\"\r\n                onClick={() => setOpen(true)}\r\n              />\r\n              <h1 className=\"font-heading-white\" style={{ fontSize: \"4rem\" }}>\r\n                {challenge.challengeName ? challenge.challengeName : \"\"}\r\n              </h1>\r\n              <Progress\r\n                percent={\r\n                  challengeProgress && challengeProgress.challengeCompletionRate\r\n                    ? challengeProgress.challengeCompletionRate\r\n                    : 0\r\n                }\r\n                style={{ height: \"4px\" }}\r\n                trailColor=\"rgb(79, 90, 104)\"\r\n                showInfo={false}\r\n              />\r\n            </div>\r\n            <div className=\"challenge-profile-box-2\">\r\n              <div className=\"challenge-profile-box-2-rating\">\r\n                <div style={{ padding: \"5px\" }}>\r\n                  {new Array(challenge.rating).fill(0).map(() => (\r\n                    <img\r\n                      src={StarFilled}\r\n                      alt=\"\"\r\n                      style={{ height: \"20px\", margin: \"2px\" }}\r\n                    />\r\n                  ))}\r\n                  {new Array(challenge.rating ? 5 - challenge.rating : 5)\r\n                    .fill(0)\r\n                    .map(() => (\r\n                      <img\r\n                        src={StartTransparent}\r\n                        alt=\"\"\r\n                        style={{ height: \"20px\", margin: \"2px\" }}\r\n                      />\r\n                    ))}\r\n                </div>\r\n                <span onClick={() => setReviewOpen(true)}>\r\n                  {t(\"challenge_profile.reviews\")}\r\n                </span>\r\n              </div>\r\n              <div className=\"challenge-profile-box-2-info\">\r\n                <div className=\"challenge-profile-box-2-container\">\r\n                  <img src={ForwardWhite} alt=\"\" />{\" \"}\r\n                  {challenge.difficulty ? challenge.difficulty : \"\"}\r\n                </div>\r\n                <div className=\"challenge-profile-box-2-container\">\r\n                  {challenge.duration ? `${challenge.duration} mins` : \"\"}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"font-paragraph-white\"\r\n                style={{ fontSize: \"18px\", marginTop: \"10px\" }}\r\n              >\r\n                {challenge.description}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"trainer-profile-container-column2\">\r\n          <div className=\"trainer-profile-goals\">\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"challenge_profile.trainers\")}\r\n            </div>\r\n            <div className=\"challenge-trainers-container\">\r\n              {challenge.trainers &&\r\n                challenge.trainers.map((trainer) => (\r\n                  <div\r\n                    className=\"challenge-trainer-box\"\r\n                    style={{ background: \"#283443\" }}\r\n                  >\r\n                    <span\r\n                      style={{\r\n                        backgroundImage: `url(${process.env.REACT_APP_SERVER}/api${trainer.avatarLink})`,\r\n                        backgroundPosition: \"center center\",\r\n                        backgroundSize: \"cover\",\r\n                        backgroundRepeat: \"no-repeat\",\r\n                        height: \"50px\",\r\n                        width: \"60px\",\r\n                      }}\r\n                    ></span>\r\n                    {/* <img\r\n                      // src={}\r\n                      alt={trainer.firstName}\r\n                    /> */}\r\n                    <Link\r\n                      to={`/trainer/${trainer._id}`}\r\n                      className=\"challenge-trainer-box-text font-paragraph-white\"\r\n                    >\r\n                      {trainer.firstName + \" \" + trainer.lastName}\r\n                    </Link>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n          {challenge.trainersFitnessInterest && (\r\n            <div className=\"trainer-profile-goals\">\r\n              <div\r\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\r\n              >\r\n                {/* {t(\"challenge_profile.goals\")}\r\n                 */}\r\n                Fitness Interests\r\n              </div>\r\n              <div className=\"trainer-profile-goals-container\">\r\n                {challenge.trainersFitnessInterest &&\r\n                  challenge.trainersFitnessInterest.map((goal) => (\r\n                    <div\r\n                      className=\"trainer-profile-goal font-paragraph-white\"\r\n                      style={{ marginRight: \"1px\", background: \"#283443\" }}\r\n                    >\r\n                      {goal.name}\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"trainer-profile-goals\">\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"challenge_profile.body_focus\")}\r\n            </div>\r\n            <div className=\"trainer-profile-goals-container\">\r\n              {challenge.body &&\r\n                challenge.body.map((body) => (\r\n                  <div\r\n                    className=\"trainer-profile-goal font-paragraph-white\"\r\n                    style={{ marginRight: \"1px\", background: \"#283443\" }}\r\n                  >\r\n                    {body.name}\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n\r\n          {getEquipmentsFromWorkouts(challenge.weeks)}\r\n\r\n          <div\r\n            className=\"trainer-profile-goals\"\r\n            style={{ position: \"relative\" }}\r\n          >\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\r\n            >\r\n              YOUR PERSONAL JOURNEY\r\n            </div>\r\n            {getWeeks()}\r\n          </div>\r\n          <div\r\n            className=\"trainer-profile-goals\"\r\n            style={{\r\n              position: \"relative\",\r\n              borderBottom: \"1px solid transparent\",\r\n            }}\r\n          >\r\n            {getWeeksComponent()}\r\n          </div>\r\n\r\n          <div\r\n            className=\"trainer-profile-goals\"\r\n            style={{ textAlign: \"center\", paddingTop: \"10px\" }}\r\n          >\r\n            {userOwnsThisChallenge ? (\r\n              \"\"\r\n            ) : (\r\n              <button\r\n                className=\"create-payment-check-out font-paragraph-white\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  cursor: \"pointer\",\r\n                  width: \"100%\",\r\n                }}\r\n                onClick={pushCustomerOnConditions}\r\n              >\r\n                <span\r\n                  className=\"font-paragraph-white\"\r\n                  style={{ fontWeight: \"600\" }}\r\n                >\r\n                  {t(\"challenge_profile.start_today\")} <ArrowRightOutlined />\r\n                </span>\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div\r\n            className=\"trainer-profile-goals\"\r\n            style={{ borderBottom: \"1px solid transparent\" }}\r\n          >\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{\r\n                color: \"#72777B\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {t(\"challenge_profile.comments\")}\r\n            </div>\r\n            {allComments.map((c) => (\r\n              <div className=\"comment-container\">\r\n                <div className=\"comment-container-c1 font-paragraph-white\">\r\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\r\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\r\n                  <div className=\"comment-container-c2 font-paragraph-white\">\r\n                    {c.text}\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"font-paragraph-white comment-container-c3\"\r\n                  style={{ color: \"#82868b\" }}\r\n                >\r\n                  {moment(c.createdAt).format(\"MMM, Do YY\")}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {localStorage.getItem(\"jwtToken\") && (\r\n              <>\r\n                <div\r\n                  className=\"trainer-profile-goals-container\"\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    value={commentText}\r\n                    onChange={(e) => setCommentText(e.target.value)}\r\n                  />\r\n                </div>\r\n                {commentButtonLoading ? (\r\n                  <LoadingOutlined\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      fontSize: \"30px\",\r\n                      marginTop: \"10px\",\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <button\r\n                    className=\"common-transparent-button font-paragraph-white\"\r\n                    onClick={postCommentToBackend}\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      borderColor: \"#ff7700\",\r\n                      marginTop: \"10px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    POST COMMENT\r\n                  </button>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ChallengeCompleteModal\r\n        visible={finishChallengePopupVisible}\r\n        setVisible={setFinishChallengePopupVisible}\r\n        challengeId={props.match.params.id}\r\n        challenge={challenge}\r\n        points={50}\r\n        fetchData={fetchData}\r\n      />\r\n      <ReplaceFreeChallengePopup\r\n        challenge={challenge}\r\n        visible={replaceFreeChallengePopupVisible}\r\n        setVisible={setReplaceFreeChallengePopupVisible}\r\n        fetchData={fetchData}\r\n      />\r\n\r\n      {/* <Footer /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(ChallengeProfile);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ChallengeReviewModal.js",["682"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\Coupons\\AllCoupons.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\NewProduct.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\communityPosts.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeMainTab.js",["683","684","685","686","687"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\mediaManager.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\responsive.js",[],["688","689"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ExerciseManager\\UpdateExercise.js",["690"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Modal, Select } from \"antd\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { updateExercise } from \"../../../services/createChallenge/main\";\r\n\r\nfunction UpdateExercise({\r\n  show,\r\n  setShow,\r\n  exerciseValues,\r\n  fetchExercises,\r\n  allTrainers,\r\n}) {\r\n  const [form] = Form.useForm();\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const [videoLink, setVideoLink] = useState(\"\");\r\n  const [voiceOverLink, setVoiceOverLink] = useState(\"\");\r\n  const [trainer, setTrainer] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"trainer\", exerciseValues.trainer);\r\n    form.setFieldsValue({\r\n      title: exerciseValues.title,\r\n      break: exerciseValues.break,\r\n      exerciseLength: exerciseValues.exerciseLength,\r\n      exerciseGroupName: exerciseValues.exerciseGroupName,\r\n      description: exerciseValues.description,\r\n      trainer: exerciseValues.trainer,\r\n    });\r\n    setVideoLink({\r\n      link: exerciseValues.videoURL,\r\n      name: exerciseValues.videoURL,\r\n    });\r\n    setTrainer(exerciseValues.trainer);\r\n    setVoiceOverLink({\r\n      link: exerciseValues.voiceOverLink,\r\n      name: exerciseValues.voiceOverLink,\r\n    });\r\n    console.log(\"nrere\", exerciseValues);\r\n  }, []);\r\n\r\n  const onFinish = async (values) => {\r\n    if (videoLink && trainer) {\r\n      const data = {\r\n        videoURL: videoLink.link,\r\n        voiceOverLink: voiceOverLink.link,\r\n        trainer: trainer,\r\n        ...values,\r\n      };\r\n      const res = await updateExercise(data, exerciseValues._id);\r\n      fetchExercises();\r\n      setShow(false);\r\n      console.log(\"values\", res);\r\n    } else {\r\n      alert(\"Please add a video link of a exercise\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={show}\r\n      onCancel={() => setShow(false)}\r\n      footer={false}\r\n      width=\"70%\"\r\n    >\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      <h2 className=\"font-heading-white\">Update Exercise</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Exercise Title\"\r\n            name=\"title\"\r\n            rules={[\r\n              { required: true, message: \"Please input exercise title!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item label=\"Exercise Video\" required=\"true\">\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"videos\");\r\n                setMediaManagerActions([videoLink, setVideoLink]);\r\n              }}\r\n            >\r\n              Upload Video\r\n            </Button>\r\n            <div\r\n              className=\"font-paragraph-white\"\r\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\r\n            >\r\n              {videoLink && videoLink.name}\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item label=\"Exercise Description\" name=\"description\">\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item label=\"Trainer\" required=\"true\">\r\n            {/* {console.log(\"trainers\", trainers)} */}\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Please select\"\r\n              value={trainer ? trainer._id : \"\"}\r\n              onChange={(e) => setTrainer(e)}\r\n            >\r\n              {allTrainers.map((trainer) => (\r\n                <Select.Option value={trainer._id}>\r\n                  {trainer.firstName} {trainer.lastName}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item label=\"Voiceover Link\">\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"voiceOvers\");\r\n                setMediaManagerActions([voiceOverLink, setVoiceOverLink]);\r\n              }}\r\n            >\r\n              Upload Video\r\n            </Button>\r\n            <div\r\n              className=\"font-paragraph-white\"\r\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\r\n            >\r\n              {voiceOverLink && voiceOverLink.name}\r\n            </div>\r\n          </Form.Item>\r\n\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Update Exercise\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default UpdateExercise;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\MusicPlayer.js",["691","692","693","694","695","696","697","698"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Modal, Slider } from \"antd\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { CloseOutlined, CustomerServiceOutlined } from \"@ant-design/icons\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\n\r\nimport MusicIcon from \"../../assets/icons/music-player-volume-icon.png\";\r\nimport MuteMusicIcon from \"../../assets/icons/music-player-volume-mute-icon.png\";\r\nimport MusicListIcon from \"../../assets/icons/music-list-icon.png\";\r\nimport PlayerState, {\r\n  breakContext,\r\n  playerStateContext,\r\n} from \"../../contexts/PlayerState\";\r\n\r\nfunction MusicPlayer({ visible, setMusicPlayerVisible, musicList }) {\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [currentBreak, setCurrentBreak] = useContext(breakContext);\r\n  const { height, width } = useWindowDimensions();\r\n  const [currentPlaying, setCurrentPLaying] = useState({\r\n    _id: 12345,\r\n    name: \"\",\r\n    url: \"\",\r\n  });\r\n  const [volume, setVolume] = useState(100);\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (playerState.playing) {\r\n      localStorage.setItem(\"music-playing\", true);\r\n      return;\r\n    }\r\n\r\n    if (currentBreak && !playerState.playing) {\r\n      localStorage.setItem(\"music-playing\", true);\r\n      return;\r\n    }\r\n\r\n    localStorage.removeItem(\"music-playing\");\r\n  }, [playerState.playing, currentBreak]);\r\n  const handleOnMusicSelect = (m) => {\r\n    if (m === \"stop\") {\r\n      console.log(\"hereere\");\r\n      // setPlaying(false);\r\n      setCurrentPLaying({\r\n        _id: 12345,\r\n        name: \"\",\r\n        url: \"\",\r\n      });\r\n      localStorage.removeItem(\"music-playing\");\r\n      return;\r\n    }\r\n\r\n    setCurrentPLaying(m);\r\n    localStorage.setItem(\"music-playing\", true);\r\n    // setPlaying(true);\r\n  };\r\n  const onVolumeChange = (e) => {\r\n    // volume needs to be between 0 and 1\r\n    setVolume(e / 100);\r\n  };\r\n  // const onPlayPause = () => {\r\n  //   setPlaying((prev) => !prev);\r\n  // };\r\n  return (\r\n    <div\r\n      className=\"music-player-modal-container\"\r\n      style={{ display: visible ? \"flex\" : \"none\" }}\r\n    >\r\n      {console.log(\"======================================>\", currentPlaying)}\r\n      <CloseOutlined\r\n        onClick={() => setMusicPlayerVisible(false)}\r\n        style={{\r\n          color: \"rgb(255, 255, 255)\",\r\n          top: \"20px\",\r\n          position: \"absolute\",\r\n          fontSize: \"30px\",\r\n          right: \"50px\",\r\n        }}\r\n      />\r\n      <ReactPlayer\r\n        width=\"100%\"\r\n        height=\"100px\"\r\n        url={`${process.env.REACT_APP_SERVER}/api${currentPlaying.url}`}\r\n        style={{ outline: \"none\", border: \"none\", display: \"none\" }}\r\n        playing={localStorage.getItem(\"music-playing\")}\r\n        controls={false}\r\n        volume={volume}\r\n        loop={true}\r\n      />\r\n      <div className=\"music-player-slider-container\">\r\n        <img src={MuteMusicIcon} alt=\"\" />\r\n        <Slider\r\n          value={volume * 100}\r\n          min={0}\r\n          max={100}\r\n          style={{ width: \"70%\", display: \"inline-block\" }}\r\n          onChange={onVolumeChange}\r\n          onAfterChange={onVolumeChange}\r\n          tipFormatter={(v) => `${v}%`}\r\n        />\r\n        <img src={MusicIcon} alt=\"\" />\r\n      </div>\r\n      <div className=\"music-player-modal-container--list\">\r\n        <img src={MusicListIcon} alt=\"music-list-icon\" />{\" \"}\r\n        <h3 className=\"font-paragraph-white\">Choose your mood</h3>\r\n        <Scrollbars style={{ minHeight: \"100px\" }}>\r\n          <div className=\"music-player-modal-container--list-files\">\r\n            <div key={1234} onClick={() => handleOnMusicSelect(\"stop\")}>\r\n              <span\r\n                style={{\r\n                  color:\r\n                    currentPlaying._id !== 12345\r\n                      ? \"#fff\"\r\n                      : \"var(--color-orange)\",\r\n                  transform:\r\n                    currentPlaying._id !== 12345 ? \"scale(1)\" : \"scale(1.02)\",\r\n                }}\r\n                className=\"font-paragraph-white\"\r\n              >\r\n                <CustomerServiceOutlined /> No Music\r\n              </span>\r\n            </div>\r\n            {musicList.map((m) => (\r\n              <div key={m._id} onClick={() => handleOnMusicSelect(m)}>\r\n                <span\r\n                  className=\"font-paragraph-white\"\r\n                  style={{\r\n                    color:\r\n                      currentPlaying._id === m._id\r\n                        ? \"var(--color-orange)\"\r\n                        : \"#fff\",\r\n                    transform:\r\n                      currentPlaying._id === m._id ? \"scale(1.02)\" : \"scale(1)\",\r\n                  }}\r\n                >\r\n                  <CustomerServiceOutlined /> {m.name}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Scrollbars>\r\n      </div>\r\n    </div>\r\n    // </Modal>\r\n  );\r\n}\r\n\r\nexport default MusicPlayer;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\CreatePayment.js",["699","700","701","702"],"// import React, { useState, useEffect, useContext } from \"react\";\r\n// import { Link, withRouter } from \"react-router-dom\";\r\n// import \"../../assets/createPayment.css\";\r\n// import { useTranslation } from \"react-i18next\";\r\n// import { createPayment, mollieAuthUser } from \"../../services/payment\";\r\n// import { getRecommandedChallenges } from \"../../services/users\";\r\n// import { userInfoContext } from \"../../contexts/UserStore\";\r\n// import { Scrollbars } from \"react-custom-scrollbars\";\r\n// import {\r\n//   FlagOutlined,\r\n//   LoadingOutlined,\r\n//   ArrowRightOutlined,\r\n//   CaretRightOutlined,\r\n// } from \"@ant-design/icons\";\r\n// import ForwardIcon from \"../../assets/icons/forward-arrows.png\";\r\n// import Checkbox from \"antd/lib/checkbox/Checkbox\";\r\n// import Logo from \"../../images/logo.png\";\r\n// import { Modal, Input, Divider } from \"antd\";\r\n// import { selectedChallengeContext } from \"../../contexts/PaymentProcessStore\";\r\n\r\n// function CreatePayment(props) {\r\n//   const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n//   const [selectedChallenge, setSelectedChallenge] = useContext(\r\n//     selectedChallengeContext\r\n//   );\r\n//   const [showCouponModal, setShowCouponModal] = useState(false);\r\n//   const [challenges, setChallenges] = useState([]);\r\n//   const [selectedChallenges, setSelectedChallenges] = useState([]);\r\n//   const [pack, setPack] = useState(\"\");\r\n//   const [packInfo, setPackInfo] = useState({\r\n//     noOfChallenges: \"\",\r\n//     save: \"\",\r\n//     price: \"\",\r\n//     billed: \"\",\r\n//   });\r\n\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [challengeLoading, setChallengeLoading] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const pack = localStorage.getItem(\"package-type\");\r\n\r\n//     if (pack === \"CHALLENGE_12\") {\r\n//       setPackInfo({\r\n//         noOfChallenges: \"12\",\r\n//         save: \"40%\",\r\n//         price: \"19.99\",\r\n//         billed: \"12\",\r\n//       });\r\n//     }\r\n//     if (pack === \"CHALLENGE_1\") {\r\n//       setPackInfo({\r\n//         noOfChallenges: \"1\",\r\n//         save: \"\",\r\n//         price: selectedChallenge.price ? selectedChallenge.price : \"\",\r\n//         billed: \"1\",\r\n//       });\r\n//     }\r\n//     if (pack === \"CHALLENGE_3\") {\r\n//       setPackInfo({\r\n//         noOfChallenges: \"3\",\r\n//         save: \"20%\",\r\n//         price: \"26.00\",\r\n//         billed: \"3\",\r\n//       });\r\n//     }\r\n//     setPack(pack.replace(\"_\", \" \"));\r\n//     selectedChallenge._id &&\r\n//       setSelectedChallenges([selectedChallenge, ...selectedChallenges]);\r\n\r\n//     fetchRecommandedChallenges();\r\n//   }, []);\r\n\r\n//   const fetchRecommandedChallenges = async () => {\r\n//     console.log(userInfo.id);\r\n//     setChallengeLoading(true);\r\n//     const challenges = await getRecommandedChallenges(userInfo.id);\r\n//     if (challenges) {\r\n//       const filterFreeChallenges =\r\n//         challenges.recommendedchallenge &&\r\n//         challenges.recommendedchallenge.filter(\r\n//           (c) => !c.access.includes(\"FREE\")\r\n//         );\r\n//       console.log(\"filterFreeChallenges\", filterFreeChallenges);\r\n//       setChallenges(filterFreeChallenges);\r\n//     }\r\n//     setChallengeLoading(false);\r\n//     // console.log(challenges);\r\n//   };\r\n\r\n//   const isChallengeChecked = (d) => {\r\n//     const checked = selectedChallenges.filter((f) => f._id === d._id);\r\n//     if (checked.length > 0) {\r\n//       return true;\r\n//     } else {\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const addChallengeToArray = (value, d) => {\r\n//     if (pack === \"CHALLENGE 1\") {\r\n//       if (value) {\r\n//         if (selectedChallenges.length < 1) {\r\n//           !isChallengeChecked(d) &&\r\n//             setSelectedChallenges([...selectedChallenges, d]);\r\n//         } else {\r\n//           alert(\"You can only choose 1 challenges at a single time.\");\r\n//         }\r\n//       } else {\r\n//         const f = isChallengeChecked(d)\r\n//           ? selectedChallenges.filter((f) => f._id !== d._id)\r\n//           : selectedChallenges;\r\n//         setSelectedChallenges(f);\r\n//       }\r\n//     } else {\r\n//       if (value) {\r\n//         if (selectedChallenges.length <= 2) {\r\n//           !isChallengeChecked(d) &&\r\n//             setSelectedChallenges([...selectedChallenges, d]);\r\n//         } else {\r\n//           alert(\"You can only choose 3 challenges at a single time.\");\r\n//         }\r\n//       } else {\r\n//         const f = isChallengeChecked(d)\r\n//           ? selectedChallenges.filter((f) => f._id !== d._id)\r\n//           : selectedChallenges;\r\n//         setSelectedChallenges(f);\r\n//       }\r\n//     }\r\n\r\n//     console.log(value, d);\r\n//     console.log(\"asdasdasd\", selectedChallenges);\r\n//   };\r\n\r\n//   const sendRequestToMollie = async () => {\r\n//     setLoading(true);\r\n//     const pack = localStorage.getItem(\"package-type\");\r\n//     var data = {\r\n//       id: userInfo.id,\r\n//       name: userInfo.username,\r\n//       email: userInfo.email,\r\n//       currency: \"EUR\",\r\n//       value: packInfo.price ? parseFloat(packInfo.price).toFixed(2) : \"\",\r\n//       description: pack,\r\n//       redirectUrl: `${process.env.REACT_APP_FRONTEND_SERVER}/mollie/create-subscribtion/redirect`,\r\n//     };\r\n//     if (pack === \"CHALLENGE_1\") {\r\n//       if (selectedChallenges[0]) {\r\n//         data = {\r\n//           ...data,\r\n//           currency:\r\n//             selectedChallenges[0].currency &&\r\n//             selectedChallenges[0].currency === \"€\"\r\n//               ? \"EUR\"\r\n//               : \"USD\",\r\n//           value: selectedChallenges[0].price.toFixed(2),\r\n//         };\r\n//       } else {\r\n//         alert(\"Please select the challenge that you want to pay for.\");\r\n//         setLoading(false);\r\n//         return;\r\n//       }\r\n//     }\r\n//     console.log(data);\r\n//     var storeForLaterUse = {\r\n//       currency: data.currency,\r\n//       value: data.value,\r\n//       // times: packInfo.billed,\r\n//       interval: \"1 month\",\r\n//       description: pack,\r\n//     };\r\n//     const res = await createPayment(data);\r\n//     setLoading(false);\r\n//     if (res) {\r\n//       const link = res._links.checkout.href;\r\n//       storeForLaterUse = {\r\n//         ...storeForLaterUse,\r\n//         custId: res.customerId,\r\n//         id: userInfo.id,\r\n//       };\r\n//       localStorage.setItem(\"subObject\", JSON.stringify(storeForLaterUse));\r\n//       localStorage.setItem(\r\n//         \"selectedChallenges\",\r\n//         JSON.stringify(selectedChallenges)\r\n//       );\r\n//       window.location = link;\r\n//     }\r\n//     console.log(\"to be\", res);\r\n//   };\r\n\r\n//   const getPackagePaymentInfo = () => (\r\n//     <div className=\"create-payment-create-payment-info\">\r\n//       <h1 className=\"create-payment-font-heading-white\">Payment Overview</h1>\r\n//       <h3 className=\"create-payment-font-subheading-white\">\r\n//         Selected Package:{\" \"}\r\n//         {pack === \"CHALLENGE 1\"\r\n//           ? \"CHALLENGE ONE\"\r\n//           : pack === \"CHALLENGE 12\"\r\n//           ? \"CHALLENGE TWELVE\"\r\n//           : pack === \"CHALLENGE 3\"\r\n//           ? \"CHALLENGE THREE\"\r\n//           : \"\"}\r\n//       </h3>\r\n//       {pack === \"CHALLENGE 1\" ? (\r\n//         <div>\r\n//           <h3 className=\"create-payment-font-subheading-white\">{`Challenge Name: ${\r\n//             selectedChallenges[0] ? selectedChallenges[0].challengeName : \"-\"\r\n//           }`}</h3>\r\n//           <h3 className=\"create-payment-font-heading-white\">{`Total Price: ${\r\n//             selectedChallenges[0]\r\n//               ? selectedChallenges[0].currency + selectedChallenges[0].price\r\n//               : \"-\"\r\n//           }`}</h3>\r\n//         </div>\r\n//       ) : (\r\n//         <>\r\n//           <h3 className=\"create-payment-font-subheading-white\">{`Package Price: € ${packInfo.price} / month`}</h3>\r\n//           {selectedChallenges.length > 0 && (\r\n//             <div>\r\n//               <h3 className=\"create-payment-font-subheading-white\">Selected Challenges:</h3>\r\n\r\n//               {selectedChallenges.map((s) => (\r\n//                 <p className=\"create-payment-font-heading-white\">\r\n//                   <CaretRightOutlined style={{ color: \"#ff7700\" }} />{\" \"}\r\n//                   {s.challengeName}\r\n//                 </p>\r\n//               ))}\r\n//             </div>\r\n//           )}\r\n//           <Divider style={{ borderTop: \"1px solid #171e27\" }} />\r\n//           <h3 className=\"create-payment-font-heading-white\">{`Total Price: € ${packInfo.price} / month`}</h3>\r\n//         </>\r\n//       )}\r\n//       <div style={{ marginTop: \"30px\" }}>\r\n//         <button\r\n//           className=\"create-payment-common-orange-button font-paragraph-white\"\r\n//           onClick={() => setShowCouponModal(true)}\r\n//           style={{ marginRight: \"10px\" }}\r\n//         >\r\n//           Add Coupon Code\r\n//         </button>\r\n//         {loading ? (\r\n//           <LoadingOutlined style={{ color: \"#ff7700\", fontSize: \"35px\" }} />\r\n//         ) : (\r\n//           <button\r\n//             className=\"create-payment-common-orange-button font-paragraph-white\"\r\n//             onClick={() => sendRequestToMollie()}\r\n//           >\r\n//             Checkout <ArrowRightOutlined />\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n\r\n//   return (\r\n//     <>\r\n//       <Modal\r\n//         visible={showCouponModal}\r\n//         onCancel={() => setShowCouponModal(false)}\r\n//         footer={false}\r\n//       >\r\n//         <h1 className=\"create-payment-font-heading-white\">Enter Coupon Code</h1>\r\n//         <Input />\r\n//         <button\r\n//           className=\"create-payment-common-orange-button font-paragraph-white\"\r\n//           style={{ marginTop: \"10px\" }}\r\n//         >\r\n//           Verify Code\r\n//         </button>\r\n//       </Modal>\r\n//       <div className=\"create-payment-create-payment-page\">\r\n//         <img\r\n//           src={Logo}\r\n//           alt=\"real-challenge\"\r\n//           height=\"50px\"\r\n//           style={{ marginBottom: \"10px\" }}\r\n//         />\r\n//         <div className=\"create-payment-create-payment-container\">\r\n//           {console.log(\"selected challenges\", selectedChallenges)}\r\n//           <div className=\"create-payment-create-payment-card\">\r\n//             <h1 className=\"create-payment-font-heading-white\">\r\n//               Recommanded Challenges For You\r\n//             </h1>\r\n//             <p\r\n//               className=\"create-payment-font-paragraph-white\"\r\n//               style={{ marginBottom: \"20px\" }}\r\n//             >\r\n//               {`Please select ${\r\n//                 pack === \"CHALLENGE 1\"\r\n//                   ? \"1 challenge that you want to get access to.\"\r\n//                   : \"any 3 challenges that you want to get access to or move on with payment process\"\r\n//               } `}\r\n//             </p>\r\n\r\n//             <Scrollbars\r\n//               style={{\r\n//                 height: \"450px\",\r\n//                 border: \"2px solid var(--color-orange)\",\r\n//                 backgroundColor: \"var(--color-gray)\",\r\n//                 position: \"relative\",\r\n//               }}\r\n//             >\r\n//               {challengeLoading ? (\r\n//                 <LoadingOutlined\r\n//                   style={{\r\n//                     color: \"#ff7700\",\r\n//                     fontSize: \"55px\",\r\n//                     padding: \"50px\",\r\n//                   }}\r\n//                 />\r\n//               ) : (\r\n//                 <div className=\"create-payment-dashboard-challenges-mychallenge-body\">\r\n//                   {challenges && challenges.length > 0 ? (\r\n//                     challenges.map((d) => (\r\n//                       <div\r\n//                         style={{ display: \"flex\", alignItems: \"center\" }}\r\n//                         key={d._id}\r\n//                       >\r\n//                         <div style={{ width: \"100%\" }}>\r\n//                           <Link to={`/challenge/${d._id}`}>\r\n//                             <div\r\n//                               className=\"create-payment-dashboard-challenges-mychallenge-body-box\"\r\n//                               style={{\r\n//                                 background: `url(${process.env.REACT_APP_SERVER}/api${d.thumbnailLink})`,\r\n//                                 backgroundSize: \"cover\",\r\n//                                 backgroundPosition: \"50% 50%\",\r\n//                                 position: \"relative\",\r\n//                               }}\r\n//                             >\r\n//                               {d.difficulty && (\r\n//                                 <div\r\n//                                   className=\"create-payment-dashboard-feed-container-card-row2-tag font-paragraph-white\"\r\n//                                   style={{\r\n//                                     position: \"absolute\",\r\n//                                     top: \"0\",\r\n//                                     left: \"0\",\r\n//                                   }}\r\n//                                 >\r\n//                                   <FlagOutlined\r\n//                                     style={{ paddingRight: \"2px\" }}\r\n//                                   />\r\n//                                   {d.difficulty}\r\n//                                 </div>\r\n//                               )}\r\n//                               <div className=\"create-payment-dashboard-challenges-mychallenge-body-box-insidebox\">\r\n//                                 <span className=\"create-payment-dashboard-challenges-mychallenge-body-box-insidebox-name font-heading-white\">\r\n//                                   {d.challengeName}\r\n//                                 </span>\r\n//                                 <span className=\"create-payment-dashboard-challenges-mychallenge-body-box-insidebox-about font-paragraph-white\">\r\n//                                   {d.description}\r\n//                                 </span>\r\n//                                 <img\r\n//                                   src={ForwardIcon}\r\n//                                   style={{ marginTop: \"5px\" }}\r\n//                                   alt=\"forward\"\r\n//                                   height=\"15px\"\r\n//                                   width=\"40px\"\r\n//                                 />\r\n//                               </div>\r\n//                             </div>\r\n//                           </Link>\r\n//                         </div>\r\n//                         {selectedChallenges.includes(d.id)}\r\n//                         <Checkbox\r\n//                           style={{ marginLeft: \"10px\" }}\r\n//                           checked={isChallengeChecked(d)}\r\n//                           onClick={(value) =>\r\n//                             addChallengeToArray(value.target.checked, d)\r\n//                           }\r\n//                         />\r\n//                       </div>\r\n//                     ))\r\n//                   ) : (\r\n//                     <h2 className=\"create-payment-font-heading-white\">No Challenges Found.</h2>\r\n//                   )}\r\n//                 </div>\r\n//               )}\r\n//             </Scrollbars>\r\n//           </div>\r\n\r\n//           {getPackagePaymentInfo()}\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default withRouter(CreatePayment);\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\r\nimport PaymentPoints from \"../../assets/icons/payment-points-logo.png\";\r\n\r\nimport {\r\n  ArrowLeftOutlined,\r\n  ArrowRightOutlined,\r\n  DownOutlined,\r\n  LoadingOutlined,\r\n  UpOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Collapse, Input } from \"antd\";\r\n\r\nimport { userInfoContext, userPointsContext } from \"../../contexts/UserStore\";\r\nimport { selectedChallengeContext } from \"../../contexts/PaymentProcessStore\";\r\n\r\nimport \"../../assets/createPayment.css\";\r\nimport VerifyUser from \"../UserDashboard/VerifyUser\";\r\nimport { createPayment } from \"../../services/payment\";\r\nimport { getCouponByCode, getCouponDiscount } from \"../../services/coupons\";\r\nimport { availMyPoints } from \"../../services/users\";\r\n\r\nfunction CreatePayment(props) {\r\n  const [couponCode, setCouponCode] = useState(\"\");\r\n  const [newPrice, setNewPrice] = useState({ success: false, price: 0 });\r\n  const [showCouponModal, setShowCouponModal] = useState([]);\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [userPoints, setUserPoints] = useContext(userPointsContext);\r\n  const [selectedChallenge, setSelectedChallenge] = useContext(\r\n    selectedChallengeContext\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [pack, setPack] = useState(\"\");\r\n  const [packInfo, setPackInfo] = useState({\r\n    name: \"\",\r\n    noOfChallenges: \"\",\r\n    save: \"\",\r\n    price: \"\",\r\n    billed: \"\",\r\n  });\r\n  const [couponButtonLoading, setCouponButtonLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const getDiscountFromPoints = async () => {\r\n    if (userPoints >= 100) {\r\n      const d = userPoints;\r\n      const res = await availMyPoints(setUserPoints);\r\n      if (res) {\r\n        setPackInfo({\r\n          ...packInfo,\r\n          price: packInfo.price - d / 100,\r\n        });\r\n        const c = { ...selectedChallenge, price: selectedChallenge.price - 1 };\r\n        setSelectedChallenge(c);\r\n      }\r\n      console.log(d, packInfo, res, packInfo.price - d / 100, userPoints);\r\n    } else {\r\n      console.log(\"here\");\r\n    }\r\n  };\r\n  const checkCouponCode = async () => {\r\n    setCouponButtonLoading(true);\r\n    const couponInfo = await getCouponByCode(couponCode);\r\n\r\n    if (couponInfo.success) {\r\n      const coupon = couponInfo.data.coupon;\r\n      console.log(coupon, packInfo, pack);\r\n      if (\r\n        packInfo.name === \"One-Time Challenge\" &&\r\n        coupon.applicableOn.includes(\"CHALLENGE ONE\")\r\n      ) {\r\n        if (\r\n          coupon.challengesApplicableOn &&\r\n          !coupon.challengesApplicableOn.includes(selectedChallenge._id)\r\n        ) {\r\n          alert(\"Coupon isnt available for the selected challenge!\");\r\n          return;\r\n        }\r\n        // console.log(\"valid\");\r\n        const res = await getCouponDiscount(coupon._id);\r\n        if (res.success) {\r\n          setPackInfo({\r\n            ...packInfo,\r\n            price: packInfo.price - packInfo.price * (coupon.discount / 100),\r\n          });\r\n        }\r\n        setCouponButtonLoading(false);\r\n        return;\r\n      } else if (\r\n        packInfo.name === \"3 Months Plan\" &&\r\n        coupon.applicableOn.includes(\"CHALLENGE THREE\")\r\n      ) {\r\n        const res = await getCouponDiscount(coupon._id);\r\n        if (res && res.success) {\r\n          console.log(\r\n            coupon,\r\n            packInfo,\r\n            packInfo.price - packInfo.price * (coupon.discountPercent / 100)\r\n          );\r\n          setPackInfo({\r\n            ...packInfo,\r\n            price:\r\n              packInfo.price - packInfo.price * (coupon.discountPercent / 100),\r\n          });\r\n        }\r\n        setCouponButtonLoading(false);\r\n        return;\r\n      } else if (\r\n        packInfo.name === \"12 Months Plan\" &&\r\n        coupon.applicableOn.includes(\"CHALLENGE TWELVE\")\r\n      ) {\r\n        const res = await getCouponDiscount(coupon._id);\r\n        if (res.success) {\r\n          setPackInfo({\r\n            ...packInfo,\r\n            price: packInfo.price - packInfo.price * (coupon.discount / 100),\r\n          });\r\n        }\r\n        setCouponButtonLoading(false);\r\n        return;\r\n      } else {\r\n        alert(\"This code is not valid for these subscribtion package\");\r\n      }\r\n\r\n      // setNewPrice({success: true, })\r\n      // const res = await useCoupon(id);\r\n    }\r\n    setCouponButtonLoading(false);\r\n    // console.log(\"resssssss\", res);\r\n  };\r\n  useEffect(() => {\r\n    const pack = localStorage.getItem(\"package-type\");\r\n\r\n    if (pack === \"CHALLENGE_12\") {\r\n      setPackInfo({\r\n        name: \"12 Months Plan\",\r\n        noOfChallenges: \"12\",\r\n        save: \"40%\",\r\n        price: \"19.99\",\r\n        billed: \"12\",\r\n      });\r\n    }\r\n    if (pack === \"CHALLENGE_1\") {\r\n      setPackInfo({\r\n        name: \"One-Time Challenge\",\r\n        noOfChallenges: \"1\",\r\n        save: \"\",\r\n        price: selectedChallenge.price ? selectedChallenge.price : \"\",\r\n        billed: \"1\",\r\n      });\r\n    }\r\n    if (pack === \"CHALLENGE_3\") {\r\n      setPackInfo({\r\n        name: \"3 Months Plan\",\r\n        noOfChallenges: \"3\",\r\n        save: \"20%\",\r\n        price: \"26.00\",\r\n        billed: \"3\",\r\n      });\r\n    }\r\n    setPack(pack.replace(\"_\", \" \"));\r\n  }, []);\r\n\r\n  const sendRequestToMollie = async () => {\r\n    setLoading(true);\r\n    const pack = localStorage.getItem(\"package-type\");\r\n    var data = {\r\n      id: userInfo.id,\r\n      name: userInfo.username,\r\n      email: userInfo.email,\r\n      currency: \"EUR\",\r\n      value: packInfo.price ? parseFloat(packInfo.price).toFixed(2) : \"\",\r\n      description: pack,\r\n      redirectUrl: `${process.env.REACT_APP_FRONTEND_SERVER}/mollie/create-subscribtion/redirect`,\r\n    };\r\n    if (pack === \"CHALLENGE_1\") {\r\n      if (selectedChallenge) {\r\n        data = {\r\n          ...data,\r\n          currency:\r\n            selectedChallenge.currency && selectedChallenge.currency === \"€\"\r\n              ? \"EUR\"\r\n              : \"USD\",\r\n          value: selectedChallenge.price.toFixed(2),\r\n        };\r\n      } else {\r\n        alert(\"Please select the challenge that you want to pay for.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n    }\r\n    console.log(data);\r\n    var storeForLaterUse = {\r\n      currency: data.currency,\r\n      value: data.value,\r\n      // times: packInfo.billed,\r\n      interval: \"1 month\",\r\n      description: pack,\r\n    };\r\n    const res = await createPayment(data);\r\n    setLoading(false);\r\n    if (res) {\r\n      const link = res._links.checkout.href;\r\n      storeForLaterUse = {\r\n        ...storeForLaterUse,\r\n        custId: res.customerId,\r\n        id: userInfo.id,\r\n      };\r\n      localStorage.setItem(\"subObject\", JSON.stringify(storeForLaterUse));\r\n      localStorage.setItem(\r\n        \"selectedChallenges\",\r\n        JSON.stringify([selectedChallenge])\r\n      );\r\n      window.location = link;\r\n    }\r\n    console.log(\"to be\", res);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"#2a2f36\",\r\n        minHeight: \"100vh\",\r\n        width: \"100vw\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <VerifyUser fromNewWelcomeScreen={true} />\r\n      <div style={{ display: \"flex\" }}>\r\n        <Link to=\"\"></Link>\r\n      </div>\r\n      <button\r\n        onClick={() => history.goBack()}\r\n        className=\"font-paragraph-white\"\r\n        style={{\r\n          color: \"#fff\",\r\n          fontSize: \"18px\",\r\n          backgroundColor: \"var(--mirage)\",\r\n          padding: \"10px \",\r\n          float: \"left\",\r\n          margin: \"10px 0 0 50px\",\r\n          position: \"absolute\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        <ArrowLeftOutlined /> Back\r\n      </button>\r\n      <div className=\"create-payment-overlap-group-1\">\r\n        <h1 className=\"font-heading-white\" style={{ marginBottom: \"40px\" }}>\r\n          Overview\r\n        </h1>\r\n        {/* ---- */}\r\n        <div className=\"create-payment-undercover\">\r\n          <div className=\"font-paragraph-white\" style={{ fontWeight: \"600\" }}>\r\n            {packInfo.name}\r\n          </div>\r\n          <div className=\"font-paragraph-white\" style={{ fontWeight: \"600\" }}>\r\n            {packInfo.noOfChallenges === \"1\"\r\n              ? `${selectedChallenge.currency} ${selectedChallenge.price}`\r\n              : `€ ${packInfo.price}`}\r\n          </div>\r\n        </div>\r\n        {/* ---- */}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            marginTop: \"10px\",\r\n          }}\r\n        >\r\n          <div\r\n            className=\"font-paragraph-white\"\r\n            style={{ color: \"rgba(196, 196, 196, 1)\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              if (packInfo.noOfChallenges === \"1\" && selectedChallenge._id) {\r\n                const win = window.open(\r\n                  `challenge/${selectedChallenge._id}`,\r\n                  \"_blank\"\r\n                );\r\n                win.focus();\r\n              }\r\n            }}\r\n          >\r\n            {packInfo.noOfChallenges === \"1\"\r\n              ? selectedChallenge.challengeName\r\n              : packInfo.noOfChallenges === \"3\"\r\n              ? \"Unlock all features for 3 months\"\r\n              : packInfo.noOfChallenges === \"12\"\r\n              ? \"Unlock all features for 12 months\"\r\n              : \"\"}\r\n          </div>\r\n          <div\r\n            className=\"font-paragraph-white\"\r\n            style={{ color: \"rgba(196, 196, 196, 1)\" }}\r\n          >\r\n            {packInfo.noOfChallenges === \"1\"\r\n              ? \"One Time Payment\"\r\n              : \"Automatically Monthly Payment\"}\r\n          </div>\r\n        </div>\r\n        {/* ---- */}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            fontWeight: \"500\",\r\n            fontStyle: \"normal\",\r\n            fontSize: \"20px\",\r\n            lineHeight: \"20px\",\r\n            marginTop: \"30px\",\r\n          }}\r\n        >\r\n          <div className=\"font-paragraph-white\" style={{ fontWeight: \"600\" }}>\r\n            Challenge Points\r\n          </div>\r\n          <div\r\n            className=\"font-paragraph-white\"\r\n            style={{ color: \"rgba(196, 196, 196, 1)\", fontSize: \"14px\" }}\r\n          >\r\n            <span>\r\n              Your balance is <img src={PaymentPoints} alt=\"\" /> {userPoints}{\" \"}\r\n              points\r\n              {userPoints > 0 &&\r\n                `(€${userPoints / 100} or $${userPoints / 100})`}\r\n            </span>{\" \"}\r\n            <br />\r\n            <span> Minimum Balance in order to redeem: 100</span>\r\n          </div>\r\n        </div>\r\n        <button\r\n          style={{\r\n            color: \"#676868\",\r\n            fontSize: \"14px\",\r\n            border: \"1px solid #676868\",\r\n            backgroundColor: \"transparent\",\r\n            width: \"120px\",\r\n            padding: \"5px\",\r\n            marginTop: \"10px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={() => getDiscountFromPoints()}\r\n        >\r\n          Redeem Points\r\n        </button>\r\n        {/* ---- */}\r\n\r\n        <Collapse\r\n          // defaultActiveKey={[\"1\"]}\r\n          onChange={(e) => setShowCouponModal(e)}\r\n        >\r\n          <Collapse.Panel\r\n            style={{ backgroundColor: \"var(--mirage)\" }}\r\n            showArrow={false}\r\n            header={\r\n              <>\r\n                <div\r\n                  style={{\r\n                    fontWeight: \"500\",\r\n                    fontStyle: \"normal\",\r\n                    fontSize: \"20px\",\r\n                    lineHeight: \"20px\",\r\n                    marginTop: \"30px\",\r\n                    marginLeft: \"-12px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                  className=\"font-paragraph-white\"\r\n                >\r\n                  <span>Coupon Code</span>\r\n                  <span>\r\n                    {showCouponModal.length > 0 ? (\r\n                      <DownOutlined />\r\n                    ) : (\r\n                      <UpOutlined />\r\n                    )}\r\n                  </span>\r\n                </div>\r\n                <div className=\"create-payment-rectangle-1885\"></div>\r\n              </>\r\n            }\r\n            key=\"1\"\r\n          >\r\n            <div\r\n              style={{\r\n                background: \"var(--mirage)\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              <Input\r\n                value={couponCode}\r\n                onChange={(e) => setCouponCode(e.target.value)}\r\n                placeholder=\"Enter Voucher\"\r\n                style={{ width: \"70%\" }}\r\n              />\r\n              {couponButtonLoading ? (\r\n                <LoadingOutlined style={{ color: \"#fff\", fontSize: \"30px\" }} />\r\n              ) : (\r\n                <button\r\n                  style={{\r\n                    color: \"#676868\",\r\n                    fontSize: \"14px\",\r\n                    border: \"1px solid #676868\",\r\n                    backgroundColor: \"transparent\",\r\n                    width: \"120px\",\r\n                    padding: \"5px\",\r\n                    marginLeft: \"10px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => checkCouponCode()}\r\n                >\r\n                  Redeem Code\r\n                </button>\r\n              )}\r\n            </div>\r\n          </Collapse.Panel>\r\n        </Collapse>\r\n        {/* ----- */}\r\n        <div\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            color: \"rgba(196, 196, 196, 1)\",\r\n            fontSize: \"14px\",\r\n            marginTop: \"30px\",\r\n          }}\r\n        >\r\n          SUMMARY\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            fontWeight: \"600\",\r\n            fontStyle: \"normal\",\r\n            fontSize: \"20px\",\r\n            lineHeight: \"20px\",\r\n          }}\r\n        >\r\n          <div className=\"font-paragraph-white\">Order Total</div>\r\n          <div className=\"font-paragraph-white\">\r\n            {packInfo.noOfChallenges === \"1\"\r\n              ? `${selectedChallenge.currency} ${selectedChallenge.price}`\r\n              : `€ ${packInfo.price}`}\r\n            {/* {`€ ${packInfo.price}`} */}\r\n          </div>\r\n        </div>\r\n        {/* ----- */}\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            marginTop: \"30px\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {loading ? (\r\n            <LoadingOutlined style={{ color: \"#e67936\", fontSize: \"30px\" }} />\r\n          ) : (\r\n            <div\r\n              className=\"create-payment-check-out poppins-medium-white-20px\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                cursor: \"pointer\",\r\n                letterSpacing: \"1px\",\r\n              }}\r\n              onClick={sendRequestToMollie}\r\n            >\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ fontSize: \"18px\", fontWeight: \"600\" }}\r\n              >\r\n                Check out\r\n              </span>\r\n              <ArrowRightOutlined\r\n                style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(CreatePayment);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Challenges.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\PrivacyPolicy.js",["703","704","705","706"],"import React, { useContext, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Card } from \"antd\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport FileViewer from \"react-file-viewer\";\r\nimport PrivacyPolicyDocument from \"../assets/documents/Privacy Policy - Real Challenge.docx\";\r\nimport PrivacyPolicyDocumentDutch from \"../assets/documents/Privacverklaring - Real Challenge.docx\";\r\nimport { languageContext } from \"../contexts/LanguageContext\";\r\n\r\nconst bodyStyle = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  width: \"100%\",\r\n  height: \"115vh\",\r\n  paddingTop: \"50px\",\r\n  backgroundColor: \"#e1e9f2\",\r\n};\r\n\r\nconst type = \"docx\";\r\n\r\nconst onError = (e) => {\r\n  console.log(e, \"error in file-viewer\");\r\n};\r\nfunction PrivacyPolicy() {\r\n  const [t] = useTranslation();\r\n  const [language, setLangauge] = useContext(languageContext);\r\n\r\n  return (\r\n    <>\r\n      <Navbar color=\"dark\" />\r\n      <div style={bodyStyle}>\r\n        <h1 className=\"font-heading-black privacy-policy-heading\">\r\n          {localStorage.getItem(\"locale\") == \"du\"\r\n            ? \"Privacyverklaring– Real Challenge\"\r\n            : t(\"privacypolicy.heading\")}\r\n        </h1>\r\n\r\n        <Card style={{ height: \"650px\" }}>\r\n          {localStorage.getItem(\"locale\") === \"du\" ? (\r\n            <FileViewer\r\n              fileType={type}\r\n              filePath={PrivacyPolicyDocumentDutch}\r\n              // errorComponent={CustomErrorComponent}\r\n              onError={onError}\r\n            />\r\n          ) : (\r\n            <FileViewer\r\n              fileType={type}\r\n              filePath={PrivacyPolicyDocument}\r\n              // errorComponent={CustomErrorComponent}\r\n              onError={onError}\r\n            />\r\n          )}\r\n        </Card>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PrivacyPolicy;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\customer.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\AllProducts.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\FaqManager\\UpdateFaq.js",["707","708","709"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Select, Modal, List, Checkbox } from \"antd\";\r\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\r\nimport { createPost } from \"../../../services/posts\";\r\nimport {\r\n  createFaqCategory,\r\n  getAllFaqCategories,\r\n  removeFaqCategory,\r\n  updateFaq,\r\n} from \"../../../services/faqs\";\r\nimport EditTypeName from \"./EditTypeName\";\r\nconst { Option } = Select;\r\n\r\nfunction UpdateFaq({ visible, setVisible, selectedFaq, getAllFaqs }) {\r\n  const [form] = Form.useForm();\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryModal, setCategoryModal] = useState(false);\r\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n  const [allCategories, setAllCategories] = useState([]);\r\n  const [isPublic, setIsPublic] = useState(true);\r\n\r\n  // update stuff\r\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\r\n    useState(false);\r\n\r\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\r\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\r\n    useState(\"\");\r\n\r\n  const fetchData = async () => {\r\n    const aC = await getAllFaqCategories();\r\n    // console.log(aC);\r\n    if (aC) {\r\n      setAllCategories(aC.categories);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n\r\n    form.setFieldsValue({\r\n      question: selectedFaq.question,\r\n      answer: selectedFaq.answer,\r\n      isPublic: selectedFaq.isPublic,\r\n      category: selectedFaq.category,\r\n    });\r\n\r\n    setIsPublic(selectedFaq.isPublic);\r\n    selectedFaq.category && setCategory(selectedFaq.category);\r\n  }, []);\r\n\r\n  const removeCategory = async (id) => {\r\n    await removeFaqCategory(id);\r\n    fetchData();\r\n  };\r\n  const onFinish = async (values) => {\r\n    const data = {\r\n      ...values,\r\n      category,\r\n      isPublic,\r\n    };\r\n    console.log(data);\r\n    await updateFaq(data, selectedFaq._id);\r\n    getAllFaqs();\r\n    setVisible(false);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/*  */}\r\n      <EditTypeName\r\n        editItemNameModalVisible={editItemNameModalVisible}\r\n        setEditItemModelVisible={setEditItemNameModalVisible}\r\n        fethData={fetchData}\r\n        selectedItemForUpdate={selectedItemForUpdate}\r\n        titleName={selectedItemForUpdateTitle}\r\n      />\r\n      {/* modal to create a new goal */}\r\n      <Modal\r\n        onCancel={() => setCategoryModal(false)}\r\n        footer={false}\r\n        visible={categoryModal}\r\n      >\r\n        <p className=\"font-paragraph-white\">Categories</p>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Input\r\n            value={newCategoryName}\r\n            onChange={(e) => setNewCategoryName(e.target.value)}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            style={{\r\n              backgroundColor: \"var(--color-orange)\",\r\n              borderColor: \"var(--color-orange)\",\r\n              marginLeft: \"5px\",\r\n            }}\r\n            onClick={async () => {\r\n              if (newCategoryName.length > 0) {\r\n                await createFaqCategory(newCategoryName);\r\n                // setShowGoalModal(false);\r\n                fetchData();\r\n              }\r\n            }}\r\n          >\r\n            Create Category\r\n          </Button>\r\n        </div>\r\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\r\n          <span className=\"font-subheading-white\">All Categories</span>\r\n          <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={allCategories}\r\n            renderItem={(cat) => (\r\n              <List.Item\r\n                style={{\r\n                  backgroundColor: \"#fff\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n                key={cat._id}\r\n              >\r\n                <span>{cat.name}</span>\r\n\r\n                <span>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      removeCategory(cat._id);\r\n                    }}\r\n                    style={{ marginRight: \"10px\" }}\r\n                    type=\"primary\"\r\n                    danger\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => {\r\n                      setSelectedItemForUpdateTitle(\"Update Faq Category\");\r\n                      setSelectedItemForUpdate(cat);\r\n                      setEditItemNameModalVisible(true);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </span>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        visible={visible}\r\n        onCancel={() => setVisible(false)}\r\n        footer={false}\r\n        width=\"70%\"\r\n      >\r\n        <h2 className=\"font-heading-white\">Update FAQ</h2>\r\n        <div\r\n          className=\"admin-newuser-container\"\r\n          style={{ padding: \"50px 50px 50px 20px\" }}\r\n        >\r\n          <Form\r\n            layout=\"vertical\"\r\n            name=\"basic\"\r\n            form={form}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n          >\r\n            <Form.Item\r\n              label=\"Question\"\r\n              name=\"question\"\r\n              rules={[{ required: true, message: \"Please input question!\" }]}\r\n            >\r\n              <Input.TextArea rows={3} />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Answer\"\r\n              name=\"answer\"\r\n              rules={[{ required: true, message: \"Please input answer!\" }]}\r\n            >\r\n              <Input.TextArea rows={6} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Category\" name=\"category\">\r\n              <Select\r\n                mode=\"multiple\"\r\n                allowClear\r\n                style={{ width: \"100%\" }}\r\n                placeholder=\"Please select\"\r\n                value={category}\r\n                onChange={(e) => setCategory(e)}\r\n              >\r\n                {allCategories.map((cat) => (\r\n                  <Option value={cat._id} key={cat._id}>\r\n                    {cat.name}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n              <Button\r\n                style={{\r\n                  backgroundColor: \"var(--color-orange)\",\r\n                  border: \"none\",\r\n                  color: \"white\",\r\n                  float: \"right\",\r\n                  marginTop: \"5px\",\r\n                }}\r\n                onClick={() => setCategoryModal(true)}\r\n              >\r\n                Manage Category\r\n              </Button>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Checkbox\r\n                checked={isPublic}\r\n                onChange={(e) => setIsPublic(e.target.checked)}\r\n              >\r\n                Make public\r\n              </Checkbox>\r\n            </Form.Item>\r\n            {/* footer */}\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                style={{\r\n                  backgroundColor: \"var(--color-orange)\",\r\n                  borderColor: \"var(--color-orange)\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateFaq;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\ReplaceFreeChallengePopup.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\FullScreenPlayerVideosBrowser.js",["710"],"import React, { useContext } from \"react\";\r\nimport \"../../assets/FullScreenPlayerVideoBrowser.css\";\r\nimport {\r\n  playerFullscreenContext,\r\n  playerStateContext,\r\n} from \"../../contexts/PlayerState\";\r\nimport PlayerVideoBrowser from \"./PlayerVideoBrowser\";\r\n\r\nfunction FullScreenPlayerVideosBrowser({\r\n  showVideos,\r\n  workout,\r\n  setExerciseForHelpModal,\r\n  setOpenHelpModal,\r\n  setCurrentExercise,\r\n  currentExercise,\r\n}) {\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [fullscreen, setFullscreen] = useContext(playerFullscreenContext);\r\n  return showVideos ? (\r\n    <div className=\"fspvb-container\">\r\n      {/* <h1 style={{ color: \"white\" }}>fAGGOT</h1> */}\r\n      <PlayerVideoBrowser\r\n        fullscreen={fullscreen}\r\n        workout={workout}\r\n        playerState={playerState}\r\n        setPlayerState={setPlayerState}\r\n        setExerciseForHelpModal={setExerciseForHelpModal}\r\n        setOpenHelpModal={setOpenHelpModal}\r\n        setCurrentExercise={setCurrentExercise}\r\n        currentExercise={currentExercise}\r\n        fromFullScreen={true}\r\n      />\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n\r\nexport default FullScreenPlayerVideosBrowser;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MembershipManager\\AllMemberships.js",["711"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Tag, Table, Space, Input } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\nfunction AllMemberships() {\r\n  const [filterAllMemberships, setFilterAllMemberships] = useState([]);\r\n  const [allMemberships, setAllMemberships] = useState([\r\n    {\r\n      id: \"10\",\r\n      membershipTitle: \"Challenge One\",\r\n      price: 30,\r\n      time: 1,\r\n      // in months\r\n      createdAt: new Date(),\r\n    },\r\n\r\n    {\r\n      id: \"12\",\r\n      membershipTitle: \"Challenge Three\",\r\n      price: 78,\r\n      time: 3,\r\n      // in months\r\n      createdAt: new Date(),\r\n    },\r\n    {\r\n      id: \"15\",\r\n      membershipTitle: \"Challenge Twelve\",\r\n      price: 234,\r\n      time: 12,\r\n      // in months\r\n      createdAt: new Date(),\r\n    },\r\n    {\r\n      id: \"18\",\r\n      membershipTitle: \"Free\",\r\n      price: 0,\r\n      time: 0,\r\n      // in months\r\n      createdAt: new Date(),\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setFilterAllMemberships(allMemberships);\r\n  }, [allMemberships]);\r\n  const columns = [\r\n    {\r\n      title: \"Id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Membership Name\",\r\n      dataIndex: \"membershipTitle\",\r\n      key: \"membershipTitle\",\r\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      dataIndex: \"price\",\r\n      key: \"price\",\r\n      render: (text) => <span className=\"font-paragraph-black\">€ {text}</span>,\r\n    },\r\n    {\r\n      title: \"Time\",\r\n      dataIndex: \"time\",\r\n      key: \"time\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">{text} months</span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Updated At\",\r\n      dataIndex: \"createdAt\",\r\n      key: \"createdAt\",\r\n      render: (text) => (\r\n        <span className=\"font-paragraph-black\">\r\n          {moment(text).format(\"DD/MM/YYYY\")}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"challengePreviewLink\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"primary\">Preview</Button>\r\n          <Button type=\"primary\">Edit</Button>\r\n          <Button type=\"danger\">Delete</Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <h2 className=\"font-heading-black\">All Membership</h2>\r\n      <div className=\"admin-allchallenges-list-container\">\r\n        <Input\r\n          placeholder=\"Search Membership By Title\"\r\n          onChange={(e) =>\r\n            setAllMemberships(\r\n              allMemberships.filter((mem) =>\r\n                mem.membershipTitle\r\n                  .toUpperCase()\r\n                  .includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n\r\n        <Input\r\n          style={{ marginTop: \"10px\" }}\r\n          placeholder=\"Search Membership By ID\"\r\n          onChange={(e) =>\r\n            setAllMemberships(\r\n              allMemberships.filter((mem) =>\r\n                mem.id.toUpperCase().includes(e.target.value.toUpperCase())\r\n              )\r\n            )\r\n          }\r\n        />\r\n        <Table columns={columns} dataSource={filterAllMemberships} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllMemberships;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\AllPosts.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\AllChallenges.js",["712","713","714","715","716"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ForgotPassword.js",["717"],"import React, { useState } from \"react\";\r\nimport { Input, Form, Button } from \"antd\";\r\n\r\nimport \"../assets/login.css\";\r\nimport \"../assets/home.css\";\r\nimport Logo from \"../images/logo.png\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { resetPassword } from \"../services/authentication\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nfunction ForgotPassword() {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const [t] = useTranslation();\r\n\r\n  const onFinish = async (values) => {\r\n    setLoading(true);\r\n    const res = await resetPassword(values.email);\r\n    setLoading(false);\r\n    console.log(res);\r\n    console.log(values);\r\n  };\r\n\r\n  const onFinishFailed = (error) => {\r\n    console.log(error);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"login-container\">\r\n        <div className=\"login-container-column1\">\r\n          <img className=\"login-logo\" src={Logo} alt=\"logo\" />\r\n          <h1 className=\"font-heading-white\">{t(\"forgot_password.reset\")}</h1>\r\n          <Form\r\n            // form={form}\r\n            name=\"register\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            layout=\"vertical\"\r\n          >\r\n            <div className=\"login-textfield-box\">\r\n              <Form.Item\r\n                name=\"email\"\r\n                label={<span className=\"font-paragraph-white\">E-mail</span>}\r\n                rules={[\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"The input is not valid E-mail!\",\r\n                  },\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your E-mail!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n            </div>\r\n            {loading ? (\r\n              <LoadingOutlined style={{ fontSize: \"30px\", color: \"#ff7700\" }} />\r\n            ) : (\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                style={{\r\n                  backgroundColor: \"#ff7700\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                {t(\"forgot_password.rp\")}\r\n              </Button>\r\n            )}\r\n          </Form>\r\n        </div>\r\n\r\n        <div className=\"login-container-column2\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForgotPassword;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\authentication.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\PackageSelector.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\NewPost.js",["718"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\shop.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\TrainerProfile.js",["719","720"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../assets/trainerprofile.css\";\r\nimport \"../assets/home.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport ModalVideo from \"react-modal-video\";\r\nimport \"react-modal-video/scss/modal-video.scss\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\r\nimport { addCommentToTrainer, getTrainerById } from \"../services/trainers\";\r\nimport QuoteIcon from \"../assets/icons/quote-icon.png\";\r\nimport ChallengeProfileSubtract from \"../assets/icons/challenge-profile-subtract.svg\";\r\nimport { Avatar, Input } from \"antd\";\r\nimport moment from \"moment\";\r\nimport StarFilled from \"../assets/icons/star-orange.svg\";\r\nimport StartTransparent from \"../assets/icons/star-transparent.svg\";\r\nimport slug from 'elegant-slug';\r\nimport {Helmet} from \"react-helmet\"\r\n\r\nfunction TrainerProfile(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const [t] = useTranslation();\r\n  // eslint-disable-next-line\r\n  const [challenges, setChallenges] = useState([]);\r\n  const [filterChallenges, setFilterChallenges] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [trainer, setTrainer] = useState({});\r\n  const [calculatedRating, setCalculatedRating] = useState(0);\r\n  // comments\r\n  const [allComments, setAllComments] = useState([]);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const [commentButtonLoading, setCommentButtonLoading] = useState(false);\r\n\r\n  async function fetchData() {\r\n    setLoading(true);\r\n    const id = props.match.params.id;\r\n    const res = await getTrainerById(id);\r\n    const c = res.challenges.filter((g) => g.rating > 0);\r\n    console.log(res);\r\n\r\n    var overR = 0;\r\n    for (var i = 0; i < c.length; i++) {\r\n      overR += c[i].rating;\r\n    }\r\n    setCalculatedRating(overR / c.length);\r\n    setTrainer(res.trainer);\r\n    setChallenges(res.challenges);\r\n    setFilterChallenges(res.challenges);\r\n    setAllComments(res.trainer.comments);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const postCommentToBackend = async () => {\r\n    setCommentButtonLoading(true);\r\n    const res = await addCommentToTrainer(trainer._id, commentText);\r\n\r\n    if (res) {\r\n      setAllComments(res.comments);\r\n    }\r\n    setCommentButtonLoading(false);\r\n    setCommentText(\"\");\r\n    // console.log(res);\r\n  };\r\n\r\n  return loading ? (\r\n    <div className=\"center-inpage\">\r\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\r\n    </div>\r\n  ) : (\r\n    <div>\r\n        <Helmet>\r\n        <title>{`Realchallenge: ${trainer.firstName}`}</title>\r\n        <meta name=\"description\" content={trainer.motto} />\r\n        <meta property=\"og:title\" content={trainer.name} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:description\" content={trainer.motto} />\r\n        <meta\r\n          property=\"og:url\"\r\n          content={`http://localhost:3001/trainer/${slug(trainer.firstName)}/${trainer._id}`}\r\n        />\r\n        <meta name=\"author\" content=\"Realchallenge\" />\r\n      </Helmet>\r\n      <Navbar />\r\n      {/* video modal */}\r\n      <ModalVideo\r\n        channel=\"custom\"\r\n        autoplay\r\n        isOpen={open}\r\n        controlsList=\"nodownload\"\r\n        videoId={`${process.env.REACT_APP_SERVER}/api${trainer.videoTrailerLink}`}\r\n        onClose={() => setOpen(false)}\r\n      />\r\n      <div className=\"trainer-profile-container\">\r\n        <div\r\n          className=\"trainer-profile-container-column1\"\r\n          style={{\r\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${\r\n              process.env.REACT_APP_SERVER\r\n            }/api${trainer.heroBanner ? trainer.heroBanner : \"\"})`,\r\n            backgroundSize: \"cover\",\r\n            backgroundPosition: \"10% 10%\",\r\n          }}\r\n        >\r\n          {console.log(\r\n            `${process.env.REACT_APP_SERVER}/api${trainer.heroBanner}`\r\n          )}\r\n          <div className=\"profile-box\">\r\n            <div className=\"profile-box-row1\">\r\n              <div className=\"profile-box-row1-avatar\">\r\n                <img\r\n                  src={`${process.env.REACT_APP_SERVER}/api${trainer.avatarLink}`}\r\n                  alt=\"trainer-profile\"\r\n                />\r\n              </div>\r\n              <div className=\"profile-box-row1-information\">\r\n                <h2\r\n                  className=\"font-heading-white\"\r\n                  style={{ margin: \"0\", padding: \"0\" }}\r\n                >\r\n                  {trainer.firstName ? trainer.firstName : \"\"}{\" \"}\r\n                  {trainer.lastName ? trainer.lastName : \"\"}\r\n                </h2>\r\n\r\n                <div style={{ paddingTop: \"20px\" }}>\r\n                  <p\r\n                    className=\"font-paragraph-white\"\r\n                    style={{ margin: \"0\", padding: \"0\" }}\r\n                  >\r\n                    {trainer.country ? trainer.country : \"\"}\r\n                  </p>\r\n                  {new Array(calculatedRating).fill(0).map(() => (\r\n                    <img\r\n                      src={StarFilled}\r\n                      alt=\"\"\r\n                      style={{ height: \"20px\", margin: \"2px\" }}\r\n                    />\r\n                  ))}\r\n                  {new Array(calculatedRating ? 5 - calculatedRating : 5)\r\n                    .fill(0)\r\n                    .map(() => (\r\n                      <img\r\n                        src={StartTransparent}\r\n                        alt=\"\"\r\n                        style={{ height: \"20px\", margin: \"2px\" }}\r\n                      />\r\n                    ))}\r\n                </div>\r\n                <div>\r\n                  {/* {new Array(trainer.rating).fill(0).map((e) => (\r\n                    <StarOutlined\r\n                      style={{ color: \"#ff7700\", textTransform: \"uppercase\" }}\r\n                      className=\"challenge-carousel-body-textbox-icons\"\r\n                    />\r\n                  ))} */}\r\n                </div>\r\n              </div>\r\n              <div className=\"profile-box-row1-playericon\">\r\n                <img\r\n                  src={ChallengeProfileSubtract}\r\n                  onClick={() => setOpen(true)}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"profile-box-row2\">\r\n              <div className=\"profile-box-row2-quote font-paragraph-white\">\r\n                <img src={QuoteIcon} alt=\"\" />\r\n                <span style={{ marginLeft: \"10px\" }}>\r\n                  {trainer.motto ? trainer.motto : \"\"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"trainer-profile-container-column2\">\r\n          <div className=\"trainer-profile-goals\">\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\r\n            >\r\n              Fitness Interests\r\n            </div>\r\n            <div className=\"trainer-profile-goals-container\">\r\n              {/* TODO */}\r\n              {trainer.trainersFitnessInterest\r\n                ? trainer.trainersFitnessInterest.map((goal) => (\r\n                    <div\r\n                      className=\"trainer-profile-goal font-paragraph-white\"\r\n                      key={goal._id}\r\n                    >\r\n                      {goal.name}\r\n                    </div>\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"trainer-profile-aboutme\">\r\n            <div\r\n              className=\"trainer-profile-aboutme-heading font-paragraph-white\"\r\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"trainer_profile.about_me\")}\r\n            </div>\r\n            <div className=\"trainer-profile-aboutme-container font-paragraph-white\">\r\n              {trainer.bio ? trainer.bio : \"\"}\r\n            </div>\r\n          </div>\r\n          <div className=\"trainer-profile-challenges\">\r\n            <div\r\n              className=\"trainer-profile-challenges-heading font-paragraph-white\"\r\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"trainer_profile.challenges\")}\r\n            </div>\r\n            <div className=\"trainer-profile-challenges-container\">\r\n              <Input\r\n                style={{\r\n                  margin: \"10px\",\r\n                  backgroundColor: \"#262D36\",\r\n                  color: \"#fff\",\r\n                }}\r\n                onChange={(e) => {\r\n                  const g = challenges.filter((c) =>\r\n                    c.challengeName\r\n                      .toLowerCase()\r\n                      .includes(e.target.value.toLowerCase())\r\n                  );\r\n                  setFilterChallenges(g);\r\n                }}\r\n                placeholder=\"Search challenge\"\r\n              />\r\n              {/* TODO  */}\r\n              {filterChallenges.map((challenge) => (\r\n                <Link to={`/challenge/${slug(challenge.challengeName)}/${challenge._id}`} key={challenge._id}>\r\n                  <ChallengeCard\r\n                    picture={`${process.env.REACT_APP_SERVER}/api${challenge.thumbnailLink}`}\r\n                    name={challenge.challengeName}\r\n                    rating={challenge.rating}\r\n                  />\r\n                </Link>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"trainer-profile-goals\"\r\n            style={{ borderBottom: \"1px solid transparent\" }}\r\n          >\r\n            <div\r\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\r\n              style={{\r\n                color: \"#72777B\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {t(\"challenge_profile.comments\")}\r\n            </div>\r\n            {allComments.map((c) => (\r\n              <div className=\"comment-container\">\r\n                <div className=\"comment-container-c1 font-paragraph-white\">\r\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\r\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\r\n                  <div className=\"comment-container-c2 font-paragraph-white\">\r\n                    {c.text}\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"font-paragraph-white comment-container-c3\"\r\n                  style={{ color: \"#82868b\" }}\r\n                >\r\n                  {moment(c.createdAt).format(\"MMM, Do YY\")}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {localStorage.getItem(\"jwtToken\") && (\r\n              <>\r\n                <div\r\n                  className=\"trainer-profile-goals-container\"\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <Input.TextArea\r\n                    rows={4}\r\n                    value={commentText}\r\n                    onChange={(e) => setCommentText(e.target.value)}\r\n                  />\r\n                </div>\r\n                {commentButtonLoading ? (\r\n                  <LoadingOutlined\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      fontSize: \"30px\",\r\n                      marginTop: \"10px\",\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <button\r\n                    className=\"common-transparent-button font-paragraph-white\"\r\n                    onClick={postCommentToBackend}\r\n                    style={{\r\n                      color: \"#ff7700\",\r\n                      borderColor: \"#ff7700\",\r\n                      marginTop: \"10px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    POST COMMENT\r\n                  </button>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(TrainerProfile);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\helpers\\setAuthToken.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\PostsManager\\UpdatePost.js",["721","722"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Select, Modal } from \"antd\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { createPost } from \"../../../services/posts\";\r\n\r\nfunction UpdatePost({ postInfo, show, setShow, onUpdateComplete }) {\r\n  const [form] = Form.useForm();\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  const [type, setType] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      name: postInfo.title,\r\n      description: postInfo.text,\r\n      category: postInfo.type,\r\n    });\r\n    setType(postInfo.type);\r\n    setImage({ name: postInfo.image, link: postInfo.image });\r\n  }, []);\r\n\r\n  const onFinish = async (values) => {\r\n    if (type && image) {\r\n      const data = {\r\n        id: postInfo._id,\r\n        title: values.name,\r\n        text: values.description,\r\n        image: typeof image === \"object\" ? image.link : \"\",\r\n        type: type,\r\n      };\r\n      onUpdateComplete(data);\r\n    } else {\r\n      window.alert(\"All values are requeired to create a post\");\r\n    }\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      width=\"60%\"\r\n      visible={show}\r\n      footer={false}\r\n      onCancel={() => setShow(false)}\r\n      onOk={onUpdateComplete}\r\n    >\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      <h2 className=\"font-heading-white\">Update Post</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Post Title\"\r\n            name=\"name\"\r\n            rules={[{ required: true, message: \"Please input post title!\" }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Post Description\"\r\n            name=\"description\"\r\n            rules={[\r\n              { required: true, message: \"Please input post description!\" },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Post Image\" name=\"image\">\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"images\");\r\n                setMediaManagerActions([image, setImage]);\r\n              }}\r\n            >\r\n              Upload Image\r\n            </Button>\r\n            <div\r\n              className=\"font-paragraph-white\"\r\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\r\n            >\r\n              {image && (\r\n                <img\r\n                  src={`${process.env.REACT_APP_SERVER}/api${image.link}`}\r\n                  alt=\"\"\r\n                  height=\"100px\"\r\n                />\r\n              )}\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item label=\"Post Category\" name=\"category\" required={true}>\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              value={type}\r\n              placeholder=\"Please select\"\r\n              onChange={(e) => setType(e)}\r\n            >\r\n              {[\"Challenge\", \"Magazine\", \"Recipe\", \"News Updates\"].map(\r\n                (e, i) => (\r\n                  <Select.Option key={i + 1} value={e}>\r\n                    {e}\r\n                  </Select.Option>\r\n                )\r\n              )}\r\n            </Select>\r\n          </Form.Item>\r\n          {/* footer */}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default UpdatePost;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Common\\ReviewsModal.js",["723","724"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { Input, Button, Rate } from \"antd\";\r\n// import { addNewComment } from \"../../services/posts\";\r\nimport Modal from \"react-modal\";\r\nimport \"../../assets/challengeReviewModal.css\";\r\nimport moment from \"moment\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\nimport TopIcon from \"../../assets/icons/review-challenge-header-icon.svg\";\r\nimport BackIcon from \"../../assets/icons/review-challenge-icon.svg\";\r\nimport { addRecipeReview } from \"../../services/recipes\";\r\nimport { userInfoContext } from \"../../contexts/UserStore\";\r\n\r\nfunction ReviewsModal({ item, visible, setVisible, type, fetchData }) {\r\n  const [alreadyReviewd, setAlreadyReviewd] = useState(false);\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [newReview, setNewReview] = useState({ text: \"\", rating: 1 });\r\n  const [allReviews, setAllReviews] = useState([]);\r\n  const { width } = useWindowDimensions();\r\n  const customStyles = {\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      width: width < 700 ? \"90%\" : \"60%\",\r\n      overflow: \"hidden\",\r\n      // height:\"600px\"\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(item);\r\n    setAllReviews(item.reviews);\r\n    const g =\r\n      item.reviews && item.reviews.filter((f) => f.user._id === userInfo.id);\r\n    if (g && g.length > 0) {\r\n      setAlreadyReviewd(true);\r\n    } else {\r\n      setAlreadyReviewd(false);\r\n    }\r\n    //   setAllComments(post.comments ? post.comments : []);\r\n  }, [item]);\r\n\r\n  const addReview = async () => {\r\n    if (newReview.text.length > 0) {\r\n      if (type === \"recipes\") {\r\n        const n = await addRecipeReview(\r\n          item._id,\r\n          newReview.text,\r\n          newReview.rating\r\n        );\r\n        setVisible(false);\r\n        fetchData();\r\n        console.log(n);\r\n      }\r\n      // const n = await addNewComment(post._id, { text: newComment });\r\n      console.log(newReview);\r\n      // setAllComments(n);\r\n      // setNewComment(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={visible}\r\n      onRequestClose={() => {\r\n        setVisible(false);\r\n      }}\r\n      style={customStyles}\r\n      contentLabel=\"Comments\"\r\n    >\r\n      <div className=\"challenge-review-modal-header\">\r\n        <span>\r\n          <img src={TopIcon} alt=\"\" />\r\n          <span className=\"font-paragraph-white\" style={{ marginLeft: \"10px\" }}>\r\n            REVIEWS\r\n          </span>\r\n        </span>\r\n        <CloseOutlined\r\n          style={{ color: \"#fff\", fontSize: \"26px\", cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            setVisible(false);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"challenge-review-modal\">\r\n        <Scrollbars style={{ height: \"300px\" }}>\r\n          {allReviews.length > 0 ? (\r\n            allReviews.map((review) => (\r\n              // <div className=\"challenge-profile-comment font-paragraph-white\">\r\n              //   <span className=\"challenge-profile-comment-username\">\r\n              //     <UserOutlined /> {comment.username}\r\n              //   </span>\r\n              //   <span>{comment.text}</span>\r\n              // </div>\r\n              <div\r\n                className=\"comment-container\"\r\n                style={{ marginBottom: width < 700 ? \"20px\" : \"10px\" }}\r\n              >\r\n                <div\r\n                  className=\"comment-container-c1 font-paragraph-white\"\r\n                  style={{\r\n                    alignItems: \"flex-start\",\r\n                    flexDirection: width < 700 ? \"column\" : \"row\",\r\n                  }}\r\n                >\r\n                  <span>\r\n                    <Avatar src={review.user.avatarLink} shape=\"square\" />{\" \"}\r\n                    <p\r\n                      style={{\r\n                        marginLeft: \"5px\",\r\n                        fontWeight: \"bolder\",\r\n                        fontSize: \"16px\",\r\n                        marginTop: \"0\",\r\n                        // border: \"2px solid red\",\r\n                        width: \"140px\",\r\n                        display: \"inline-block\",\r\n                      }}\r\n                    >\r\n                      {review.user.username}\r\n                    </p>\r\n                  </span>\r\n                  <div\r\n                    style={{\r\n                      paddingLeft: width < 700 ? \"0\" : \"20px\",\r\n                    }}\r\n                  >\r\n                    <Rate value={review.rating} disabled={true} />\r\n                    <div\r\n                      className=\"comment-container-c2 font-paragraph-white\"\r\n                      style={{\r\n                        padding: 0,\r\n                        fontWeight: \"200\",\r\n                        fontSize: \"14px\",\r\n                      }}\r\n                    >\r\n                      {review.comment}\r\n                    </div>\r\n                    <div\r\n                      className=\"font-paragraph-white comment-container-c3\"\r\n                      style={{ color: \"#82868b\", padding: 0 }}\r\n                    >\r\n                      {moment(review.createdAt).format(\"MMM, Do YY\")}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <img\r\n              src={BackIcon}\r\n              alt=\"\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                transform: \"translate(-50%, -50%)\",\r\n              }}\r\n            />\r\n          )}\r\n        </Scrollbars>\r\n        {localStorage.getItem(\"jwtToken\") ? (\r\n          !alreadyReviewd ? (\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Avatar\r\n                  src={`${process.env.REACT_APP_SERVER}/${userInfo.avatar}`}\r\n                  shape=\"square\"\r\n                  style={{ marginRight: \"10px\" }}\r\n                />\r\n                <span style={{ width: \"100%\" }}>\r\n                  <Rate\r\n                    style={{ marginBottom: \"10px\" }}\r\n                    onChange={(e) =>\r\n                      setNewReview((prevalue) => ({ ...prevalue, rating: e }))\r\n                    }\r\n                    value={newReview.rating}\r\n                  />\r\n\r\n                  <Input.TextArea\r\n                    rows=\"3\"\r\n                    placeholder=\"Write your review here\"\r\n                    value={newReview.text}\r\n                    onChange={(e) =>\r\n                      setNewReview((preValue) => ({\r\n                        ...preValue,\r\n                        text: e.target.value,\r\n                      }))\r\n                    }\r\n                  />\r\n                </span>\r\n              </span>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                  margin: \"10px\",\r\n                }}\r\n              >\r\n                <Button\r\n                  className=\"font-paragraph-white\"\r\n                  style={{\r\n                    padding: \"3px 20px\",\r\n                    color: \"#fff\",\r\n                    backgroundColor: \"transparent\",\r\n                    border: \"2px solid #ff7700\",\r\n                  }}\r\n                  onClick={() => {\r\n                    setVisible(false);\r\n                  }}\r\n                >\r\n                  Close\r\n                </Button>\r\n                <Button\r\n                  className=\"common-orange-button font-paragraph-white\"\r\n                  style={{ padding: \"3px 10px\" }}\r\n                  onClick={() => addReview()}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <p className=\"font-paragraph-white\">{\"Already Reviewed\"}</p>\r\n          )\r\n        ) : (\r\n          <p className=\"font-paragraph-white\">\r\n            Please signup or login to review\r\n          </p>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ReviewsModal;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\contexts\\PlayerState.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\CookiePolicy.js",["725","726","727","728"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\NewWelcome.js",["729","730"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"../assets/newWelcome.css\";\r\nimport { RightOutlined, CheckOutlined, EuroOutlined } from \"@ant-design/icons\";\r\n\r\nimport { withRouter, Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport VerifyUser from \"../components/UserDashboard/VerifyUser\";\r\nimport { userInfoContext } from \"../contexts/UserStore\";\r\nimport { selectedChallengeContext } from \"../contexts/PaymentProcessStore\";\r\nimport { addFreeChallenge } from \"../services/createChallenge/main\";\r\n\r\nfunction NewWelcome(props) {\r\n  const [t] = useTranslation();\r\n  const history = useHistory();\r\n  const userInfo = useContext(userInfoContext)[0];\r\n  const selectedChallenge = useContext(selectedChallengeContext)[0];\r\n  const [choosePlan, setChoosenPlan] = useState(\"CHALLENGE_12\");\r\n\r\n  useEffect(() => {\r\n    if (!props.onPricingPage) {\r\n      if (!localStorage.getItem(\"jwtToken\")) {\r\n        props.history.push(\"/login\");\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const checkStyle = {\r\n    color: \"#ff7700\",\r\n    fontSize: \"2.5rem\",\r\n    paddingRight: \"0.5rem\",\r\n  };\r\n\r\n  const addFreeChallengeToDashboard = async () => {\r\n    console.log(selectedChallenge, userInfo);\r\n    if (selectedChallenge && selectedChallenge.access?.includes(\"FREE\")) {\r\n      await addFreeChallenge(selectedChallenge);\r\n      history.push(\"/user/dashboard\");\r\n      // console.log(\"is free\");\r\n    } else {\r\n      // console.log(\"no free\");\r\n      history.push(\"/user/dashboard\");\r\n    }\r\n    // async () => {\r\n    //   const res = await addChallengeToCustomerDetail(userInfo._id, selectedChallenge._id);\r\n    //   if(res){\r\n    //     history.push(\"/user/dashboard\")\r\n    //   }\r\n  };\r\n  const onChoosePlan = () => {\r\n    console.log(\"here\", choosePlan);\r\n    localStorage.setItem(\"package-type\", choosePlan);\r\n    if (localStorage.getItem(\"jwtToken\")) {\r\n      if (choosePlan === \"CHALLENGE_1\") {\r\n        props.history.push(\"/all-challenges\");\r\n      } else {\r\n        props.history.push(\"/create-payment\");\r\n      }\r\n    } else {\r\n      props.history.push(\"/new\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {props.onPricingPage ? \"\" : <VerifyUser fromNewWelcomeScreen={true} />}\r\n      {props.onPricingPage ? (\r\n        \"\"\r\n      ) : (\r\n        <div\r\n          onClick={addFreeChallengeToDashboard}\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            color: \"var(--color-orange)\",\r\n            fontSize: \"20px\",\r\n            backgroundColor: \"var(--mirage)\",\r\n            padding: \"10px \",\r\n            float: \"right\",\r\n            margin: \"10px 50px 0 0\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          Skip <RightOutlined />\r\n        </div>\r\n      )}\r\n\r\n      <div\r\n        className=\"new-welcome-page\"\r\n        style={{ paddingTop: props.onPricingPage ? \"60px\" : \"10px\" }}\r\n      >\r\n        <div className=\"new-welcome-container\">\r\n          <h1\r\n            className=\"font-heading-white\"\r\n            style={{ fontSize: props.onPricingPage ? \"25px\" : \"\" }}\r\n          >\r\n            {props.onPricingPage ? t(\"pricing.great\") : \"Welcome\"}\r\n          </h1>\r\n          <h3\r\n            className=\"font-subheading-white\"\r\n            style={{ fontSize: props.onPricingPage ? \"18px\" : \"\" }}\r\n          >\r\n            {props.onPricingPage\r\n              ? t(\"pricing.p\")\r\n              : \"THANK YOU FOR JOINING REALCHALLENGE\"}\r\n          </h3>\r\n          <p className=\"font-paragraph-white\">Get Access To All Our Features</p>\r\n          <div className=\"new-welcome-cards\">\r\n            {/* first card */}\r\n            <div\r\n              className=\"new-welcome-card\"\r\n              onClick={() => setChoosenPlan(\"CHALLENGE_1\")}\r\n              style={{\r\n                border:\r\n                  choosePlan === \"CHALLENGE_1\"\r\n                    ? \"2px solid #f37720\"\r\n                    : \"2px solid #2a2f36\",\r\n              }}\r\n            >\r\n              <h2 className=\"font-paragraph-white\">\r\n                One-Time <br />\r\n                Challenge\r\n              </h2>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ fontWeight: \"600\", margin: \"10px\" }}\r\n              >\r\n                FROM <span style={{ fontSize: \"30px\" }}>€29</span> / CHALLENGE\r\n              </span>\r\n\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ color: \"#969696\", textAlign: \"left\" }}\r\n              >\r\n                Choose your challenge from our library\r\n              </span>\r\n              <ul\r\n                className=\"features\"\r\n                style={{ textAlign: \"left\", marginTop: \"20px\" }}\r\n              >\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">\r\n                    No subscription needed\r\n                  </span>\r\n                </li>\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">Billed once</span>\r\n                </li>\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">\r\n                    Unlock all features\r\n                  </span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            {/* second card */}\r\n            <div\r\n              className=\"new-welcome-card\"\r\n              onClick={() => setChoosenPlan(\"CHALLENGE_12\")}\r\n              style={{\r\n                border:\r\n                  choosePlan === \"CHALLENGE_12\"\r\n                    ? \"2px solid #f37720\"\r\n                    : \"2px solid #2a2f36\",\r\n              }}\r\n            >\r\n              <h2 className=\"font-paragraph-white\">Repeat & Save</h2>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{\r\n                  fontSize: \"13px\",\r\n                  backgroundColor: \"#f37720\",\r\n                  padding: \"5px\",\r\n                  width: \"120px\",\r\n                  fontWeight: \"600\",\r\n                  alignSelf: \"center\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n              >\r\n                Save up to 60%\r\n              </span>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ fontWeight: \"600\", margin: \"10px\" }}\r\n              >\r\n                <span style={{ fontSize: \"30px\" }}>€4.5</span> / WEEK\r\n              </span>\r\n\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ color: \"#969696\", textAlign: \"left\" }}\r\n              >\r\n                12 months plan\r\n              </span>\r\n              <ul\r\n                className=\"features\"\r\n                style={{ textAlign: \"left\", marginTop: \"20px\" }}\r\n              >\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">\r\n                    Unlock any challenge\r\n                  </span>\r\n                </li>\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">Billed monthly</span>\r\n                </li>\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">\r\n                    Menu tailored to your goals\r\n                  </span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            {/* third card */}\r\n            <div\r\n              className=\"new-welcome-card\"\r\n              onClick={() => setChoosenPlan(\"CHALLENGE_3\")}\r\n              style={{\r\n                border:\r\n                  choosePlan === \"CHALLENGE_3\"\r\n                    ? \"2px solid #f37720\"\r\n                    : \"2px solid #2a2f36\",\r\n              }}\r\n            >\r\n              <h2 className=\"font-paragraph-white\">Repeat & Save</h2>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{\r\n                  fontSize: \"13px\",\r\n                  backgroundColor: \"#f37720\",\r\n                  padding: \"5px\",\r\n                  width: \"120px\",\r\n                  fontWeight: \"600\",\r\n                  alignSelf: \"center\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n              >\r\n                Save up to 30%\r\n              </span>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ fontWeight: \"600\", margin: \"10px\" }}\r\n              >\r\n                <span style={{ fontSize: \"30px\" }}>€6</span> / WEEK\r\n              </span>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ color: \"#969696\", textAlign: \"left\" }}\r\n              >\r\n                3 months plan\r\n              </span>\r\n              <ul\r\n                className=\"features\"\r\n                style={{ textAlign: \"left\", marginTop: \"20px\" }}\r\n              >\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">\r\n                    Unlock any challenge\r\n                  </span>\r\n                </li>\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">Billed monthly</span>\r\n                </li>\r\n                <li>\r\n                  <CheckOutlined style={checkStyle} />\r\n                  <span className=\"font-paragraph-white\">\r\n                    Menu tailored to your goals\r\n                  </span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            {/* sadasd */}\r\n          </div>\r\n          <div\r\n            style={{\r\n              paddingBottom: \"20px\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <button\r\n              className=\"create-payment-check-out font-paragraph-white\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                cursor: \"pointer\",\r\n                width: \"80%\",\r\n              }}\r\n              onClick={onChoosePlan}\r\n            >\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ fontWeight: \"600\" }}\r\n              >\r\n                CHOOSE\r\n              </span>\r\n            </button>\r\n          </div>\r\n          {props.onPricingPage ? (\r\n            \"\"\r\n          ) : (\r\n            <div style={{ padding: \"20px 0\" }}>\r\n              <div\r\n                onClick={addFreeChallengeToDashboard}\r\n                // to=\r\n                className=\"font-paragraph-white\"\r\n                style={{\r\n                  fontSize: \"20px\",\r\n                  borderBottom: \"1px solid #fff\",\r\n                  textDecoration: \"none\",\r\n                  display: \"inline-block\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                Go to dashboard\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"money-back-guarantee font-paragraph-white\">\r\n          <EuroOutlined /> 7 days money back guarantee\r\n        </div>\r\n      </div>\r\n\r\n      {/* cards */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(NewWelcome);\r\n\r\n// <Link\r\n// to={{\r\n//   pathname: \"/create-payment\",\r\n// }}\r\n// onClick={() =>\r\n//   localStorage.setItem(\"package-type\", \"CHALLENGE_1\")\r\n// }\r\n// className=\"common-orange-button font-paragraph-white\"\r\n// style={{\r\n//   width: \"150px\",\r\n//   marginBottom: \"10px\",\r\n//   textAlign: \"center\",\r\n// }}\r\n// >\r\n// Select\r\n// </Link>\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\ChallengeProfile\\ChallengeProfileTab.js",["731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746"],"import Navbar from \"../Navbar\";\r\nimport \"./challengeProfileTab.css\";\r\n\r\nfunction ChallengeProfileTab(props) {\r\n  const {\r\n    overlapGroup,\r\n\r\n    overlapGroup7,\r\n    subtract,\r\n    challengeName,\r\n    address,\r\n    polygon11,\r\n    group9892,\r\n    gemiddeld,\r\n    kort,\r\n    text2,\r\n    stars,\r\n    trainers,\r\n    rectangle1876,\r\n    name,\r\n    goals,\r\n    conditionIcon,\r\n    conditie,\r\n    dumbellIcon,\r\n    kracht,\r\n    afvallen,\r\n    bodyFocus,\r\n    heelLichaam,\r\n    equipment,\r\n    kettlebell,\r\n    results,\r\n    text3,\r\n    info,\r\n    infoIcon3,\r\n    infoIcon4,\r\n    address2,\r\n    text4,\r\n    overlapGroup8,\r\n    week1,\r\n    foundation6Days,\r\n    polygon13,\r\n    overlapGroup72,\r\n    week2,\r\n    text5,\r\n    polygon132,\r\n    text6,\r\n    subscription,\r\n    helpIcon,\r\n    polygon14,\r\n    text7,\r\n    oneTimeChallenge,\r\n    price,\r\n    noSubscription,\r\n    billedOnce,\r\n    repeatSave,\r\n    spanText,\r\n    spanText2,\r\n    price2,\r\n    week,\r\n    address3,\r\n    billedMonthly,\r\n    repeatSave2,\r\n    spanText3,\r\n    spanText4,\r\n    price3,\r\n    week3,\r\n    address4,\r\n    billedMonthly2,\r\n    overlapGroup20,\r\n    startNow2,\r\n    comments,\r\n    rectangle1869,\r\n    rectangle1870,\r\n    name2,\r\n    apr082021,\r\n    filipWowILikeIt,\r\n    apr032021,\r\n    postComment,\r\n  } = props;\r\n\r\n  return (\r\n    <div style={{ background: \"#171e27\" }}>\r\n      <Navbar color=\"dark\" />\r\n\r\n      {/* <div class=\"container-center-horizontal\"> */}\r\n      <div className=\"tab-challenge-tablet-unauthorized-user screen\">\r\n        <div className=\"tab-flex-col\">\r\n          <div\r\n            className=\"tab-overlap-group\"\r\n            style={{ backgroundImage: `url(${overlapGroup})` }}\r\n          >\r\n            <div\r\n              className=\"tab-overlap-group7\"\r\n              style={{ backgroundImage: `url(${overlapGroup7})` }}\r\n            >\r\n              <img className=\"tab-subtract\" src={subtract} />\r\n              <div className=\"tab-overlap-group8\">\r\n                <div className=\"tab-group-9893\">\r\n                  <h1 className=\"tab-text-1 tab-valign-text-middle\">\r\n                    {challengeName}\r\n                  </h1>\r\n                  <div className=\"tab-overlap-group11\">\r\n                    <div className=\"tab-rectangle-1863\"></div>\r\n                  </div>\r\n                  <div className=\"tab-address tab-valign-text-middle poppins-medium-sandy-brown-14px\">\r\n                    {address}\r\n                  </div>\r\n                  <div className=\"tab-flex-row\">\r\n                    <div className=\"tab-overlap-group12\">\r\n                      <div className=\"tab-overlap-group13\">\r\n                        <img className=\"tab-polygon-11\" src={polygon11} />\r\n                        <img className=\"tab-group-9892\" src={group9892} />\r\n                      </div>\r\n                      <div className=\"tab-gemiddeld tab-valign-text-middle poppins-normal-white-16px\">\r\n                        {gemiddeld}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"tab-overlap-group10\">\r\n                      <div className=\"tab-kort tab-valign-text-middle poppins-normal-white-16px\">\r\n                        {kort}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <p className=\"tab-text-2 poppins-normal-white-16px\">\r\n                    {text2}\r\n                  </p>\r\n                </div>\r\n                <img className=\"tab-stars\" src={stars} />\r\n              </div>\r\n              <div className=\"tab-trainers poppins-light-sonic-silver-14px\">\r\n                {trainers}\r\n              </div>\r\n              <div className=\"tab-overlap-group9\">\r\n                <img className=\"tab-rectangle-1876\" src={rectangle1876} />\r\n                <div className=\"tab-name poppins-normal-crusta-17px\">\r\n                  {name}\r\n                </div>\r\n              </div>\r\n              <div className=\"tab-rectangle-1883\"></div>\r\n              <div className=\"tab-goals poppins-light-sonic-silver-14px\">\r\n                {goals}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"tab-flex-row-1\">\r\n            <div className=\"tab-overlap-group4\">\r\n              <img className=\"tab-condition-icon\" src={conditionIcon} />\r\n              <div className=\"tab-conditie tab-valign-text-middle poppins-light-white-14px\">\r\n                {conditie}\r\n              </div>\r\n            </div>\r\n            <div className=\"tab-overlap-group1\">\r\n              <img className=\"tab-dumbell-icon\" src={dumbellIcon} />\r\n              <div className=\"tab-kracht tab-valign-text-middle poppins-light-white-14px\">\r\n                {kracht}\r\n              </div>\r\n            </div>\r\n            <div className=\"tab-overlap-group2\">\r\n              <img className=\"tab-vector\" src=\"vector-3.svg\" />\r\n              <div className=\"tab-afvallen tab-valign-text-middle poppins-light-white-14px\">\r\n                {afvallen}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"tab-rectangle-1873\"></div>\r\n          <div className=\"tab-flex-col-item poppins-light-sonic-silver-14px\">\r\n            {bodyFocus}\r\n          </div>\r\n          <div className=\"tab-overlap-group5\">\r\n            <div className=\"tab-heel-lichaam tab-valign-text-middle poppins-light-white-14px\">\r\n              {heelLichaam}\r\n            </div>\r\n          </div>\r\n          <div className=\"tab-rectangle-187\"></div>\r\n          <div className=\"tab-flex-col-item poppins-light-sonic-silver-14px\">\r\n            {equipment}\r\n          </div>\r\n          <div className=\"tab-overlap-group6\">\r\n            <div className=\"tab-kettlebell tab-valign-text-middle poppins-light-white-14px\">\r\n              {kettlebell}\r\n            </div>\r\n          </div>\r\n          <div className=\"tab-rectangle-187\"></div>\r\n          <div className=\"tab-flex-col-item poppins-light-sonic-silver-14px\">\r\n            {results}\r\n          </div>\r\n          <div className=\"tab-overlap-group3\">\r\n            <div className=\"tab-rectangle-1882\"></div>\r\n            <p className=\"tab-text-3 poppins-light-white-14px\">{text3}</p>\r\n          </div>\r\n          <div className=\"tab-info poppins-light-sonic-silver-14px\">{info}</div>\r\n        </div>\r\n        <div className=\"tab-flex-row-2\">\r\n          <div className=\"tab-flex-col-1\">\r\n            <img className=\"tab-info-icon-3\" src={infoIcon3} />\r\n            <img className=\"tab-info-icon-4\" src={infoIcon4} />\r\n          </div>\r\n          <p className=\"tab-address-1 poppins-light-white-14px\">{address2}</p>\r\n        </div>\r\n        <div className=\"tab-flex-col-2\">\r\n          <div className=\"tab-rectangle-1874\"></div>\r\n          <div className=\"tab-your-personal-journey\">\r\n            <div className=\"tab-text-4 poppins-light-sonic-silver-14px\">\r\n              {text4}\r\n            </div>\r\n            <div className=\"tab-week-1\">\r\n              <div className=\"tab-overlap-group7-1\">\r\n                <div className=\"tab-flex-col-3\">\r\n                  <div\r\n                    className=\"tab-overlap-group8-1\"\r\n                    style={{ backgroundImage: `url(${overlapGroup8})` }}\r\n                  >\r\n                    <div className=\"tab-week-1-1 poppins-normal-white-14px\">\r\n                      {week1}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"tab-foundation-6-days poppins-light-white-16px\">\r\n                    {foundation6Days}\r\n                  </div>\r\n                </div>\r\n                <img className=\"tab-polygon-13\" src={polygon13} />\r\n              </div>\r\n            </div>\r\n            <div className=\"tab-week-2\">\r\n              <div className=\"tab-overlap-group9-1\">\r\n                <div className=\"tab-flex-row-3\">\r\n                  <div className=\"tab-flex-col-4\">\r\n                    <div\r\n                      className=\"tab-overlap-group7-2\"\r\n                      style={{ backgroundImage: `url(${overlapGroup72})` }}\r\n                    >\r\n                      <div className=\"tab-week-2-1 poppins-normal-white-14px\">\r\n                        {week2}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"tab-text-5 poppins-light-white-16px\">\r\n                      {text5}\r\n                    </div>\r\n                  </div>\r\n                  <img className=\"tab-polygon-13-1\" src={polygon132} />\r\n                </div>\r\n                <p className=\"tab-text-6 tab-valign-text-middle poppins-light-silver-15px\">\r\n                  {text6}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"tab-rectangle-1868\"></div>\r\n          </div>\r\n          <div className=\"tab-subscription\">\r\n            <div className=\"tab-flex-row-4\">\r\n              <div className=\"tab-subscription-1 poppins-light-sonic-silver-14px\">\r\n                {subscription}\r\n              </div>\r\n              <img className=\"tab-help-icon\" src={helpIcon} />\r\n              <img className=\"tab-polygon-14\" src={polygon14} />\r\n            </div>\r\n            <div className=\"tab-flex-col-5\">\r\n              <p className=\"tab-text-7 poppins-light-white-13px\">{text7}</p>\r\n              <div className=\"tab-flex-row-5\">\r\n                <div className=\"tab-overlap-group18\">\r\n                  <div className=\"tab-one-time-challenge poppins-medium-white-20px\">\r\n                    {oneTimeChallenge}\r\n                  </div>\r\n                  <div className=\"tab-price poppins-medium-white-28px\">\r\n                    {price}\r\n                  </div>\r\n                  <div className=\"tab-no-subscription poppins-light-white-14px\">\r\n                    {noSubscription}\r\n                  </div>\r\n                  <div className=\"tab-billed-once poppins-light-star-dust-10px\">\r\n                    {billedOnce}\r\n                  </div>\r\n                </div>\r\n                <div className=\"tab-overlap-group17 border-2px-tango\">\r\n                  <div className=\"tab-repeat-save poppins-medium-white-20px\">\r\n                    {repeatSave}\r\n                  </div>\r\n                  <div className=\"tab-overlap-group8-2\">\r\n                    <div className=\"tab-save-up-to poppins-medium-white-10px\">\r\n                      <span className=\"tab-poppins-medium-white-10px\">\r\n                        {spanText}\r\n                      </span>\r\n                      <span className=\"tab-span1 poppins-medium-white-16px\">\r\n                        {spanText2}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"tab-flex-row-6\">\r\n                    <div className=\"tab-price-1 poppins-medium-white-29px\">\r\n                      {price2}\r\n                    </div>\r\n                    <div className=\"tab-week poppins-light-white-10px\">\r\n                      {week}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"tab-address-2 poppins-light-white-14px\">\r\n                    {address3}\r\n                  </div>\r\n                  <div className=\"tab-billed-monthly poppins-light-star-dust-10px\">\r\n                    {billedMonthly}\r\n                  </div>\r\n                </div>\r\n                <div className=\"tab-overlap-group19\">\r\n                  <div className=\"tab-repeat-save-1 poppins-medium-white-21px\">\r\n                    {repeatSave2}\r\n                  </div>\r\n                  <div className=\"tab-overlap-group7-3\">\r\n                    <div className=\"tab-save-up-to poppins-medium-white-10px\">\r\n                      <span className=\"tab-poppins-medium-white-10px\">\r\n                        {spanText3}\r\n                      </span>\r\n                      <span className=\"tab-span1 poppins-medium-white-16px\">\r\n                        {spanText4}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"tab-flex-row-7\">\r\n                    <div className=\"tab-price-2 poppins-medium-white-29px\">\r\n                      {price3}\r\n                    </div>\r\n                    <div className=\"tab-week-3 poppins-light-white-10px\">\r\n                      {week3}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"tab-address-3 poppins-light-white-14px\">\r\n                    {address4}\r\n                  </div>\r\n                  <div className=\"tab-billed-monthly-1 poppins-light-star-dust-10px-2\">\r\n                    {billedMonthly2}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"tab-flex-col-6\">\r\n                <div\r\n                  className=\"tab-overlap-group20\"\r\n                  style={{ backgroundImage: `url(${overlapGroup20})` }}\r\n                >\r\n                  <div className=\"tab-start-now-1 poppins-medium-white-16px\">\r\n                    {startNow2}\r\n                  </div>\r\n                </div>\r\n                <div className=\"tab-rectangle-1869\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"tab-comments-group\">\r\n            <div className=\"tab-comments poppins-light-granite-gray-14px\">\r\n              {comments}\r\n            </div>\r\n            <div className=\"tab-flex-row-8\">\r\n              <div className=\"tab-flex-col-7\">\r\n                <img className=\"tab-rectangle-1869-1\" src={rectangle1869} />\r\n                <img className=\"tab-rectangle-1870\" src={rectangle1870} />\r\n              </div>\r\n              <div className=\"tab-flex-col-8\">\r\n                <p className=\"tab-name-1 poppins-light-white-16px\">{name2}</p>\r\n                <div className=\"tab-apr-08-2021 poppins-light-gunsmoke-11px\">\r\n                  {apr082021}\r\n                </div>\r\n                <p className=\"tab-filip-wow-i-like-it poppins-light-white-16px\">\r\n                  {filipWowILikeIt}\r\n                </p>\r\n                <div className=\"tab-apr-03-2021 poppins-light-gunsmoke-11px\">\r\n                  {apr032021}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"tab-flex-col-9\">\r\n              <div className=\"tab-rectangle-1838\"></div>\r\n              <div className=\"tab-overlap-group16\">\r\n                <div className=\"tab-post-comment poppins-normal-tango-16px\">\r\n                  {postComment}\r\n                </div>\r\n                <div className=\"tab-rectangle-1839 border-1px-tango\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default ChallengeProfileTab;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\bodyFocus.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\RemoteMediaManager.js",["747","748","749","750","751"],"import React, { useEffect, useState } from \"react\";\r\nimport { Modal } from \"antd\";\r\nimport { VFSBrowser } from \"./MediaManager\";\r\n\r\nfunction RemoteMediaManager({ visible, setVisible, type, actions }) {\r\n  const [a, setA] = useState(actions);\r\n  const [t, setT] = useState(type);\r\n\r\n  return (\r\n    <Modal\r\n      key={Math.random()}\r\n      title=\"Media Manager\"\r\n      visible={visible}\r\n      onOk={() => setVisible(false)}\r\n      onCancel={() => setVisible(false)}\r\n      footer={false}\r\n      width=\"80%\"\r\n    >\r\n      <VFSBrowser\r\n        actions={actions}\r\n        mediaType={type}\r\n        setRemoteMediaManagerVisible={setVisible}\r\n      />\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default RemoteMediaManager;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ShopManager\\UpdateProduct.js",["752","753","754","755"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Select, Checkbox, List, Modal } from \"antd\";\r\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\r\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\r\nimport { getAllCategories, updateProduct } from \"../../../services/shop\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\n\r\nfunction UpdateProduct(props) {\r\n  const [form] = Form.useForm();\r\n  // media manager stuff\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n  // products\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productDesc, setProductDesc] = useState(\"\");\r\n  const [productImg, setProductImg] = useState([]);\r\n  const [category, setCategory] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [instock, setInstock] = useState(true);\r\n  const [weight, setWeight] = useState(0);\r\n  const [dimensions, setDimensions] = useState({\r\n    length: \"\",\r\n    width: \"\",\r\n    height: \"\",\r\n  });\r\n  const [allCategories, setAllCategories] = useState([]);\r\n\r\n  const fethData = async () => {\r\n    const data = await getAllCategories();\r\n    setAllCategories(data.categories);\r\n    // console.log(props.match.params.productId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(props.selectedProduct);\r\n    form.setFieldsValue({\r\n      productName: props.selectedProduct.name,\r\n      productDesc: props.selectedProduct.description,\r\n      category: props.selectedProduct._id,\r\n      price: props.selectedProduct.price,\r\n      weight: props.selectedProduct.weight,\r\n      inStock: props.selectedProduct.inStock,\r\n    });\r\n    props.selectedProduct.dimensions &&\r\n      setDimensions(props.selectedProduct.dimensions);\r\n    props.selectedProduct.inStock && setInstock(props.selectedProduct.inStock);\r\n    props.selectedProduct.uploadImages &&\r\n      setProductImg(props.selectedProduct.uploadImages);\r\n    fethData();\r\n  }, [props.selectedProduct]);\r\n  const onFinish = async (values) => {\r\n    console.log(\"Success:\", values);\r\n    const uploadImages = productImg.map((i) => {\r\n      if (typeof i === \"object\") {\r\n        return i.link;\r\n      }\r\n      return i;\r\n    });\r\n    const d = {\r\n      name: values.productName,\r\n      description: values.productDesc,\r\n      category: values.category,\r\n      price: values.price,\r\n      weight: values.weight,\r\n      dimensions: dimensions,\r\n      uploadImages: uploadImages,\r\n      instock: values.inStock,\r\n    };\r\n    await updateProduct(d, props.selectedProduct._id);\r\n    // console.log(d);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (link) => {\r\n    const imgs = productImg.filter((i) => i.link !== link);\r\n    setProductImg(imgs);\r\n  };\r\n  return (\r\n    <Modal\r\n      visible={props.visible}\r\n      onCancel={() => {\r\n        props.setVisible(!props.visible);\r\n        props.getAllProducts();\r\n      }}\r\n      width=\"80vw\"\r\n      key={props.key}\r\n      footer={false}\r\n    >\r\n      {/* media manager */}\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      {/*  */}\r\n\r\n      <h2 className=\"font-heading-white\">Update Product</h2>\r\n      <div\r\n        className=\"admin-newuser-container\"\r\n        style={{ padding: \"50px 50px 50px 20px\" }}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            label=\"Product Name\"\r\n            name=\"productName\"\r\n            rules={[{ required: true, message: \"Please input product name!\" }]}\r\n          >\r\n            <Input\r\n              value={productName}\r\n              onChange={(e) => setProductName(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"productDesc\"\r\n            label=\"Product Description\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input description!\",\r\n              },\r\n            ]}\r\n          >\r\n            <TextArea\r\n              rows={4}\r\n              value={productDesc}\r\n              onChange={(e) => setProductDesc(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"category\" label=\"Category\">\r\n            <Select\r\n              className=\"field-focus-orange-border\"\r\n              placeholder=\"Select A Category\"\r\n              onChange={(e) => setCategory(e)}\r\n              allowClear\r\n            >\r\n              {allCategories.map((cat) => (\r\n                <Option value={cat._id}>{cat.name}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"price\"\r\n            label=\"Price\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input price!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              addonBefore=\"€\"\r\n              value={price}\r\n              type=\"number\"\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"weight\" label=\"Weight\">\r\n            <Input\r\n              addonBefore=\"Kg\"\r\n              value={weight}\r\n              type=\"number\"\r\n              onChange={(e) => setWeight(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item name=\"dimensions\" label=\"Dimensions\">\r\n            <Input\r\n              placeholder=\"Length\"\r\n              value={dimensions.length}\r\n              style={{ width: 100 }}\r\n              type=\"number\"\r\n              onChange={(e) =>\r\n                setDimensions({ ...dimensions, length: e.target.value })\r\n              }\r\n            />\r\n            <Input\r\n              placeholder=\"Width\"\r\n              style={{ width: 100 }}\r\n              value={dimensions.width}\r\n              type=\"number\"\r\n              onChange={(e) =>\r\n                setDimensions({ ...dimensions, width: e.target.value })\r\n              }\r\n            />\r\n            <Input\r\n              placeholder=\"Height\"\r\n              value={dimensions.height}\r\n              type=\"number\"\r\n              style={{ width: 100 }}\r\n              onChange={(e) =>\r\n                setDimensions({ ...dimensions, height: e.target.value })\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"uploadImg\"\r\n            valuePropName=\"checked\"\r\n            label=\"Upload Images\"\r\n          >\r\n            <Button\r\n              onClick={() => {\r\n                setMediaManagerVisible(true);\r\n                setMediaManagerType(\"images\");\r\n                setMediaManagerActions([productImg, setProductImg, \"multiple\"]);\r\n              }}\r\n            >\r\n              Upload File\r\n            </Button>\r\n            <div style={{ display: \"flex\" }}>\r\n              {productImg.map((img) => (\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    marginRight: \"15px\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    alt=\"\"\r\n                    src={`${process.env.REACT_APP_SERVER}/api${\r\n                      typeof img === \"object\" ? img.link : img\r\n                    }`}\r\n                    height=\"100px\"\r\n                  />\r\n                  <span>\r\n                    <CloseSquareOutlined\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => removeImage(img.link)}\r\n                    />\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"inStock\"\r\n            valuePropName=\"inStock\"\r\n            label=\"In Stock\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please mark if the item is in stock!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              type=\"checkbox\"\r\n              checked={instock}\r\n              onChange={(e) => setInstock(e.target.checked)}\r\n            ></Input>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{\r\n                backgroundColor: \"var(--color-orange)\",\r\n                borderColor: \"var(--color-orange)\",\r\n              }}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default withRouter(UpdateProduct);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Nutrient.js",["756","757","758","759","760"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\UserManager\\NewUser.js",["761","762","763","764","765","766","767","768"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Magazine.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\ResetNewPassword.js",["769","770"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\VerifyUser.js",["771"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\ChoosePlan.js",["772","773","774","775","776"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\mediaManagerUtils.js",["777","778"],"import React, { ReactElement, useMemo } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { ChonkyActions, ChonkyFileActionData } from \"chonky\";\r\nimport Noty from \"noty\";\r\nimport \"noty/lib/noty.css\";\r\nimport \"noty/lib/themes/relax.css\";\r\nimport \"../../../assets/override.css\";\r\n\r\n// We ignore some actions to avoid creating noise\r\nconst ignoredActions = new Set();\r\nignoredActions.add(ChonkyActions.MouseClickFile.id);\r\nignoredActions.add(ChonkyActions.KeyboardClickFile.id);\r\nignoredActions.add(ChonkyActions.StartDragNDrop.id);\r\nignoredActions.add(ChonkyActions.EndDragNDrop.id);\r\nignoredActions.add(ChonkyActions.ChangeSelection.id);\r\n\r\nexport const showActionNotification = (data) => {\r\n  if (ignoredActions.has(data.action.id)) return;\r\n\r\n  const textParts = [];\r\n  textParts.push(\r\n    `<div class=\"noty-action\">Action: <code>${data.action.id}</code></div>`\r\n  );\r\n\r\n  if (data.id === ChonkyActions.OpenFiles.id) {\r\n    const fileNames = data.payload.files.map((f) => `<code>${f.name}</code>`);\r\n    if (fileNames.length === 1) {\r\n      textParts.push(\"You opened a single file:\");\r\n    } else {\r\n      textParts.push(`You opened ${fileNames.length} files:`);\r\n    }\r\n    textParts.push(...fileNames);\r\n  }\r\n\r\n  if (data.id === ChonkyActions.MoveFiles.id) {\r\n    const fileCount = data.payload.files.length;\r\n    const countString = `${fileCount} file${fileCount !== 1 ? \"s\" : \"\"}`;\r\n    const source = `<code>${data.payload.source?.name ?? \"~\"}</code>`;\r\n    const destination = `<code>${data.payload.destination.name}</code>`;\r\n    textParts.push(\r\n      `You moved ${countString} from ${source} to ${destination}.`\r\n    );\r\n  }\r\n\r\n  if (data.id === ChonkyActions.DeleteFiles.id) {\r\n    const fileCount = data.state.selectedFilesForAction.length;\r\n    const countString = `${fileCount} file${fileCount !== 1 ? \"s\" : \"\"}`;\r\n    textParts.push(`You deleted ${countString} files.`);\r\n  }\r\n\r\n  const text = textParts[0] + textParts.slice(1).join(\"<br/>\");\r\n\r\n  new Noty({\r\n    text,\r\n    type: \"success\",\r\n    theme: \"relax\",\r\n    timeout: 3000,\r\n  }).show();\r\n};\r\n\r\nconst GIT_BRANCH = \"master\";\r\nexport const useStoryLinks = (links) => {\r\n  return useMemo(\r\n    () => {\r\n      const components = [];\r\n      for (let i = 0; i < links.length; ++i) {\r\n        const link = links[i];\r\n        let name = link.name;\r\n        let href = link.url;\r\n        if (link.docsUrl) {\r\n          href = link.docsUrl;\r\n          if (!name) name = \"Relevant docs\";\r\n        } else if (link.gitPath) {\r\n          href = getGitHubLink(link.gitPath);\r\n          if (!name) name = \"Story source code\";\r\n        } else if (!href) {\r\n          throw new Error(`Link \"${link.name}\" has no URL specified!`);\r\n        }\r\n\r\n        components.push(\r\n          <Button\r\n            href={href}\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            target=\"_blank\"\r\n            variant=\"contained\"\r\n            key={`story-link-${i}`}\r\n            rel=\"noreferrer noopener\"\r\n            style={{ marginBottom: 15, marginRight: 15 }}\r\n          >\r\n            {name}\r\n          </Button>\r\n        );\r\n      }\r\n      return components;\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n    // We deliberately leave hook deps empty as we don't exepct links to change.\r\n  );\r\n};\r\nexport const getGitHubLink = (filePath) =>\r\n  `https://github.com/TimboKZ/chonky-website/blob/${GIT_BRANCH}/${filePath}`;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Challenge\\WorkoutCompleteModal.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\BlogManager\\EditCategoryName.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\Challenges.js",["779","780"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FlagOutlined } from \"@ant-design/icons\";\r\nimport MaleBody from \"../../images/Asset-514@4x-1.png\";\r\nimport FemaleBody from \"../../images/Group 9879.png\";\r\nimport {\r\n  VictoryPie,\r\n  VictoryChart,\r\n  VictoryBar,\r\n  VictoryLabel,\r\n  VictoryAxis,\r\n} from \"victory\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport \"../../assets/userDashboard.css\";\r\n\r\nimport { ReactCompareSlider } from \"react-compare-slider\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\nimport ForwardIcon from \"../../assets/icons/forward-arrows.png\";\r\nimport WhiteClock from \"../../assets/icons/clock-white.svg\";\r\nimport StarOrange from \"../../assets/icons/star-orange.svg\";\r\nimport PlayerIcon from \"../../assets/icons/player-icon.svg\";\r\nimport Carousel from \"react-multi-carousel\";\r\nimport slug from \"elegant-slug\";\r\nimport { getChallengeProgress } from \"../../services/users\";\r\n\r\nconst responsive = {\r\n  superLargeDesktop: {\r\n    // the naming can be any, depends on you.\r\n    breakpoint: { max: 4000, min: 3000 },\r\n    items: 4,\r\n  },\r\n  desktop: {\r\n    breakpoint: { max: 3000, min: 1024 },\r\n    items: 2,\r\n  },\r\n  tablet: {\r\n    breakpoint: { max: 1024, min: 800 },\r\n    items: 2,\r\n  },\r\n  tablet1: {\r\n    breakpoint: { max: 800, min: 750 },\r\n    items: 2,\r\n  },\r\n  mobile: {\r\n    breakpoint: { max: 464, min: 0 },\r\n    items: 1,\r\n  },\r\n};\r\n\r\nfunction Challenges({ userProfile, gender, recommandedChal }) {\r\n  const [t] = useTranslation();\r\n  const { height, width } = useWindowDimensions();\r\n  // eslint-disable-next-line\r\n  const [myChallenges, setMyChallenges] = useState([]);\r\n  // eslint-disable-next-line\r\n  const [myBody, setMybody] = useState({});\r\n  // eslint-disable-next-line\r\n  const [myDevelopment, setMyDevelopment] = useState({});\r\n  const [pics, setPics] = useState([\"\", \"\"]);\r\n  // eslint-disable-next-line\r\n  const [recommandedChallenges, setRecommandedChallenges] = useState([]);\r\n  const [challengeProgress, setChallengeProgress] = useState([]);\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sept\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  useEffect(() => {\r\n    // -----------------------------------------------------------\r\n    console.log(\"recommadnchallnge\", recommandedChal.recommendedchallenge);\r\n    console.log(\"user profile\", userProfile);\r\n    // -----------------------------------------------------\r\n\r\n    setMyDevelopment({\r\n      weightChart: userProfile.weight.map((w, i) => ({ x: months[i], y: w })),\r\n      bodyFat: userProfile.bmir,\r\n    });\r\n    setPics([userProfile.beforeImageLink, userProfile.afterImageLink]);\r\n    setMyChallenges(userProfile.challenges);\r\n\r\n    recommandedChal &&\r\n      setRecommandedChallenges(recommandedChal.recommendedchallenge);\r\n    setMybody({\r\n      gender: gender,\r\n      waist: userProfile.waistSize,\r\n      hip: userProfile.hipSize,\r\n      breast: userProfile.chestSize,\r\n      shoulders: userProfile.shoulderSize,\r\n    });\r\n  }, [userProfile]);\r\n\r\n  useEffect(() => {\r\n    async function getAllMyChallengeProgress() {\r\n      console.log(\"yallah\", myChallenges);\r\n      const res = myChallenges.map(\r\n        async (c) => await getChallengeProgress(c._id)\r\n      );\r\n      const progress = await Promise.all(res);\r\n      setChallengeProgress(progress);\r\n      console.log(\"yallah\", progress);\r\n      console.log(myChallenges);\r\n      // const res = await getChallengeProgress()\r\n    }\r\n    getAllMyChallengeProgress();\r\n  }, [myChallenges]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dashboard-feed-container\">\r\n        <div className=\"dashboard-challenges-row1\">\r\n          <div className=\"dashboard-challenges-mychallenge\">\r\n            <div\r\n              className=\"user-update-container-box-row2-heading font-card-heading-light\"\r\n              style={{ marginTop: \"8px\" }}\r\n            >\r\n              {t(\"userDashboard.challenges.mcc\")}\r\n            </div>\r\n            <div className=\"divider\"></div>\r\n            <Scrollbars style={{ height: \"500px\" }}>\r\n              <div className=\"dashboard-challenges-mychallenge-body\">\r\n                {myChallenges && myChallenges.length > 0 ? (\r\n                  myChallenges.map((d, i) => (\r\n                    <Link\r\n                      to={`/challenge/${slug(d.challengeName)}/${d._id}`}\r\n                      key={i}\r\n                    >\r\n                      <div\r\n                        className=\"dashboard-challenges-mychallenge-body-box\"\r\n                        style={{\r\n                          background: `url(${process.env.REACT_APP_SERVER}/api${d.thumbnailLink})`,\r\n                          backgroundSize: \"cover\",\r\n                          backgroundPosition: \"50% 50%\",\r\n                          position: \"relative\",\r\n                        }}\r\n                      >\r\n                        <div\r\n                          className=\"dashboard-feed-container-card-row2-tag font-paragraph-white\"\r\n                          style={{ position: \"absolute\", top: \"0\", left: \"0\" }}\r\n                        >\r\n                          {d.difficulty && (\r\n                            <FlagOutlined style={{ paddingRight: \"2px\" }} />\r\n                          )}\r\n                          {d.difficulty}\r\n                        </div>\r\n                        <div className=\"dashboard-challenges-mychallenge-body-box-insidebox\">\r\n                          <span className=\"dashboard-challenges-mychallenge-body-box-insidebox-name font-heading-white\">\r\n                            {d.challengeName}\r\n                          </span>\r\n                          <span className=\"dashboard-challenges-mychallenge-body-box-insidebox-about font-paragraph-white\">\r\n                            {d.description}\r\n                          </span>\r\n                          <img\r\n                            src={ForwardIcon}\r\n                            style={{ marginTop: \"5px\" }}\r\n                            alt=\"forward\"\r\n                            height=\"15px\"\r\n                            width=\"40px\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"dashboard-challenges-mychallenge-body-box-insidebox-info\">\r\n                          <span className=\"dashboard-challenges-mychallenge-body-box-insidebox-completed font-paragraph-white\">\r\n                            <img\r\n                              src={WhiteClock}\r\n                              style={{ marginRight: \"5px\" }}\r\n                              alt=\"\"\r\n                            />\r\n                            Completed{\" \"}\r\n                            {\r\n                              challengeProgress[i]?.data\r\n                                ?.challengeCompletionRate\r\n                            }{\" \"}\r\n                            %\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </Link>\r\n                  ))\r\n                ) : (\r\n                  <h2 className=\"font-heading-white\">\r\n                    You have not enrolled in any challenges.\r\n                  </h2>\r\n                )}\r\n              </div>\r\n            </Scrollbars>\r\n          </div>\r\n          <div className=\"dashboard-challenges-myshape\">\r\n            <div\r\n              className=\"dashboard-challenges-mychallenge-heading\"\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                flexWrap: \"wrap\",\r\n              }}\r\n            >\r\n              <span className=\"user-update-container-box-row2-heading font-card-heading-light\">\r\n                {t(\"userDashboard.challenges.ms\")}\r\n              </span>\r\n\r\n              <div style={{ marginBottom: \"10px\" }}>\r\n                <Link\r\n                  to=\"/user/update\"\r\n                  className=\"font-paragraph-white hover-orange\"\r\n                  style={{ fontSize: \"15px\" }}\r\n                >\r\n                  {t(\"userDashboard.challenges.update\")}\r\n                </Link>\r\n              </div>\r\n              <div className=\"divider\"></div>\r\n            </div>\r\n            <div className=\"dashboard-challenges-myshape-container\">\r\n              <ReactCompareSlider\r\n                itemOne={\r\n                  <div\r\n                    className=\"font-paragraph-white\"\r\n                    style={{ backgroundColor: \"#2F3E50\", height: \"100%\" }}\r\n                  >\r\n                    <img\r\n                      src={`${process.env.REACT_APP_SERVER}/api${pics[0]}`}\r\n                      alt=\"users-before\"\r\n                    />\r\n                  </div>\r\n                }\r\n                itemTwo={\r\n                  <div\r\n                    className=\"font-paragraph-white\"\r\n                    style={{ backgroundColor: \"#3C618F\", height: \"100%\" }}\r\n                  >\r\n                    <img\r\n                      src={`${process.env.REACT_APP_SERVER}/api${pics[1]}`}\r\n                      alt=\"users-after\"\r\n                    />\r\n                  </div>\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"dashboard-challenges-row2\">\r\n        <div className=\"dashboard-challenges-row2-mydevelopment\">\r\n          <div className=\"user-update-container-box-row2-heading font-card-heading-light\">\r\n            {t(\"userDashboard.challenges.mydev\")}\r\n          </div>\r\n          <div className=\"divider\"></div>\r\n          <div className=\"dashboard-challenges-row2-mydevelopment-insidebox-1\">\r\n            {/* <VictoryContainer style={{ width: \"50%\" }}> */}\r\n            {/* <svg viewBox=\"0 0 200 350\"> */}\r\n            <div style={{ width: \"50%\" }}>\r\n              <VictoryPie\r\n                innerRadius={30}\r\n                padding={10}\r\n                height={200}\r\n                width={350}\r\n                labels={({ datum }) => ``}\r\n                colorScale={[\"#F37720\", \"#171e27\"]}\r\n                data={[\r\n                  { x: \"Body Weight\", y: myDevelopment.bodyFat },\r\n                  { x: \"\", y: 100 - myDevelopment.bodyFat },\r\n                ]}\r\n              />\r\n            </div>\r\n            {/* </svg> */}\r\n            {/* </VictoryContainer> */}\r\n            <div className=\"dashboard-challenges-row2-mydevelopment-insidebox-1-text\">\r\n              <span className=\"font-paragraph-white\">\r\n                {\" \"}\r\n                {t(\"userDashboard.challenges.bf\")}\r\n              </span>\r\n              <span\r\n                className=\"font-paragraph-white\"\r\n                style={{ fontSize: \"4rem\", paddingTop: \"10px\" }}\r\n              >\r\n                {myDevelopment.bodyFat} %\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"dashboard-challenges-row2-mydevelopment-insidebox-2\">\r\n            <VictoryChart\r\n              // domainPadding={10}\r\n              height={250}\r\n            >\r\n              <VictoryLabel\r\n                // text=\"Weight Chart\"\r\n                x={225}\r\n                y={30}\r\n                textAnchor=\"middle\"\r\n                style={{ fill: \"#fff\", opacity: \"0.8\", fontSize: \"1.4rem\" }}\r\n              />\r\n              <VictoryBar\r\n                style={{ data: { fill: \"#F37720\" }, labels: { fill: \"white\" } }}\r\n                data={myDevelopment.weightChart}\r\n                labels={({ datum }) => datum.y}\r\n              />\r\n              <VictoryAxis\r\n                style={{\r\n                  tickLabels: {\r\n                    fontSize: \"14px\",\r\n                    fill: \"#fff\",\r\n                    opacity: \"0.8\",\r\n                  },\r\n                }}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n        </div>\r\n        <div className=\"dashboard-challenges-row2-mybody\">\r\n          <div className=\"user-update-container-box-row2-heading font-card-heading-light\">\r\n            {t(\"userDashboard.challenges.mybody\")}\r\n          </div>\r\n          <div className=\"divider\"></div>\r\n          <div style={{ paddingTop: \"30px\" }}>\r\n            <div style={{ textAlign: \"center\", position: \"relative\" }}>\r\n              <img\r\n                src={gender === \"male\" ? MaleBody : FemaleBody}\r\n                alt=\"human-body\"\r\n              />\r\n              {console.log(gender)}\r\n              <div className=\"body-line body-line1\">\r\n                <span className=\"font-paragraph-white\">\r\n                  {t(\"userDashboard.challenges.breast\")} ({myBody.breast})\r\n                </span>{\" \"}\r\n                <div></div>\r\n              </div>\r\n              <div className=\"body-line body-line2\">\r\n                <span className=\"font-paragraph-white\">\r\n                  {t(\"userDashboard.challenges.hips\")} ({myBody.hip})\r\n                </span>{\" \"}\r\n                <div></div>\r\n              </div>\r\n              <div className=\"body-line body-line3\">\r\n                <div></div>\r\n                <span className=\"font-paragraph-white\">\r\n                  {t(\"userDashboard.challenges.shoulders\")} ({myBody.shoulders})\r\n                </span>{\" \"}\r\n              </div>\r\n              <div className=\"body-line body-line4\">\r\n                <div></div>\r\n                <span className=\"font-paragraph-white\">\r\n                  {t(\"userDashboard.challenges.waist\")} ({myBody.waist})\r\n                </span>{\" \"}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"dashboard-challenges-row3\">\r\n        <div\r\n          className=\"dashboard-challenges-mychallenge-heading\"\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexWrap: \"wrap\",\r\n          }}\r\n        >\r\n          <span className=\"user-update-container-box-row2-heading font-card-heading-light\">\r\n            {t(\"userDashboard.challenges.ccfy\")}\r\n          </span>\r\n\r\n          {width > 700 && (\r\n            <div style={{ marginBottom: \"10px\" }}>\r\n              <Link\r\n                to=\"/challenges\"\r\n                className=\"common-orange-button font-paragraph-white\"\r\n              >\r\n                {t(\"userDashboard.challenges.vac\")}\r\n              </Link>\r\n              <Link\r\n                to=\"/pricing\"\r\n                style={{ marginLeft: \"10px\" }}\r\n                className=\"common-transparent-button font-paragraph-white\"\r\n              >\r\n                {t(\"userDashboard.challenges.sp\")}\r\n              </Link>\r\n            </div>\r\n          )}\r\n          <div className=\"divider\"></div>\r\n        </div>\r\n        <div className=\"dashboard-challenges-row3-inbox\">\r\n          {recommandedChallenges ? (\r\n            <Carousel responsive={responsive}>\r\n              {recommandedChallenges.map((challenge) => (\r\n                <Link\r\n                  to={`/challenge/${slug(challenge.challengeName)}/${\r\n                    challenge._id\r\n                  }`}\r\n                >\r\n                  <div\r\n                    className=\"dashboard-challenges-row3-inbox-challenge\"\r\n                    style={{\r\n                      background: `url(${process.env.REACT_APP_SERVER}/api${challenge.thumbnailLink})`,\r\n                      backgroundSize: \"cover\",\r\n                      backgroundPosition: \"50% 50%\",\r\n                      position: \"relative\",\r\n                      height: \"100%\",\r\n                    }}\r\n                  >\r\n                    <div className=\"dashboard-challenges-row3-inbox-challenge-textbox\">\r\n                      <span\r\n                        className=\"font-paragraph-white\"\r\n                        style={{ fontSize: \"2rem\" }}\r\n                      >\r\n                        {challenge.challengeName}\r\n                      </span>\r\n                      <span\r\n                        className=\"font-paragraph-white\"\r\n                        style={{\r\n                          width: \"70%\",\r\n                          height: \"50px\",\r\n                          overflow: \"hidden\",\r\n                        }}\r\n                      >\r\n                        {challenge.description}\r\n                      </span>\r\n                      <div>\r\n                        <img\r\n                          src={ForwardIcon}\r\n                          style={{ marginTop: \"5px\" }}\r\n                          alt=\"forward\"\r\n                          height=\"15px\"\r\n                          width=\"40px\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        {new Array(challenge.rating).fill(0).map((c) => (\r\n                          <img src={StarOrange} alt=\"\" />\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                    <img\r\n                      src={PlayerIcon}\r\n                      style={{\r\n                        fontSize: \"4rem\",\r\n                        color: \"var(--color-gray-dark)\",\r\n                        opacity: \"0.8\",\r\n                        display: \"flex\",\r\n                        alignSelf: \"center\",\r\n                        paddingRight: \"50px\",\r\n                      }}\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                </Link>\r\n              ))}\r\n            </Carousel>\r\n          ) : (\r\n            <div\r\n              className=\"font-paragraph-white\"\r\n              style={{ marginLeft: \"10px\" }}\r\n            >\r\n              No challenges found\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Challenges;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Home.js",["781","782"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\EmailVerificationRedirect.js",["783"],"import React, { useEffect, useState } from \"react\";\r\nimport { LoadingOutlined, CheckCircleOutlined } from \"@ant-design/icons\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { verifyEmail } from \"../services/authentication\";\r\n\r\n// todo\r\n// add loading icon that says loading while you send a request to backend with the token from the params. once done redirect to login page.\r\nfunction EmailVerificationRedirect(props) {\r\n  const [success, setSuccess] = useState(false);\r\n  useEffect(() => {\r\n    verifyEmailSendToken();\r\n  }, []);\r\n\r\n  const verifyEmailSendToken = async () => {\r\n    const token = props.match.params.token;\r\n    const res = await verifyEmail(token);\r\n\r\n    if (res.success) {\r\n      if (localStorage.getItem(\"userRecentlySignedUp\")) {\r\n        setSuccess(true);\r\n      } else {\r\n        props.history.push(\"/login\");\r\n      }\r\n    }\r\n    console.log(\"res\", res);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <>\r\n        {success ? (\r\n          <CheckCircleOutlined\r\n            style={{\r\n              color: \"#ff7700\",\r\n              fontSize: \"120px\",\r\n              marginBottom: \"20px\",\r\n            }}\r\n          />\r\n        ) : (\r\n          <LoadingOutlined\r\n            style={{\r\n              color: \"#ff7700\",\r\n              fontSize: \"120px\",\r\n              marginBottom: \"20px\",\r\n            }}\r\n          />\r\n        )}\r\n        <h1\r\n          className=\"font-heading-black\"\r\n          style={{ margin: \"0\", padding: \"0\" }}\r\n        >\r\n          {success\r\n            ? \"Email successfully verified!\"\r\n            : \"Please wait while we verify your email.\"}\r\n        </h1>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(EmailVerificationRedirect);\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\UpdateChallenge.js",["784","785","786","787","788","789","790"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Tabs, Modal, Button, Form } from \"antd\";\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\r\nimport NewChallengeMainTab from \"./NewChallengeMainTab\";\r\nimport NewChallengeWorkoutTab from \"./NewChallengeWorkoutTab\";\r\nimport NewChallengeMusicTab from \"./NewChallengeMusicTab\";\r\nimport NewChallengeAdditionalTab from \"./NewChallengeAdditionalTab\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { v4 } from \"uuid\";\r\n\r\n// services\r\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\r\nimport { getAllChallengeTags } from \"../../../services/createChallenge/tags\";\r\nimport { getAllChallengeEquipments } from \"../../../services/createChallenge/equipments\";\r\nimport { getAllBodyFocus } from \"../../../services/createChallenge/bodyFocus\";\r\nimport { getAllTrainers } from \"../../../services/trainers\";\r\nimport { getAllChallengeProducts } from \"../../../services/createChallenge/products\";\r\nimport {\r\n  createChallenge,\r\n  updateChallenge,\r\n} from \"../../../services/createChallenge/main\";\r\nimport setAuthToken from \"../../../helpers/setAuthToken\";\r\nimport { userInfoContext } from \"../../../contexts/UserStore\";\r\nimport { createPost } from \"../../../services/posts\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction callback(key) {\r\n  console.log(key);\r\n}\r\n\r\nfunction UpdateChallenge({ selectedChallengeForUpdate, setCurrentSelection }) {\r\n  const [t] = useTranslation();\r\n  const [form] = Form.useForm();\r\n  // state of main tab strats\r\n  const [name, setName] = useState(\"\");\r\n  const [access, setAccess] = useState([]);\r\n  const [price, setPrice] = useState(\"\");\r\n  const [points, setPoints] = useState(0);\r\n  const [currency, setCurrency] = useState(\"$\");\r\n  const [thumbnail, setThumbnail] = useState(\"\");\r\n  const [videoThumbnail, setVideoThumbnail] = useState(\"\");\r\n  const [videoTrailer, setVideoTrailer] = useState(\"\");\r\n  const [trainers, setTrainers] = useState([]);\r\n  const [allTrainers, setAllTrainers] = useState([]);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [difficulty, setDifficulty] = useState(\"\");\r\n  const [goals, setGoals] = useState([]);\r\n  const [bodyFocus, setBodyFocus] = useState([]);\r\n  const [equipments, setEquipments] = useState([]);\r\n  const [duration, setDuration] = useState(\"\");\r\n  // we get all goals from backend\r\n  const [allGoals, setAllGoals] = useState([]);\r\n  const [newGoalName, setNewGoalName] = useState(\"\");\r\n  const [showGoalModal, setShowGoalModal] = useState(false);\r\n  // we get all bodyfocus from backend\r\n  const [allBodyfocus, setAllBodyfocus] = useState([]);\r\n  const [newBodyfocusName, setNewBodyfocusName] = useState(\"\");\r\n  const [showBodyfocusModal, setShowBodyfocusModal] = useState(false);\r\n  // we get all equipments from backend\r\n  const [allEquipments, setAllEquipments] = useState([]);\r\n  const [newEquipmentName, setNewEquipmentName] = useState(\"\");\r\n  const [equipmentModal, setEquipmentModal] = useState(false);\r\n  const [newDurationName, setNewDurationName] = useState(\"\");\r\n  const [showDurationModal, setShowDurationModal] = useState(false);\r\n  // we get all tags from backend\r\n  const [tags, setTags] = useState([]);\r\n  const [allTags, setAllTags] = useState([]);\r\n  const [newTagName, setNewTagName] = useState(\"\");\r\n  const [showTagModal, setShowTagModal] = useState(false);\r\n\r\n    //fitness interest\r\n    const [selectedFitnessInterest, setSelectedFitnessInterest] = useState(\"\");\r\n\r\n  // state of main tab ends\r\n\r\n  // state pf the new challenge tab starts\r\n  const [weeks, setWeeks] = useState([]);\r\n  const [addWorkoutModalVisible, setAddWorkoutModalVisible] = useState(false);\r\n  const [workoutModalFullscreen, setWorkoutModalFullscreen] = useState(false);\r\n  const [allProducts, setAllProducts] = useState([\r\n    { id: 1, name: \"Carpet\" },\r\n    { id: 2, name: \"Mat\" },\r\n    { id: 3, name: \"Dumbell\" },\r\n  ]);\r\n  const [products, setProducts] = useState([]);\r\n  //   this is for new workout creation process\r\n  const [workoutToUpdate, setWorkoutToUpdate] = useState(\"\");\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [currentWeek, setCurrentWeek] = useState(\"\");\r\n  const [workoutTitle, setWorkoutTile] = useState(\"\");\r\n  const [workoutSubtitle, setWorkoutSubtile] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [infoTitle, setInfoTile] = useState(\"\");\r\n  const [infoFile, setInfoFile] = useState(\"\");\r\n  // const [points, setPoints] = useState(0);\r\n  const [workoutIntroVideoFile, setWorkoutIntroVideoFile] = useState(\"\");\r\n  const [workoutIntroVideoLength, setWorkoutIntroVideoLength] = useState(\"\");\r\n  const [relatedEquipments, setRelatedEquipments] = useState([]);\r\n  const [renderWorkout, setRenderWorkout] = useState(false);\r\n  const [workoutIdsThatNeedToBeUpdated, setWorkoutIdsThatNeedToBeUpdated] =\r\n    useState([]);\r\n  // this is a rendered workout exercise it wonly takes in full video of the exercise\r\n  const [renderedWorkoutExercises, setRenderWorkoutExercises] = useState([\r\n    {\r\n      exerciseId: v4(),\r\n      exerciseName: \"\",\r\n      exerciseVideo: \"\",\r\n    },\r\n  ]);\r\n  // this is a non-rendered workout exercise it will take multiple videos and voiceeover\r\n  const [nonRenderedWorkoutExercises, setNonRenderedWorkoutExercises] =\r\n    useState([\r\n      {\r\n        exerciseId: v4(),\r\n        exerciseName: \"\",\r\n        exerciseVideo: \"\",\r\n        videoLength: \"\",\r\n        voiceOverFile: \"\",\r\n        breakAfterExercise: \"\",\r\n        exerciseGroupName: \"\",\r\n      },\r\n    ]);\r\n  const [musics, setMusics] = useState([]);\r\n  // state of the new cha;llenge ends\r\n\r\n  // state for additional inform\r\n  const [results, setResults] = useState(\"\");\r\n  // const [info, setInfo] = useState(\"\");\r\n  const [makePublic, setMakePublic] = useState(false);\r\n  const [allowComments, setAllowComments] = useState(false);\r\n  const [allowReviews, setAllowReviews] = useState(false);\r\n  const [additionalProducts, setAdditionalProducts] = useState([]);\r\n  const [informationList, setInformationList] = useState([]);\r\n  const [relatedProducts, setRelatedProducts] = useState([]);\r\n  // --------------------\r\n  const [createPostModalVisible, setCreatePostModalVisible] = useState(false);\r\n  const [weeksToBeUpdated, setWeeksToBeUpdated] = useState([]);\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n\r\n  useEffect(() => {\r\n    setAuthToken(localStorage.getItem(\"jwtToken\"));\r\n    addStuffToMainTabForm();\r\n    fethData();\r\n  }, []);\r\n\r\n  const addStuffToMainTabForm = () => {\r\n    console.log(\"selected challenge\", selectedChallengeForUpdate);\r\n    const {\r\n      challengeName,\r\n      description,\r\n      price,\r\n      points,\r\n      currency,\r\n      thumbnailLink,\r\n      videoThumbnailLink,\r\n      videoLink,\r\n      trainers,\r\n      access,\r\n      difficulty,\r\n      challengeGoals,\r\n      tags,\r\n      body,\r\n      duration,\r\n      music,\r\n      additionalProducts,\r\n      results,\r\n      allowComments,\r\n      allowReviews,\r\n      isPublic,\r\n      informationList,\r\n      weeks,\r\n      trainersFitnessInterest,\r\n    } = selectedChallengeForUpdate;\r\n\r\n    console.log(selectedChallengeForUpdate);\r\n    // return;\r\n    setName(challengeName);\r\n    setAccess(access);\r\n    setPrice(price);\r\n    setPoints(points);\r\n    setCurrency(currency);\r\n    setThumbnail({ name: thumbnailLink, link: thumbnailLink });\r\n    setVideoThumbnail({ name: videoThumbnailLink, link: videoThumbnailLink });\r\n    setVideoTrailer({ name: videoLink, link: videoLink });\r\n    setTrainers(trainers.map((t) => t._id));\r\n    setDescription(description);\r\n    setDifficulty(difficulty);\r\n    setSelectedFitnessInterest(trainersFitnessInterest ? trainersFitnessInterest : \"\")\r\n    setGoals(challengeGoals.map((t) => t._id));\r\n    setBodyFocus(body.map((t) => t._id));\r\n    setDuration(duration);\r\n    setTags(tags.map((t) => t._id));\r\n    setMusics(\r\n      music\r\n        ? music.map((m) => ({\r\n            _id: m._id,\r\n            musicId: m._id,\r\n            file: { name: m.url, link: m.url },\r\n            name: m.name,\r\n          }))\r\n        : []\r\n    );\r\n    setAdditionalProducts(additionalProducts.map((t) => t._id));\r\n    setResults(results);\r\n    setAllowComments(allowComments);\r\n    setAllowReviews(allowReviews);\r\n    setMakePublic(isPublic);\r\n    setInformationList(\r\n      informationList.map((j) => ({\r\n        _id: j._id,\r\n        id: j._id,\r\n        text: j.info,\r\n        file: { link: j.icon },\r\n      }))\r\n    );\r\n    setWeeksToBeUpdated(weeks);\r\n    // setWeeks(weeks);\r\n    const w = weeks.map((week) => ({\r\n      _id: week._id,\r\n      id: week._id,\r\n      weekId: week._id,\r\n      weekTitle: week.weekName ? week.weekName : \"\",\r\n      weekSubtitle: week.weekSubtitle ? week.weekSubtitle : \"\",\r\n      workouts: week.workouts.map((workout) => ({\r\n        _id: workout._id,\r\n        workoutId: workout._id,\r\n        workoutTitle: workout.title ? workout.title : \"\",\r\n        workoutSubtitle: workout.subtitle ? workout.subtitle : \"\",\r\n        renderWorkout: workout.isRendered ? workout.isRendered : false,\r\n        workoutIntroVideoFile: workout.introVideoLink\r\n          ? {\r\n              name: workout.introVideoLink,\r\n              link: workout.introVideoLink,\r\n            }\r\n          : { name: \"\", link: \"\" },\r\n          workoutIntroVideoLength: workout.introVideoLength\r\n          ? workout.introVideoLength\r\n          : \"\",\r\n        relatedProducts: workout.relatedProducts\r\n          ? workout.relatedProducts.map((t) => t._id)\r\n          : \"\",\r\n        relatedEquipments: workout.relatedEquipments\r\n          ? workout.relatedEquipments.map((t) => t._id)\r\n          : \"\",\r\n        infoTitle: workout.infoTitle ? workout.infoTitle : \"\",\r\n        infoFile: workout.infoFile\r\n          ? { name: workout.infoFile, link: workout.infoFile }\r\n          : \"\",\r\n        groupName: workout.groupName ? workout.groupName : \"\",\r\n        exercises: workout.isRendered\r\n          ? workout.exercises.map((e) => ({\r\n              _id: e._id,\r\n              exerciseId: e.exerciseId._id,\r\n              exerciseName: e.exerciseId.title ? e.exerciseId.title : \"\",\r\n              exerciseVideo: e.exerciseId.videoURL,\r\n              voiceOverFile: e.exerciseId.voiceOverLink,\r\n              videoLength: e.exerciseLength ? e.exerciseLength : \"\",\r\n              exerciseGroupName: e.groupName ? e.groupName : \"\",\r\n              breakAfterExercise: e.break ? e.break : \"\",\r\n            }))\r\n          : workout.exercises.map((e) => ({\r\n              exerciseName: e.renderedWorkoutExerciseName,\r\n              exerciseVideo: e.renderedWorkoutExerciseVideo,\r\n            })),\r\n      })),\r\n    }));\r\n    setWeeks(w);\r\n\r\n    form.setFieldsValue({\r\n      challengeName,\r\n      description,\r\n      price,\r\n      points,\r\n      currency: currency,\r\n      access: access,\r\n      duration,\r\n      goals: challengeGoals,\r\n    });\r\n  };\r\n  async function fethData() {\r\n    const bodyFocus = await getAllBodyFocus();\r\n    const goals = await getAllChallengeGoals();\r\n    const tags = await getAllChallengeTags();\r\n    const equipments = await getAllChallengeEquipments();\r\n    const trainers = await getAllTrainers();\r\n    const products = await getAllChallengeProducts();\r\n\r\n    setAllBodyfocus(bodyFocus.body);\r\n    setAllEquipments(equipments.equipments);\r\n    setAllGoals(goals.challengeGoals);\r\n    setAllTags(tags.tags);\r\n    // console.log(\"trainers\", trainers);\r\n    setAllTrainers(trainers.trainers);\r\n    setAllProducts(products.products);\r\n  }\r\n\r\n  // const updateWorkouts = (weeks) => {\r\n  //   weeks.map((week) => {\r\n  //     week.workout.map(async (workout) => {\r\n  //       await updateWorkout(workout, workout._id);\r\n  //     });\r\n  //   });\r\n  // };\r\n  const parseWeeksForBackend = (weeks) => {\r\n    const w = weeks.map((week) => {\r\n      let g = {\r\n        ...week,\r\n        weekName: week.weekTitle,\r\n        weekSubtitle: week.weekSubtitle,\r\n        workouts: week.workouts\r\n          .map((wo) => wo._id)\r\n          .filter(function (el) {\r\n            return el !== undefined && el !== null;\r\n          }),\r\n      };\r\n      workoutIdsThatNeedToBeUpdated\r\n        .map((woId) => {\r\n          if (g._id === woId.weelId || g.weekId === woId.weelId) {\r\n            g.workouts = [...g.workouts, woId.workout];\r\n          }\r\n        })\r\n        .filter(function (el) {\r\n          return el !== undefined && el !== null;\r\n        });\r\n      console.log(g);\r\n      return g;\r\n    });\r\n\r\n    console.log(w);\r\n    return w;\r\n  };\r\n  const updateChallengeButton = async () => {\r\n    const obj = {\r\n      challengeName: name,\r\n      description: description,\r\n      price: price,\r\n      points: points,\r\n      currency: currency,\r\n      thumbnailLink: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\r\n      videoThumbnailLink:\r\n        typeof videoThumbnail === \"object\" ? videoThumbnail.link : \"\",\r\n      trainers: trainers,\r\n      challengeGoals: goals,\r\n      trainersFitnessInterest: selectedFitnessInterest,\r\n      tags: tags,\r\n      body: bodyFocus,\r\n      access: access,\r\n      duration: duration,\r\n      difficulty: difficulty,\r\n      videoTrailer: typeof videoTrailer === \"object\" ? videoTrailer.link : \"\",\r\n      weeks: parseWeeksForBackend(weeks),\r\n      music: musics.map((m) => ({\r\n        ...m,\r\n        name: m.name,\r\n        url: typeof m.file === \"object\" ? m.file.link : m.file,\r\n      })),\r\n      additionalProducts: additionalProducts,\r\n      results: results,\r\n      informationList: informationList\r\n        ? informationList.map((i) => ({\r\n            ...i,\r\n            info: i.text,\r\n            icon: i.file ? i.file.link : \"\",\r\n          }))\r\n        : [],\r\n      allowComments,\r\n      allowReviews,\r\n      isPublic: makePublic,\r\n    };\r\n    console.log(obj, selectedChallengeForUpdate._id);\r\n    // return;\r\n    const res = await updateChallenge(obj, selectedChallengeForUpdate._id);\r\n    console.log(\"response\", res);\r\n    console.log(\"weeks\", workoutIdsThatNeedToBeUpdated);\r\n    // updateWorkouts(obj.weeks);\r\n    // if (res) {\r\n    //   setCreatePostModalVisible(true);\r\n    // }\r\n    console.log(obj);\r\n  };\r\n\r\n  const createAPost = async () => {\r\n    const values = {\r\n      title: name,\r\n      text: description,\r\n      image: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\r\n      type: \"Challenge\",\r\n    };\r\n    await createPost(values);\r\n    setCreatePostModalVisible(false);\r\n    // console.log(values);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* ask user to if they want to post challenge */}\r\n      <Modal\r\n        onCancel={() => setCreatePostModalVisible(false)}\r\n        visible={createPostModalVisible}\r\n        footer={false}\r\n        style={{ textAlign: \"center\" }}\r\n      >\r\n        <h1 className=\"font-heading-white\">\r\n          Create a post about your challenge?\r\n        </h1>\r\n        <Button\r\n          className=\"common-orange-button font-paragraph-white\"\r\n          onClick={() => createAPost()}\r\n          style={{ padding: \"5px 10px\" }}\r\n        >\r\n          Create a Post\r\n        </Button>\r\n      </Modal>\r\n      <h2 className=\"font-heading-black\">\r\n        <ArrowLeftOutlined\r\n          onClick={() => setCurrentSelection(6.1)}\r\n          style={{ fontSize: \"30px\", cursor: \"pointer\", marginRight: \"10px\" }}\r\n        />\r\n        Update Challenge\r\n        <Button\r\n          className=\"font-paragraph-white\"\r\n          style={{\r\n            backgroundColor: \"var(--color-orange)\",\r\n            border: \"none\",\r\n            marginTop: \"10px\",\r\n            marginRight: \"30px\",\r\n            float: \"right\",\r\n          }}\r\n          onClick={updateChallengeButton}\r\n        >\r\n          Update Challenge\r\n        </Button>\r\n      </h2>\r\n\r\n      <div className=\"newchallenge-creator-container\">\r\n        <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n          <TabPane tab=\"Main\" key=\"1\">\r\n            <NewChallengeMainTab\r\n              form={form}\r\n              selectedFitnessInterest={selectedFitnessInterest} \r\n              setSelectedFitnessInterest={setSelectedFitnessInterest}\r\n              id={selectedChallengeForUpdate._id}\r\n              name={name}\r\n              setName={setName}\r\n              access={access}\r\n              setAccess={setAccess}\r\n              price={price}\r\n              points={points}\r\n              setPrice={setPrice}\r\n              setPoints={setPoints}\r\n              currency={currency}\r\n              setCurrency={setCurrency}\r\n              thumbnail={thumbnail}\r\n              setThumbnail={setThumbnail}\r\n              videoThumbnail={videoThumbnail}\r\n              setVideoThumbnail={setVideoThumbnail}\r\n              videoTrailer={videoTrailer}\r\n              setVideoTrailer={setVideoTrailer}\r\n              trainers={trainers}\r\n              setTrainers={setTrainers}\r\n              allTrainers={allTrainers}\r\n              setAllTrainers={setAllTrainers}\r\n              description={description}\r\n              setDescription={setDescription}\r\n              difficulty={difficulty}\r\n              setDifficulty={setDifficulty}\r\n              goals={goals}\r\n              setGoals={setGoals}\r\n              bodyFocus={bodyFocus}\r\n              setBodyFocus={setBodyFocus}\r\n              equipments={equipments}\r\n              setEquipments={setEquipments}\r\n              duration={duration}\r\n              setDuration={setDuration}\r\n              allGoals={allGoals}\r\n              setAllGoals={setAllGoals}\r\n              newGoalName={newGoalName}\r\n              setNewGoalName={setNewGoalName}\r\n              showGoalModal={showGoalModal}\r\n              setShowGoalModal={setShowGoalModal}\r\n              allBodyfocus={allBodyfocus}\r\n              setAllBodyfocus={setAllBodyfocus}\r\n              newBodyfocusName={newBodyfocusName}\r\n              setNewBodyfocusName={setNewBodyfocusName}\r\n              showBodyfocusModal={showBodyfocusModal}\r\n              setShowBodyfocusModal={setShowBodyfocusModal}\r\n              allEquipments={allEquipments}\r\n              setAllEquipments={setAllEquipments}\r\n              newEquipmentName={newEquipmentName}\r\n              setNewEquipmentName={setNewEquipmentName}\r\n              equipmentModal={equipmentModal}\r\n              setEquipmentModal={setEquipmentModal}\r\n              newDurationName={newDurationName}\r\n              setNewDurationName={setNewDurationName}\r\n              showDurationModal={showDurationModal}\r\n              setShowDurationModal={setShowDurationModal}\r\n              tags={tags}\r\n              setTags={setTags}\r\n              allTags={allTags}\r\n              setAllTags={setAllTags}\r\n              newTagName={newTagName}\r\n              setNewTagName={setNewTagName}\r\n              showTagModal={showTagModal}\r\n              setShowTagModal={setShowTagModal}\r\n              update={true}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Workouts\" key=\"2\">\r\n            <NewChallengeWorkoutTab\r\n              weeksToBeUpdated={weeksToBeUpdated}\r\n              update={true}\r\n              weeks={weeks}\r\n              setWeeks={setWeeks}\r\n              addWorkoutModalVisible={addWorkoutModalVisible}\r\n              setAddWorkoutModalVisible={setAddWorkoutModalVisible}\r\n              workoutModalFullscreen={workoutModalFullscreen}\r\n              setWorkoutModalFullscreen={setWorkoutModalFullscreen}\r\n              allProducts={allProducts}\r\n              setAllProducts={setAllProducts}\r\n              setProducts={setProducts}\r\n              allEquipments={allEquipments}\r\n              setAllEquipments={setAllEquipments}\r\n              workoutToUpdate={workoutToUpdate}\r\n              setWorkoutToUpdate={setWorkoutToUpdate}\r\n              currentStep={currentStep}\r\n              setCurrentStep={setCurrentStep}\r\n              currentWeek={currentWeek}\r\n              setCurrentWeek={setCurrentWeek}\r\n              workoutTitle={workoutTitle}\r\n              setWorkoutTile={setWorkoutTile}\r\n              workoutSubtitle={workoutSubtitle}\r\n              setWorkoutSubtile={setWorkoutSubtile}\r\n              groupName={groupName}\r\n              setGroupName={setGroupName}\r\n              infoTitle={infoTitle}\r\n              setInfoTile={setInfoTile}\r\n              infoFile={infoFile}\r\n              setInfoFile={setInfoFile}\r\n              workoutIntroVideoFile={workoutIntroVideoFile}\r\n              setWorkoutIntroVideoFile={setWorkoutIntroVideoFile}\r\n              workoutIntroVideoLength={workoutIntroVideoLength}\r\n              setWorkoutIntroVideoLength={setWorkoutIntroVideoLength}\r\n              relatedProducts={relatedProducts}\r\n              setRelatedProducts={setRelatedProducts}\r\n              relatedEquipments={relatedEquipments}\r\n              setRelatedEquipments={setRelatedEquipments}\r\n              renderWorkout={renderWorkout}\r\n              setRenderWorkout={setRenderWorkout}\r\n              renderedWorkoutExercises={renderedWorkoutExercises}\r\n              setRenderWorkoutExercises={setRenderWorkoutExercises}\r\n              nonRenderedWorkoutExercises={nonRenderedWorkoutExercises}\r\n              setNonRenderedWorkoutExercises={setNonRenderedWorkoutExercises}\r\n              setWorkoutIdsThatNeedToBeUpdated={\r\n                setWorkoutIdsThatNeedToBeUpdated\r\n              }\r\n              workoutIdsThatNeedToBeUpdated={workoutIdsThatNeedToBeUpdated}\r\n              // updateWorkouts={updateWorkouts}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Music\" key=\"3\">\r\n            <NewChallengeMusicTab\r\n              musics={musics}\r\n              setMusics={setMusics}\r\n              update={true}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Additional\" key=\"4\">\r\n            <NewChallengeAdditionalTab\r\n              results={results}\r\n              setResults={setResults}\r\n              allProducts={allProducts}\r\n              setAllProducts={setAllProducts}\r\n              makePublic={makePublic}\r\n              setMakePublic={setMakePublic}\r\n              allowComments={allowComments}\r\n              setAllowComments={setAllowComments}\r\n              allowReviews={allowReviews}\r\n              setAllowReviews={setAllowReviews}\r\n              additionalProducts={additionalProducts}\r\n              setAdditionalProducts={setAdditionalProducts}\r\n              informationList={informationList}\r\n              setInformationList={setInformationList}\r\n              // createChallenge={createChallengeButton}\r\n              update={true}\r\n              updateChallenge={updateChallengeButton}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateChallenge;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutTab.js",["791","792","793","794","795"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWorkoutPanel.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Home\\Hero.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\UserUpdate.js",["796","797"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\ChallengeProfile\\ChallengeProfileMobile.js",["798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814"],"import Navbar from \"../Navbar\";\r\nimport \"./challengeProfileMobile.css\";\r\n\r\nfunction ChallengeProfileMobile(props) {\r\n  const {\r\n    coverPhoto,\r\n    coverFeather,\r\n    subtract,\r\n    challengeName,\r\n    address,\r\n    text9,\r\n    stars,\r\n    gemiddeld,\r\n    kort,\r\n    group9893,\r\n    trainers,\r\n    rectangle1886,\r\n    name,\r\n    goals,\r\n    conditionIcon,\r\n    conditie,\r\n    dumbellIcon,\r\n    kracht,\r\n    afvallen,\r\n    bodyFocus,\r\n    heelLichaam,\r\n    equipment,\r\n    kettlebell,\r\n    results,\r\n    text10,\r\n    info,\r\n    infoIcon5,\r\n    infoIcon6,\r\n    address2,\r\n    text11,\r\n    overlapGroup9,\r\n    week1,\r\n    foundation6Days,\r\n    polygon13,\r\n    overlapGroup8,\r\n    week2,\r\n    text12,\r\n    polygon132,\r\n    text13,\r\n    subscription,\r\n    helpIcon,\r\n    polygon14,\r\n    text14,\r\n    oneTimeChallenge,\r\n    noSubscription,\r\n    billedOnce,\r\n    price,\r\n    repeatSave,\r\n    spanText,\r\n    spanText2,\r\n    spanText3,\r\n    address3,\r\n    billedMonthly,\r\n    price2,\r\n    week,\r\n    repeatSave2,\r\n    spanText4,\r\n    spanText5,\r\n    spanText6,\r\n    address4,\r\n    billedMonthly2,\r\n    price3,\r\n    week3,\r\n    overlapGroup82,\r\n    startNow2,\r\n    comments,\r\n    rectangle1869,\r\n    rectangle1870,\r\n    name2,\r\n    apr082021,\r\n    filipWowILikeIt,\r\n    apr032021,\r\n    postComment,\r\n  } = props;\r\n\r\n  return (\r\n    <div style={{ background: \"#171e27\" }}>\r\n      <Navbar />\r\n      <div className=\"mob-container-center-horizontal\">\r\n        <div className=\"mob-challenge-phone-unauthorized-user screen\">\r\n          <div className=\"mob-flex-col\">\r\n            <div className=\"mob-overlap-group\">\r\n              <img className=\"mob-cover-photo\" src={coverPhoto} />\r\n              <img className=\"mob-cover-feather\" src={coverFeather} />\r\n              <img className=\"mob-subtract\" src={subtract} />\r\n              <div className=\"mob-cover-content\">\r\n                <div className=\"mob-text-1 mob-valign-text-middle\">\r\n                  {challengeName}\r\n                </div>\r\n                <div className=\"mob-overlap-group8-1\">\r\n                  <div className=\"mob-rectangle-1863\"></div>\r\n                </div>\r\n                <div className=\"mob-address mob-valign-text-middle poppins-medium-sandy-brown-14px\">\r\n                  {address}\r\n                </div>\r\n                <p className=\"mob-text-2 poppins-normal-white-16px\">{text9}</p>\r\n              </div>\r\n              <img className=\"mob-stars\" src={stars} />\r\n              <div className=\"mob-rectangle-1864\"></div>\r\n              <div className=\"mob-rectangle-1865\"></div>\r\n              <div className=\"mob-gemiddeld mob-valign-text-middle poppins-normal-white-16px\">\r\n                {gemiddeld}\r\n              </div>\r\n              <div className=\"mob-kort mob-valign-text-middle poppins-normal-white-16px\">\r\n                {kort}\r\n              </div>\r\n              <img className=\"mob-group-9893\" src={group9893} />\r\n            </div>\r\n            <div className=\"mob-trainers poppins-light-sonic-silver-14px\">\r\n              {trainers}\r\n            </div>\r\n            <div className=\"mob-overlap-group7\">\r\n              <img className=\"mob-rectangle-1886\" src={rectangle1886} />\r\n              <div className=\"mob-name poppins-normal-crusta-17px\">{name}</div>\r\n            </div>\r\n            <div className=\"mob-rectangle-1884\"></div>\r\n            <div className=\"mob-goals poppins-light-sonic-silver-14px\">\r\n              {goals}\r\n            </div>\r\n            <div className=\"mob-flex-row\">\r\n              <div className=\"mob-overlap-group2\">\r\n                <img className=\"mob-condition-icon\" src={conditionIcon} />\r\n                <div className=\"mob-conditie mob-valign-text-middle poppins-light-white-14px\">\r\n                  {conditie}\r\n                </div>\r\n              </div>\r\n              <div className=\"mob-overlap-group3\">\r\n                <img className=\"mob-dumbell-icon\" src={dumbellIcon} />\r\n                <div className=\"mob-kracht mob-valign-text-middle poppins-light-white-14px\">\r\n                  {kracht}\r\n                </div>\r\n              </div>\r\n              <div className=\"mob-overlap-group4\">\r\n                <img className=\"mob-vector\" src=\"vector-3.svg\" />\r\n                <div className=\"mob-afvallen mob-valign-text-middle poppins-light-white-14px\">\r\n                  {afvallen}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mob-rectangle-1887\"></div>\r\n            <div className=\"mob-flex-col-item poppins-light-sonic-silver-14px\">\r\n              {bodyFocus}\r\n            </div>\r\n            <div className=\"mob-overlap-group5\">\r\n              <div className=\"mob-heel-lichaam mob-valign-text-middle poppins-light-white-14px\">\r\n                {heelLichaam}\r\n              </div>\r\n            </div>\r\n            <div className=\"mob-rectangle-188\"></div>\r\n            <div className=\"mob-flex-col-item poppins-light-sonic-silver-14px\">\r\n              {equipment}\r\n            </div>\r\n            <div className=\"mob-overlap-group1\">\r\n              <div className=\"mob-kettlebell mob-valign-text-middle poppins-light-white-14px\">\r\n                {kettlebell}\r\n              </div>\r\n            </div>\r\n            <div className=\"mob-rectangle-188\"></div>\r\n            <div className=\"mob-flex-col-item poppins-light-sonic-silver-14px\">\r\n              {results}\r\n            </div>\r\n            <div className=\"mob-overlap-group6\">\r\n              <div className=\"mob-rectangle-1886-1\"></div>\r\n              <p className=\"mob-text-3 poppins-light-white-14px\">{text10}</p>\r\n            </div>\r\n            <div className=\"mob-info poppins-light-sonic-silver-14px\">\r\n              {info}\r\n            </div>\r\n          </div>\r\n          <div className=\"mob-flex-row-1\">\r\n            <div className=\"mob-flex-col-1\">\r\n              <img className=\"mob-info-icon-5\" src={infoIcon5} />\r\n              <img className=\"mob-info-icon-6\" src={infoIcon6} />\r\n            </div>\r\n            <p className=\"mob-address-1 poppins-light-white-14px\">{address2}</p>\r\n          </div>\r\n          <div className=\"mob-flex-col-2\">\r\n            <div className=\"mob-rectangle-1888\"></div>\r\n            <div className=\"mob-your-personal-journey\">\r\n              <div className=\"mob-text-4 poppins-light-sonic-silver-14px\">\r\n                {text11}\r\n              </div>\r\n              <div className=\"mob-week-1\">\r\n                <div className=\"mob-overlap-group8-2\">\r\n                  <div className=\"mob-flex-col-3\">\r\n                    <div\r\n                      className=\"mob-overlap-group9-1\"\r\n                      style={{ backgroundImage: `url(${overlapGroup9})` }}\r\n                    >\r\n                      <div className=\"mob-week-1-1 poppins-normal-white-14px\">\r\n                        {week1}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mob-foundation-6-days poppins-light-white-16px\">\r\n                      {foundation6Days}\r\n                    </div>\r\n                  </div>\r\n                  <img className=\"mob-polygon-13\" src={polygon13} />\r\n                </div>\r\n              </div>\r\n              <div className=\"mob-week-2\">\r\n                <div className=\"mob-overlap-group10-1\">\r\n                  <div className=\"mob-flex-row-2\">\r\n                    <div className=\"mob-flex-col-4\">\r\n                      <div\r\n                        className=\"mob-overlap-group8-3\"\r\n                        style={{ backgroundImage: `url(${overlapGroup8})` }}\r\n                      >\r\n                        <div className=\"mob-week-2-1 poppins-normal-white-14px\">\r\n                          {week2}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"mob-text-5 poppins-light-white-16px\">\r\n                        {text12}\r\n                      </div>\r\n                    </div>\r\n                    <img className=\"mob-polygon-13-1\" src={polygon132} />\r\n                  </div>\r\n                  <p className=\"mob-text-6 mob-valign-text-middlepoppins-light-silver-15px\">\r\n                    {text13}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"mob-rectangle-1868\"></div>\r\n            </div>\r\n            <div className=\"mob-subscription\">\r\n              <div className=\"mob-flex-row-3\">\r\n                <div className=\"mob-subscription-1 poppins-light-sonic-silver-14px\">\r\n                  {subscription}\r\n                </div>\r\n                <img className=\"mob-help-icon\" src={helpIcon} />\r\n                <img className=\"mob-polygon-14\" src={polygon14} />\r\n              </div>\r\n              <div className=\"mob-flex-col-5\">\r\n                <p className=\"mob-text-7\">{text14}</p>\r\n                <div className=\"mob-overlap-group11\">\r\n                  <div className=\"mob-flex-col-6\">\r\n                    <div className=\"mob-one-time-challenge poppins-medium-white-19px\">\r\n                      {oneTimeChallenge}\r\n                    </div>\r\n                    <div className=\"mob-no-subscription poppins-light-white-14px\">\r\n                      {noSubscription}\r\n                    </div>\r\n                    <div className=\"mob-billed-once poppins-light-star-dust-10px\">\r\n                      {billedOnce}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"mob-price poppins-medium-white-20px\">\r\n                    {price}\r\n                  </div>\r\n                </div>\r\n                <div className=\"mob-group-990\">\r\n                  <div className=\"mob-overlap-group9-2 border-2px-tango\">\r\n                    <div className=\"mob-flex-col-7\">\r\n                      <div className=\"mob-repeat-save poppins-medium-white-19px\">\r\n                        {repeatSave}\r\n                      </div>\r\n                      <div className=\"mob-overlap-group8\">\r\n                        <div className=\"mob-save-up-to poppins-medium-white-9px\">\r\n                          <span className=\"mob-poppins-medium-white-9px\">\r\n                            {spanText}\r\n                          </span>\r\n                          <span className=\"mob-span1 poppins-medium-white-16px\">\r\n                            {spanText2}\r\n                          </span>\r\n                          <span className=\"mob-span2 poppins-medium-white-14px\">\r\n                            {spanText3}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"mob-address-2 poppins-light-white-14px\">\r\n                        {address3}\r\n                      </div>\r\n                      <div className=\"mob-billed-monthly poppins-light-star-dust-10px\">\r\n                        {billedMonthly}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mob-flex-col-8\">\r\n                      <div className=\"mob-price-1 poppins-medium-white-20px\">\r\n                        {price2}\r\n                      </div>\r\n                      <div className=\"mob-week poppins-light-white-9px\">\r\n                        {week}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mob-group-990\">\r\n                  <div className=\"mob-overlap-group10-2\">\r\n                    <div className=\"mob-flex-col-9\">\r\n                      <div className=\"mob-repeat-save poppins-medium-white-19px\">\r\n                        {repeatSave2}\r\n                      </div>\r\n                      <div className=\"mob-overlap-group8\">\r\n                        <div className=\"mob-save-up-to poppins-medium-white-9px\">\r\n                          <span className=\"mob-poppins-medium-white-9px\">\r\n                            {spanText4}\r\n                          </span>\r\n                          <span className=\"mob-span1 poppins-medium-white-16px\">\r\n                            {spanText5}\r\n                          </span>\r\n                          <span className=\"mob-span2 poppins-medium-white-14px\">\r\n                            {spanText6}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"mob-address-3 poppins-light-white-14px\">\r\n                        {address4}\r\n                      </div>\r\n                      <div className=\"mob-billed-monthly poppins-light-star-dust-10px\">\r\n                        {billedMonthly2}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mob-flex-col-10\">\r\n                      <div className=\"mob-price-2 poppins-medium-white-20px\">\r\n                        {price3}\r\n                      </div>\r\n                      <div className=\"mob-week-3 poppins-light-white-9px\">\r\n                        {week3}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mob-group-9904\">\r\n                  <div\r\n                    className=\"mob-overlap-group8-4\"\r\n                    style={{ backgroundImage: `url(${overlapGroup82})` }}\r\n                  >\r\n                    <div className=\"mob-start-now-1 poppins-medium-white-16px\">\r\n                      {startNow2}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mob-rectangle-1869\"></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mob-comments-group\">\r\n              <div className=\"mob-comments poppins-light-granite-gray-14px\">\r\n                {comments}\r\n              </div>\r\n              <div className=\"mob-flex-row-4\">\r\n                <div className=\"mob-flex-col-11\">\r\n                  <img className=\"mob-rectangle-1869-1\" src={rectangle1869} />\r\n                  <img className=\"mob-rectangle-1870\" src={rectangle1870} />\r\n                </div>\r\n                <div className=\"mob-flex-col-12\">\r\n                  <p className=\"mob-name-1 poppins-light-white-16px\">{name2}</p>\r\n                  <div className=\"mob-apr-08-2021 poppins-light-gunsmoke-11px\">\r\n                    {apr082021}\r\n                  </div>\r\n                  <p className=\"mob-filip-wow-i-like-it poppins-light-white-16px\">\r\n                    {filipWowILikeIt}\r\n                  </p>\r\n                  <div className=\"mob-apr-03-2021 poppins-light-gunsmoke-11px\">\r\n                    {apr032021}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"mob-flex-col-13\">\r\n                <div className=\"mob-rectangle-1838\"></div>\r\n                <div className=\"mob-overlap-group12\">\r\n                  <div className=\"mob-post-comment poppins-normal-tango-16px\">\r\n                    {postComment}\r\n                  </div>\r\n                  <div className=\"mob-rectangle-1839 border-1px-tango\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChallengeProfileMobile;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Player\\Player.js",["815","816","817","818"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\trainers.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\pages\\Pricing.js",["819","820"],"import React, { useState } from \"react\";\r\nimport \"../assets/home.css\";\r\nimport \"../assets/trainers.css\";\r\nimport \"../assets/pricing.css\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\n// import { Link } from \"react-router-dom\";\r\n// import {\r\n//   ArrowRightOutlined,\r\n//   CheckOutlined,\r\n//   EuroOutlined,\r\n//   DoubleRightOutlined,\r\n//   PlayCircleOutlined,\r\n// } from \"@ant-design/icons\";\r\n// import ModalVideo from \"react-modal-video\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport NewWelcome from \"./NewWelcome\";\r\nimport \"react-modal-video/scss/modal-video.scss\";\r\nfunction Pricing() {\r\n  // const [isOpen, setIsOpen] = useState(false);\r\n  const [t] = useTranslation();\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <NewWelcome onPricingPage={true} />\r\n      {/* video modal */}\r\n      {/* <ModalVideo\r\n        channel=\"youtube\"\r\n        autoplay\r\n        isOpen={isOpen}\r\n        videoId=\"https://youtu.be/HMApf8yWUtg\"\r\n        onClose={() => setIsOpen(false)}\r\n      />\r\n      <div className=\"pricing-row-1\">\r\n        <h1 className=\"font-heading-white\">{t(\"pricing.great\")}</h1>\r\n        <h2 className=\"font-subheading-white\">{t(\"pricing.p\")}</h2>\r\n        <div className=\"pricing-row-1-cards-containers\"> */}\r\n      {/* card 1 */}\r\n      {/* <div className=\"two-cards\">\r\n            <div className=\"pricing-row-1-card\">\r\n              <h1 className=\"font-subheading-black\"> {t(\"pricing.c3\")}</h1>\r\n              <div className=\"home-row-2-col-2-box\">\r\n                <CheckOutlined\r\n                  style={{\r\n                    color: \"#ff7700\",\r\n                    fontSize: \"2.5rem\",\r\n                    paddingRight: \"0.5rem\",\r\n                  }}\r\n                />\r\n                <span className=\"home-text font-paragraph-black\">\r\n                  {t(\"pricing.c3_months\")}\r\n                </span>\r\n              </div>\r\n              <div className=\"home-row-2-col-2-box\">\r\n                <CheckOutlined\r\n                  style={{\r\n                    color: \"#ff7700\",\r\n                    fontSize: \"2.5rem\",\r\n                    paddingRight: \"0.5rem\",\r\n                  }}\r\n                />\r\n                <span className=\"home-text font-paragraph-black\">\r\n                  {t(\"pricing.save\")} 20%\r\n                </span>\r\n              </div>\r\n              <div className=\"pricing-card-price \">\r\n                <h1 className=\"font-heading-black\">€6 / {t(\"pricing.week\")}</h1>\r\n                <p className=\"font-subheading-black\">\r\n                  {t(\"pricing.c3_billed\")}\r\n                </p>\r\n              </div>\r\n            </div> */}\r\n      {/* card 2 */}\r\n      {/* <div className=\"pricing-row-1-card most-popular-card\">\r\n              <div className=\"most-popular-tag\">{t(\"pricing.most\")}</div>\r\n              <h1 className=\"font-subheading-black\">{t(\"pricing.c12\")}</h1>\r\n              <div className=\"home-row-2-col-2-box\">\r\n                <CheckOutlined\r\n                  style={{\r\n                    color: \"#ff7700\",\r\n                    fontSize: \"2.5rem\",\r\n                    paddingRight: \"0.5rem\",\r\n                  }}\r\n                />\r\n                <span className=\"home-text font-paragraph-black\">\r\n                  {t(\"pricing.c12_months\")}\r\n                </span>\r\n              </div>\r\n              <div className=\"home-row-2-col-2-box\">\r\n                <CheckOutlined\r\n                  style={{\r\n                    color: \"#ff7700\",\r\n                    fontSize: \"2.5rem\",\r\n                    paddingRight: \"0.5rem\",\r\n                  }}\r\n                />\r\n                <span className=\"home-text font-paragraph-black\">\r\n                  {t(\"pricing.save\")} 40%\r\n                </span>\r\n              </div>\r\n              <div className=\"pricing-card-price\">\r\n                <h1 className=\"font-heading-black\">\r\n                  €4.5 / {t(\"pricing.week\")}\r\n                </h1>\r\n                <p className=\"font-subheading-black\">\r\n                  {t(\"pricing.c12_billed\")}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div> */}\r\n      {/* card 3 */}\r\n      {/* <div className=\"pricing-row-1-card\">\r\n            <h1 className=\"font-subheading-black\">{t(\"pricing.c1\")}</h1>\r\n            <div className=\"home-row-2-col-2-box\">\r\n              <CheckOutlined\r\n                style={{\r\n                  color: \"#ff7700\",\r\n                  fontSize: \"2.5rem\",\r\n                  paddingRight: \"0.5rem\",\r\n                }}\r\n              />\r\n              <span className=\"home-text font-paragraph-black\">\r\n                {t(\"pricing.c1_months\")}\r\n              </span>\r\n            </div>\r\n            <div className=\"pricing-card-price\">\r\n              <h1 className=\"font-heading-black\">€7.5 / {t(\"pricing.week\")}</h1>\r\n              <p className=\"font-subheading-black\">{t(\"pricing.c1_billed\")}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"money-back-guarantee font-paragraph-white\">\r\n          <EuroOutlined /> {t(\"pricing.money_back\")}\r\n        </div>\r\n        <div style={{ marginTop: \"50px\" }}>\r\n          {localStorage.getItem(\"jwtToken\") ? (\r\n            <Link className=\"home-button\" to=\"/choose-plan\">\r\n              <span className=\"home-button-text font-paragraph-white\">\r\n                Choose Plan <ArrowRightOutlined />\r\n              </span>\r\n            </Link>\r\n          ) : (\r\n            <Link className=\"home-button\" to=\"/new\">\r\n              <span className=\"home-button-text font-paragraph-white\">\r\n                {t(\"pricing.start_now\")} <ArrowRightOutlined />\r\n              </span>\r\n            </Link>\r\n          )}\r\n        </div>\r\n      </div> */}\r\n      {/* row 3 */}\r\n      {/* <div className=\"pricing-row-3-container\">\r\n        <div className=\"pricing-row-3\">\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.free\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.free_week\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.keep_track\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.choose\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.adapts\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.for_starters\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.motivating\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.choose_right\")}\r\n          </div>\r\n          <div className=\"pricing-row-3-box font-paragraph-white\">\r\n            <DoubleRightOutlined\r\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\r\n            />{\" \"}\r\n            {t(\"pricing.earn_points\")}\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n      {/* row 3 ends */}\r\n      {/* 6th row */}\r\n      {/* <div className=\"home-row-6\">\r\n        <h1 className=\"home-row-6-heading font-heading-black\">\r\n          {t(\"pricing.get_motivated\")}\r\n        </h1>\r\n        <p style={{ fontSize: \"18px\" }} className=\"font-paragraph-black\">\r\n          {t(\"pricing.start_today_with\")}\r\n        </p>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            className=\"home-row-6-video-container-box pricing-video-box\"\r\n            onClick={() => {\r\n              setIsOpen(true);\r\n            }}\r\n          >\r\n            <div className=\"pricing-video-box-overlay\"></div>\r\n            <div\r\n              className=\"home-row-6-text font-paragraph-white\"\r\n              style={{ textAlign: \"left\" }}\r\n            >\r\n              <PlayCircleOutlined className=\"play-icon\" /> Waarom werkt Real\r\n              Challenge zo goed voor Remko?\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n      {/* 6th row */}\r\n      {/* 7th row */}\r\n      {/* <div className=\"home-row-7 pricing-background\">\r\n        <div className=\"home-row-7-container\">\r\n          <div className=\"home-row-7-container-text\">\r\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\r\n              {t(\"pricing.start_today\")}\r\n            </h2>\r\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\r\n              {t(\"pricing.your_set\")}\r\n            </h1>\r\n            <p\r\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\r\n              className=\"font-paragraph-black\"\r\n            >\r\n              {t(\"pricing.where_and_whenever_you\")}\r\n            </p>\r\n            <Link className=\"home-button\" to=\"/new\">\r\n              <span className=\"home-button-text font-paragraph-white\">\r\n                {t(\"pricing.set_your_goal\")}\r\n                <ArrowRightOutlined />\r\n              </span>\r\n            </Link>\r\n            <p style={{ paddingTop: \"10px\" }} className=\"font-paragraph-black\">\r\n              {t(\"pricing.less_than\")}{\" \"}\r\n              <Link to=\"/all-challenges\" style={{ color: \"#ff7700\" }}>\r\n                {t(\"pricing.see_all\")}\r\n              </Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n      {/* 7th row */}\r\n      {/* <div className=\"pricing-faqs\">\r\n        <h1 className=\"pricing-faqs-heading font-subheading-white\">FAQS</h1>\r\n        <div className=\"pricing-faqs-container\">\r\n          <div className=\"pricing-faqs-box\">\r\n            <h1 className=\"font-paragraph-white\">\r\n              Excepteur sint occaecat cupidatat non proident\r\n            </h1>\r\n            <p className=\"font-paragraph-white\">\r\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\r\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\r\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\r\n              nulla pariatur.\r\n            </p>\r\n          </div>\r\n          <div className=\"pricing-faqs-box\">\r\n            <h1 className=\"font-paragraph-white\">\r\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n            </h1>\r\n            <p className=\"font-paragraph-white\">\r\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\r\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\r\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\r\n              sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n            </p>\r\n          </div>\r\n          <div className=\"pricing-faqs-box\">\r\n            <h1 className=\"font-paragraph-white\">\r\n              Duis aute irure dolor in reprehenderit\r\n            </h1>\r\n            <p className=\"font-paragraph-white\">\r\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\r\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\r\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\r\n              nulla pariatur.\r\n            </p>\r\n          </div>\r\n          <div className=\"pricing-faqs-box\">\r\n            <h1 className=\"font-paragraph-white\">\r\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\r\n            </h1>\r\n            <p className=\"font-paragraph-white\">\r\n              Duis aute irure dolor in reprehenderit in voluptate velit esse\r\n              cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n              cupidatat non proident, sunt in culpa qui officia deserunt mollit\r\n              anim id est laborum.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      9th row */}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pricing;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Payment\\MollieRedirectPage.js",["821"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\UserDashboard\\CommentSection.js",["822","823"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { CloseOutlined, UserOutlined } from \"@ant-design/icons\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { Input, Button } from \"antd\";\r\nimport { addNewComment } from \"../../services/posts\";\r\nimport { addNewCommunityPostComment } from \"../../services/communityPosts\";\r\nimport Modal from \"react-modal\";\r\nimport \"../../assets/challengeReviewModal.css\";\r\nimport moment from \"moment\";\r\nimport { userInfoContext } from \"../../contexts/UserStore\";\r\nimport TopIcon from \"../../assets/icons/comment-header-icon.svg\";\r\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\r\nimport NoCommentBack from \"../../assets/icons/no-comments-background.svg\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\n\r\nfunction CommentSection({ post, updatePosts, visible, setVisible, community }) {\r\n  const userInfo = useContext(userInfoContext)[0];\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [allComments, setAllComments] = useState([]);\r\n  const { width } = useWindowDimensions();\r\n  const customStyles = {\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      width: width < 700 ? \"90%\" : \"60%\",\r\n      overflow: \"hidden\",\r\n      // height:\"600px\"\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(post);\r\n    setAllComments(post.comments ? post.comments : []);\r\n  }, [post]);\r\n\r\n  const addComment = async () => {\r\n    if (newComment.length > 0) {\r\n      if (community) {\r\n        var n = await addNewCommunityPostComment(post._id, {\r\n          text: newComment,\r\n        });\r\n      } else {\r\n        var n = await addNewComment(post._id, { text: newComment });\r\n      }\r\n\r\n      console.log(n);\r\n      setAllComments(n);\r\n      setNewComment(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      isOpen={visible}\r\n      onRequestClose={() => {\r\n        setVisible(false);\r\n        updatePosts(post._id, allComments);\r\n      }}\r\n      style={customStyles}\r\n      contentLabel=\"Comments\"\r\n    >\r\n      <div className=\"challenge-review-modal-header\">\r\n        <span>\r\n          <img src={TopIcon} alt=\"\" />\r\n          <span className=\"font-paragraph-white\" style={{ marginLeft: \"10px\" }}>\r\n            COMMENTS\r\n          </span>\r\n        </span>\r\n        <CloseOutlined\r\n          style={{ color: \"#fff\", fontSize: \"26px\", cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            setVisible(false);\r\n            updatePosts(post._id, allComments);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"challenge-review-modal\">\r\n        <Scrollbars style={{ height: \"400px\" }}>\r\n          {allComments.length > 0 ? (\r\n            allComments.map((comment) => (\r\n              // <div className=\"challenge-profile-comment font-paragraph-white\">\r\n              //   <span className=\"challenge-profile-comment-username\">\r\n              //     <UserOutlined /> {comment.username}\r\n              //   </span>\r\n              //   <span>{comment.text}</span>\r\n              // </div>\r\n              <div\r\n                className=\"comment-container\"\r\n                style={{ marginBottom: width < 700 ? \"20px\" : \"10px\" }}\r\n              >\r\n                <div\r\n                  className=\"comment-container-c1 font-paragraph-white\"\r\n                  style={{\r\n                    alignItems: \"flex-start\",\r\n                    flexDirection: width < 700 ? \"column\" : \"row\",\r\n                  }}\r\n                >\r\n                  <Avatar src={comment.user.avatarLink} shape=\"square\" />{\" \"}\r\n                  <span\r\n                    style={{\r\n                      marginLeft: \"5px\",\r\n                      fontWeight: \"bolder\",\r\n                      fontSize: \"16px\",\r\n                    }}\r\n                  >\r\n                    {comment.user.username}\r\n                  </span>\r\n                  <div style={{ paddingLeft: width < 700 ? \"0\" : \"20px\" }}>\r\n                    <div\r\n                      className=\"comment-container-c2 font-paragraph-white\"\r\n                      style={{\r\n                        padding: 0,\r\n                        fontWeight: \"200\",\r\n                        fontSize: \"14px\",\r\n                      }}\r\n                    >\r\n                      {comment.text}\r\n                    </div>\r\n                    <div\r\n                      className=\"font-paragraph-white comment-container-c3\"\r\n                      style={{ color: \"#82868b\", padding: 0 }}\r\n                    >\r\n                      {moment(comment.createdAt).format(\"MMM, Do YY\")}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <img\r\n              src={NoCommentBack}\r\n              alt=\"\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                transform: \"translate(-50%, -50%)\",\r\n              }}\r\n            />\r\n          )}\r\n        </Scrollbars>\r\n        <div style={{ marginTop: \"10px\" }}>\r\n          <div style={{ display: \"flex\", alignItems: \"flex-start\" }}>\r\n            <Avatar\r\n              src={`${process.env.REACT_APP_SERVER}/api${userInfo.avatar}`}\r\n              shape=\"square\"\r\n              style={{ marginRight: \"10px\" }}\r\n            />{\" \"}\r\n            <Input.TextArea\r\n              rows=\"3\"\r\n              placeholder=\"Enter New Comment\"\r\n              value={newComment}\r\n              onChange={(e) => setNewComment(e.target.value)}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n              margin: \"10px 10px 10px 40px\",\r\n            }}\r\n          >\r\n            <Button\r\n              className=\"font-paragraph-white\"\r\n              style={{\r\n                padding: \"3px 20px\",\r\n                color: \"#fff\",\r\n                backgroundColor: \"transparent\",\r\n                border: \"2px solid #ff7700\",\r\n                borderRadius: \"0\",\r\n              }}\r\n              onClick={() => {\r\n                setVisible(false);\r\n                updatePosts(post._id, allComments);\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              className=\"common-orange-button font-paragraph-white\"\r\n              style={{ padding: \"3px 10px\", borderRadius: \"0\" }}\r\n              onClick={() => addComment()}\r\n            >\r\n              New Comment\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CommentSection;\r\n","D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\MediaManager\\MediaFileUploader.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\components\\Admin\\RecipeManager\\EditTypeName.js",["824"],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\faqs.js",[],"D:\\AllFiverrProjects\\realchallenge\\realchallenge\\src\\services\\createChallenge\\tags.js",[],{"ruleId":"825","severity":1,"message":"826","line":3,"column":10,"nodeType":"827","messageId":"828","endLine":3,"endColumn":28},{"ruleId":"825","severity":1,"message":"829","line":4,"column":17,"nodeType":"827","messageId":"828","endLine":4,"endColumn":23},{"ruleId":"825","severity":1,"message":"830","line":4,"column":25,"nodeType":"827","messageId":"828","endLine":4,"endColumn":30},{"ruleId":"831","replacedBy":"832"},{"ruleId":"833","replacedBy":"834"},{"ruleId":"825","severity":1,"message":"835","line":9,"column":3,"nodeType":"827","messageId":"828","endLine":9,"endColumn":15},{"ruleId":"825","severity":1,"message":"836","line":38,"column":10,"nodeType":"827","messageId":"828","endLine":38,"endColumn":34},{"ruleId":"837","severity":1,"message":"838","line":76,"column":6,"nodeType":"839","endLine":76,"endColumn":15,"suggestions":"840"},{"ruleId":"837","severity":1,"message":"841","line":103,"column":6,"nodeType":"839","endLine":103,"endColumn":23,"suggestions":"842"},{"ruleId":"831","replacedBy":"843"},{"ruleId":"833","replacedBy":"844"},{"ruleId":"825","severity":1,"message":"845","line":3,"column":10,"nodeType":"827","messageId":"828","endLine":3,"endColumn":29},{"ruleId":"825","severity":1,"message":"846","line":4,"column":10,"nodeType":"827","messageId":"828","endLine":4,"endColumn":20},{"ruleId":"831","replacedBy":"847"},{"ruleId":"833","replacedBy":"848"},{"ruleId":"849","severity":1,"message":"850","line":101,"column":17,"nodeType":"851","endLine":101,"endColumn":36},{"ruleId":"831","replacedBy":"852"},{"ruleId":"833","replacedBy":"853"},{"ruleId":"837","severity":1,"message":"854","line":747,"column":5,"nodeType":"839","endLine":747,"endColumn":63,"suggestions":"855"},{"ruleId":"856","severity":1,"message":"857","line":756,"column":5,"nodeType":"858","messageId":"859","endLine":763,"endColumn":6},{"ruleId":"856","severity":1,"message":"857","line":767,"column":5,"nodeType":"858","messageId":"859","endLine":774,"endColumn":6},{"ruleId":"856","severity":1,"message":"857","line":781,"column":5,"nodeType":"858","messageId":"859","endLine":786,"endColumn":6},{"ruleId":"856","severity":1,"message":"857","line":790,"column":5,"nodeType":"858","messageId":"859","endLine":795,"endColumn":6},{"ruleId":"825","severity":1,"message":"860","line":810,"column":5,"nodeType":"827","messageId":"828","endLine":810,"endColumn":17},{"ruleId":"825","severity":1,"message":"861","line":6,"column":8,"nodeType":"827","messageId":"828","endLine":6,"endColumn":24},{"ruleId":"849","severity":1,"message":"850","line":69,"column":15,"nodeType":"851","endLine":72,"endColumn":17},{"ruleId":"849","severity":1,"message":"850","line":73,"column":15,"nodeType":"851","endLine":73,"endColumn":78},{"ruleId":"849","severity":1,"message":"850","line":75,"column":15,"nodeType":"851","endLine":75,"endColumn":74},{"ruleId":"849","severity":1,"message":"850","line":85,"column":19,"nodeType":"851","endLine":85,"endColumn":61},{"ruleId":"849","severity":1,"message":"850","line":93,"column":23,"nodeType":"851","endLine":93,"endColumn":71},{"ruleId":"849","severity":1,"message":"850","line":94,"column":23,"nodeType":"851","endLine":94,"endColumn":71},{"ruleId":"849","severity":1,"message":"850","line":122,"column":17,"nodeType":"851","endLine":122,"endColumn":63},{"ruleId":"849","severity":1,"message":"850","line":123,"column":17,"nodeType":"851","endLine":123,"endColumn":61},{"ruleId":"849","severity":1,"message":"850","line":212,"column":19,"nodeType":"851","endLine":215,"endColumn":21},{"ruleId":"849","severity":1,"message":"850","line":386,"column":19,"nodeType":"851","endLine":386,"endColumn":66},{"ruleId":"849","severity":1,"message":"850","line":405,"column":21,"nodeType":"851","endLine":405,"endColumn":67},{"ruleId":"849","severity":1,"message":"850","line":416,"column":13,"nodeType":"851","endLine":416,"endColumn":62},{"ruleId":"849","severity":1,"message":"850","line":417,"column":13,"nodeType":"851","endLine":417,"endColumn":62},{"ruleId":"849","severity":1,"message":"850","line":425,"column":17,"nodeType":"851","endLine":425,"endColumn":75},{"ruleId":"849","severity":1,"message":"850","line":426,"column":17,"nodeType":"851","endLine":426,"endColumn":75},{"ruleId":"831","replacedBy":"862"},{"ruleId":"833","replacedBy":"863"},{"ruleId":"831","replacedBy":"864"},{"ruleId":"833","replacedBy":"865"},{"ruleId":"831","replacedBy":"866"},{"ruleId":"833","replacedBy":"867"},{"ruleId":"831","replacedBy":"868"},{"ruleId":"833","replacedBy":"869"},{"ruleId":"825","severity":1,"message":"870","line":7,"column":8,"nodeType":"827","messageId":"828","endLine":7,"endColumn":14},{"ruleId":"825","severity":1,"message":"871","line":9,"column":3,"nodeType":"827","messageId":"828","endLine":9,"endColumn":15},{"ruleId":"825","severity":1,"message":"872","line":12,"column":3,"nodeType":"827","messageId":"828","endLine":12,"endColumn":15},{"ruleId":"825","severity":1,"message":"873","line":18,"column":25,"nodeType":"827","messageId":"828","endLine":18,"endColumn":30},{"ruleId":"825","severity":1,"message":"874","line":27,"column":8,"nodeType":"827","messageId":"828","endLine":27,"endColumn":28},{"ruleId":"825","severity":1,"message":"875","line":38,"column":20,"nodeType":"827","messageId":"828","endLine":38,"endColumn":31},{"ruleId":"837","severity":1,"message":"876","line":47,"column":6,"nodeType":"839","endLine":47,"endColumn":8,"suggestions":"877"},{"ruleId":"837","severity":1,"message":"878","line":36,"column":6,"nodeType":"839","endLine":36,"endColumn":8,"suggestions":"879"},{"ruleId":"825","severity":1,"message":"880","line":6,"column":3,"nodeType":"827","messageId":"828","endLine":6,"endColumn":10},{"ruleId":"825","severity":1,"message":"881","line":12,"column":10,"nodeType":"827","messageId":"828","endLine":12,"endColumn":22},{"ruleId":"825","severity":1,"message":"882","line":40,"column":20,"nodeType":"827","messageId":"828","endLine":40,"endColumn":31},{"ruleId":"825","severity":1,"message":"883","line":50,"column":10,"nodeType":"827","messageId":"828","endLine":50,"endColumn":17},{"ruleId":"825","severity":1,"message":"884","line":50,"column":19,"nodeType":"827","messageId":"828","endLine":50,"endColumn":29},{"ruleId":"825","severity":1,"message":"885","line":51,"column":10,"nodeType":"827","messageId":"828","endLine":51,"endColumn":25},{"ruleId":"825","severity":1,"message":"886","line":51,"column":27,"nodeType":"827","messageId":"828","endLine":51,"endColumn":45},{"ruleId":"825","severity":1,"message":"881","line":12,"column":10,"nodeType":"827","messageId":"828","endLine":12,"endColumn":22},{"ruleId":"825","severity":1,"message":"883","line":45,"column":10,"nodeType":"827","messageId":"828","endLine":45,"endColumn":17},{"ruleId":"825","severity":1,"message":"884","line":45,"column":19,"nodeType":"827","messageId":"828","endLine":45,"endColumn":29},{"ruleId":"825","severity":1,"message":"885","line":46,"column":10,"nodeType":"827","messageId":"828","endLine":46,"endColumn":25},{"ruleId":"825","severity":1,"message":"886","line":46,"column":27,"nodeType":"827","messageId":"828","endLine":46,"endColumn":45},{"ruleId":"837","severity":1,"message":"887","line":159,"column":6,"nodeType":"839","endLine":159,"endColumn":8,"suggestions":"888"},{"ruleId":"831","replacedBy":"889"},{"ruleId":"833","replacedBy":"890"},{"ruleId":"825","severity":1,"message":"882","line":23,"column":20,"nodeType":"827","messageId":"828","endLine":23,"endColumn":31},{"ruleId":"825","severity":1,"message":"891","line":10,"column":3,"nodeType":"827","messageId":"828","endLine":10,"endColumn":16},{"ruleId":"825","severity":1,"message":"892","line":18,"column":3,"nodeType":"827","messageId":"828","endLine":18,"endColumn":28},{"ruleId":"825","severity":1,"message":"893","line":25,"column":10,"nodeType":"827","messageId":"828","endLine":25,"endColumn":11},{"ruleId":"837","severity":1,"message":"894","line":63,"column":6,"nodeType":"839","endLine":63,"endColumn":16,"suggestions":"895"},{"ruleId":"825","severity":1,"message":"896","line":2,"column":43,"nodeType":"827","messageId":"828","endLine":2,"endColumn":49},{"ruleId":"825","severity":1,"message":"880","line":2,"column":57,"nodeType":"827","messageId":"828","endLine":2,"endColumn":64},{"ruleId":"825","severity":1,"message":"881","line":4,"column":26,"nodeType":"827","messageId":"828","endLine":4,"endColumn":38},{"ruleId":"825","severity":1,"message":"883","line":40,"column":10,"nodeType":"827","messageId":"828","endLine":40,"endColumn":17},{"ruleId":"825","severity":1,"message":"884","line":40,"column":19,"nodeType":"827","messageId":"828","endLine":40,"endColumn":29},{"ruleId":"825","severity":1,"message":"897","line":4,"column":3,"nodeType":"827","messageId":"828","endLine":4,"endColumn":16},{"ruleId":"825","severity":1,"message":"898","line":10,"column":8,"nodeType":"827","messageId":"828","endLine":10,"endColumn":23},{"ruleId":"825","severity":1,"message":"882","line":24,"column":20,"nodeType":"827","messageId":"828","endLine":24,"endColumn":31},{"ruleId":"831","replacedBy":"899"},{"ruleId":"833","replacedBy":"900"},{"ruleId":"837","severity":1,"message":"901","line":26,"column":6,"nodeType":"839","endLine":26,"endColumn":8,"suggestions":"902"},{"ruleId":"825","severity":1,"message":"830","line":2,"column":25,"nodeType":"827","messageId":"828","endLine":2,"endColumn":30},{"ruleId":"825","severity":1,"message":"903","line":2,"column":32,"nodeType":"827","messageId":"828","endLine":2,"endColumn":37},{"ruleId":"825","severity":1,"message":"904","line":2,"column":47,"nodeType":"827","messageId":"828","endLine":2,"endColumn":53},{"ruleId":"831","replacedBy":"905"},{"ruleId":"833","replacedBy":"906"},{"ruleId":"831","replacedBy":"907"},{"ruleId":"833","replacedBy":"908"},{"ruleId":"825","severity":1,"message":"909","line":24,"column":10,"nodeType":"827","messageId":"828","endLine":24,"endColumn":18},{"ruleId":"825","severity":1,"message":"910","line":24,"column":20,"nodeType":"827","messageId":"828","endLine":24,"endColumn":31},{"ruleId":"825","severity":1,"message":"911","line":25,"column":10,"nodeType":"827","messageId":"828","endLine":25,"endColumn":18},{"ruleId":"825","severity":1,"message":"912","line":25,"column":20,"nodeType":"827","messageId":"828","endLine":25,"endColumn":31},{"ruleId":"837","severity":1,"message":"913","line":33,"column":6,"nodeType":"839","endLine":33,"endColumn":8,"suggestions":"914"},{"ruleId":"915","severity":1,"message":"916","line":84,"column":5,"nodeType":"917","messageId":"918","endLine":115,"endColumn":6},{"ruleId":"831","replacedBy":"919"},{"ruleId":"833","replacedBy":"920"},{"ruleId":"921","severity":1,"message":"922","line":21,"column":3,"nodeType":"923","messageId":"924","endLine":21,"endColumn":10},{"ruleId":"825","severity":1,"message":"925","line":26,"column":10,"nodeType":"827","messageId":"828","endLine":26,"endColumn":14},{"ruleId":"825","severity":1,"message":"926","line":26,"column":16,"nodeType":"827","messageId":"828","endLine":26,"endColumn":23},{"ruleId":"837","severity":1,"message":"927","line":42,"column":6,"nodeType":"839","endLine":42,"endColumn":20,"suggestions":"928"},{"ruleId":"825","severity":1,"message":"929","line":17,"column":10,"nodeType":"827","messageId":"828","endLine":17,"endColumn":22},{"ruleId":"825","severity":1,"message":"930","line":18,"column":10,"nodeType":"827","messageId":"828","endLine":18,"endColumn":21},{"ruleId":"825","severity":1,"message":"931","line":18,"column":23,"nodeType":"827","messageId":"828","endLine":18,"endColumn":37},{"ruleId":"825","severity":1,"message":"932","line":19,"column":10,"nodeType":"827","messageId":"828","endLine":19,"endColumn":22},{"ruleId":"837","severity":1,"message":"933","line":27,"column":6,"nodeType":"839","endLine":27,"endColumn":8,"suggestions":"934"},{"ruleId":"825","severity":1,"message":"883","line":13,"column":10,"nodeType":"827","messageId":"828","endLine":13,"endColumn":17},{"ruleId":"837","severity":1,"message":"935","line":26,"column":13,"nodeType":"936","endLine":28,"endColumn":4},{"ruleId":"825","severity":1,"message":"829","line":2,"column":17,"nodeType":"827","messageId":"828","endLine":2,"endColumn":23},{"ruleId":"825","severity":1,"message":"904","line":2,"column":38,"nodeType":"827","messageId":"828","endLine":2,"endColumn":44},{"ruleId":"825","severity":1,"message":"937","line":6,"column":3,"nodeType":"827","messageId":"828","endLine":6,"endColumn":16},{"ruleId":"825","severity":1,"message":"938","line":1,"column":29,"nodeType":"827","messageId":"828","endLine":1,"endColumn":38},{"ruleId":"825","severity":1,"message":"939","line":29,"column":10,"nodeType":"827","messageId":"828","endLine":29,"endColumn":18},{"ruleId":"825","severity":1,"message":"940","line":29,"column":20,"nodeType":"827","messageId":"828","endLine":29,"endColumn":31},{"ruleId":"941","severity":1,"message":"942","line":36,"column":43,"nodeType":"943","messageId":"924","endLine":36,"endColumn":45},{"ruleId":"825","severity":1,"message":"883","line":13,"column":10,"nodeType":"827","messageId":"828","endLine":13,"endColumn":17},{"ruleId":"837","severity":1,"message":"944","line":35,"column":6,"nodeType":"839","endLine":35,"endColumn":22,"suggestions":"945"},{"ruleId":"825","severity":1,"message":"946","line":6,"column":10,"nodeType":"827","messageId":"828","endLine":6,"endColumn":23},{"ruleId":"825","severity":1,"message":"947","line":80,"column":36,"nodeType":"827","messageId":"828","endLine":80,"endColumn":63},{"ruleId":"825","severity":1,"message":"948","line":404,"column":29,"nodeType":"827","messageId":"828","endLine":404,"endColumn":30},{"ruleId":"825","severity":1,"message":"829","line":6,"column":10,"nodeType":"827","messageId":"828","endLine":6,"endColumn":16},{"ruleId":"837","severity":1,"message":"949","line":36,"column":6,"nodeType":"839","endLine":36,"endColumn":8,"suggestions":"950"},{"ruleId":"825","severity":1,"message":"951","line":7,"column":8,"nodeType":"827","messageId":"828","endLine":7,"endColumn":9},{"ruleId":"825","severity":1,"message":"871","line":6,"column":10,"nodeType":"827","messageId":"828","endLine":6,"endColumn":22},{"ruleId":"825","severity":1,"message":"952","line":6,"column":24,"nodeType":"827","messageId":"828","endLine":6,"endColumn":39},{"ruleId":"825","severity":1,"message":"836","line":55,"column":10,"nodeType":"827","messageId":"828","endLine":55,"endColumn":34},{"ruleId":"825","severity":1,"message":"953","line":58,"column":11,"nodeType":"827","messageId":"828","endLine":58,"endColumn":17},{"ruleId":"837","severity":1,"message":"954","line":68,"column":6,"nodeType":"839","endLine":68,"endColumn":8,"suggestions":"955"},{"ruleId":"956","severity":1,"message":"957","line":400,"column":17,"nodeType":"958","endLine":400,"endColumn":32},{"ruleId":"837","severity":1,"message":"959","line":115,"column":6,"nodeType":"839","endLine":115,"endColumn":8,"suggestions":"960"},{"ruleId":"849","severity":1,"message":"850","line":287,"column":21,"nodeType":"851","endLine":287,"endColumn":40},{"ruleId":"825","severity":1,"message":"873","line":2,"column":16,"nodeType":"827","messageId":"828","endLine":2,"endColumn":21},{"ruleId":"825","severity":1,"message":"829","line":2,"column":23,"nodeType":"827","messageId":"828","endLine":2,"endColumn":29},{"ruleId":"825","severity":1,"message":"961","line":83,"column":10,"nodeType":"827","messageId":"828","endLine":83,"endColumn":18},{"ruleId":"825","severity":1,"message":"882","line":134,"column":20,"nodeType":"827","messageId":"828","endLine":134,"endColumn":31},{"ruleId":"825","severity":1,"message":"962","line":25,"column":10,"nodeType":"827","messageId":"828","endLine":25,"endColumn":19},{"ruleId":"825","severity":1,"message":"963","line":36,"column":10,"nodeType":"827","messageId":"828","endLine":36,"endColumn":13},{"ruleId":"825","severity":1,"message":"882","line":51,"column":20,"nodeType":"827","messageId":"828","endLine":51,"endColumn":31},{"ruleId":"825","severity":1,"message":"964","line":53,"column":10,"nodeType":"827","messageId":"828","endLine":53,"endColumn":27},{"ruleId":"837","severity":1,"message":"876","line":113,"column":6,"nodeType":"839","endLine":113,"endColumn":16,"suggestions":"965"},{"ruleId":"825","severity":1,"message":"893","line":15,"column":12,"nodeType":"827","messageId":"828","endLine":15,"endColumn":13},{"ruleId":"825","severity":1,"message":"966","line":12,"column":10,"nodeType":"827","messageId":"828","endLine":12,"endColumn":25},{"ruleId":"825","severity":1,"message":"883","line":109,"column":10,"nodeType":"827","messageId":"828","endLine":109,"endColumn":17},{"ruleId":"825","severity":1,"message":"884","line":109,"column":19,"nodeType":"827","messageId":"828","endLine":109,"endColumn":29},{"ruleId":"837","severity":1,"message":"967","line":121,"column":6,"nodeType":"839","endLine":121,"endColumn":8,"suggestions":"968"},{"ruleId":"825","severity":1,"message":"969","line":166,"column":9,"nodeType":"827","messageId":"828","endLine":166,"endColumn":21},{"ruleId":"831","replacedBy":"970"},{"ruleId":"833","replacedBy":"971"},{"ruleId":"837","severity":1,"message":"972","line":42,"column":6,"nodeType":"839","endLine":42,"endColumn":8,"suggestions":"973"},{"ruleId":"825","severity":1,"message":"873","line":2,"column":10,"nodeType":"827","messageId":"828","endLine":2,"endColumn":15},{"ruleId":"825","severity":1,"message":"974","line":11,"column":8,"nodeType":"827","messageId":"828","endLine":11,"endColumn":19},{"ruleId":"825","severity":1,"message":"931","line":17,"column":23,"nodeType":"827","messageId":"828","endLine":17,"endColumn":37},{"ruleId":"825","severity":1,"message":"975","line":18,"column":24,"nodeType":"827","messageId":"828","endLine":18,"endColumn":39},{"ruleId":"825","severity":1,"message":"953","line":19,"column":11,"nodeType":"827","messageId":"828","endLine":19,"endColumn":17},{"ruleId":"825","severity":1,"message":"976","line":19,"column":19,"nodeType":"827","messageId":"828","endLine":19,"endColumn":24},{"ruleId":"825","severity":1,"message":"977","line":26,"column":10,"nodeType":"827","messageId":"828","endLine":26,"endColumn":17},{"ruleId":"825","severity":1,"message":"978","line":26,"column":19,"nodeType":"827","messageId":"828","endLine":26,"endColumn":29},{"ruleId":"825","severity":1,"message":"979","line":414,"column":10,"nodeType":"827","messageId":"828","endLine":414,"endColumn":18},{"ruleId":"825","severity":1,"message":"980","line":414,"column":20,"nodeType":"827","messageId":"828","endLine":414,"endColumn":31},{"ruleId":"825","severity":1,"message":"882","line":416,"column":20,"nodeType":"827","messageId":"828","endLine":416,"endColumn":31},{"ruleId":"837","severity":1,"message":"981","line":551,"column":6,"nodeType":"839","endLine":551,"endColumn":8,"suggestions":"982"},{"ruleId":"825","severity":1,"message":"938","line":1,"column":29,"nodeType":"827","messageId":"828","endLine":1,"endColumn":38},{"ruleId":"825","severity":1,"message":"939","line":29,"column":10,"nodeType":"827","messageId":"828","endLine":29,"endColumn":18},{"ruleId":"825","severity":1,"message":"940","line":29,"column":20,"nodeType":"827","messageId":"828","endLine":29,"endColumn":31},{"ruleId":"941","severity":1,"message":"942","line":36,"column":43,"nodeType":"943","messageId":"924","endLine":36,"endColumn":45},{"ruleId":"825","severity":1,"message":"845","line":3,"column":10,"nodeType":"827","messageId":"828","endLine":3,"endColumn":29},{"ruleId":"825","severity":1,"message":"846","line":4,"column":10,"nodeType":"827","messageId":"828","endLine":4,"endColumn":20},{"ruleId":"837","severity":1,"message":"983","line":50,"column":6,"nodeType":"839","endLine":50,"endColumn":8,"suggestions":"984"},{"ruleId":"825","severity":1,"message":"985","line":18,"column":22,"nodeType":"827","messageId":"828","endLine":18,"endColumn":35},{"ruleId":"825","severity":1,"message":"986","line":2,"column":18,"nodeType":"827","messageId":"828","endLine":2,"endColumn":21},{"ruleId":"825","severity":1,"message":"987","line":16,"column":8,"nodeType":"827","messageId":"828","endLine":16,"endColumn":12},{"ruleId":"921","severity":1,"message":"922","line":25,"column":3,"nodeType":"923","messageId":"924","endLine":25,"endColumn":10},{"ruleId":"921","severity":1,"message":"988","line":27,"column":3,"nodeType":"923","messageId":"924","endLine":27,"endColumn":9},{"ruleId":"837","severity":1,"message":"876","line":47,"column":6,"nodeType":"839","endLine":47,"endColumn":8,"suggestions":"989"},{"ruleId":"837","severity":1,"message":"990","line":101,"column":6,"nodeType":"839","endLine":101,"endColumn":78,"suggestions":"991"},{"ruleId":"825","severity":1,"message":"992","line":12,"column":10,"nodeType":"827","messageId":"828","endLine":12,"endColumn":14},{"ruleId":"825","severity":1,"message":"993","line":5,"column":9,"nodeType":"827","messageId":"828","endLine":5,"endColumn":15},{"ruleId":"837","severity":1,"message":"876","line":57,"column":6,"nodeType":"839","endLine":57,"endColumn":8,"suggestions":"994"},{"ruleId":"849","severity":1,"message":"850","line":164,"column":17,"nodeType":"851","endLine":167,"endColumn":19},{"ruleId":"825","severity":1,"message":"846","line":4,"column":10,"nodeType":"827","messageId":"828","endLine":4,"endColumn":20},{"ruleId":"837","severity":1,"message":"995","line":23,"column":6,"nodeType":"839","endLine":23,"endColumn":8,"suggestions":"996"},{"ruleId":"825","severity":1,"message":"882","line":18,"column":20,"nodeType":"827","messageId":"828","endLine":18,"endColumn":31},{"ruleId":"837","severity":1,"message":"997","line":44,"column":6,"nodeType":"839","endLine":44,"endColumn":12,"suggestions":"998"},{"ruleId":"825","severity":1,"message":"938","line":1,"column":29,"nodeType":"827","messageId":"828","endLine":1,"endColumn":38},{"ruleId":"825","severity":1,"message":"939","line":29,"column":10,"nodeType":"827","messageId":"828","endLine":29,"endColumn":18},{"ruleId":"825","severity":1,"message":"940","line":29,"column":20,"nodeType":"827","messageId":"828","endLine":29,"endColumn":31},{"ruleId":"941","severity":1,"message":"942","line":36,"column":43,"nodeType":"943","messageId":"924","endLine":36,"endColumn":45},{"ruleId":"825","severity":1,"message":"999","line":5,"column":22,"nodeType":"827","messageId":"828","endLine":5,"endColumn":26},{"ruleId":"837","severity":1,"message":"1000","line":25,"column":6,"nodeType":"839","endLine":25,"endColumn":8,"suggestions":"1001"},{"ruleId":"849","severity":1,"message":"850","line":96,"column":15,"nodeType":"851","endLine":96,"endColumn":62},{"ruleId":"849","severity":1,"message":"850","line":111,"column":25,"nodeType":"851","endLine":111,"endColumn":75},{"ruleId":"849","severity":1,"message":"850","line":112,"column":25,"nodeType":"851","endLine":112,"endColumn":75},{"ruleId":"849","severity":1,"message":"850","line":128,"column":17,"nodeType":"851","endLine":128,"endColumn":58},{"ruleId":"849","severity":1,"message":"850","line":134,"column":17,"nodeType":"851","endLine":134,"endColumn":75},{"ruleId":"849","severity":1,"message":"850","line":147,"column":15,"nodeType":"851","endLine":147,"endColumn":73},{"ruleId":"849","severity":1,"message":"850","line":153,"column":15,"nodeType":"851","endLine":153,"endColumn":69},{"ruleId":"849","severity":1,"message":"850","line":159,"column":15,"nodeType":"851","endLine":159,"endColumn":64},{"ruleId":"849","severity":1,"message":"850","line":195,"column":13,"nodeType":"851","endLine":195,"endColumn":64},{"ruleId":"849","severity":1,"message":"850","line":196,"column":13,"nodeType":"851","endLine":196,"endColumn":64},{"ruleId":"849","severity":1,"message":"850","line":221,"column":17,"nodeType":"851","endLine":221,"endColumn":67},{"ruleId":"849","severity":1,"message":"850","line":240,"column":19,"nodeType":"851","endLine":240,"endColumn":72},{"ruleId":"849","severity":1,"message":"850","line":254,"column":15,"nodeType":"851","endLine":254,"endColumn":63},{"ruleId":"849","severity":1,"message":"850","line":255,"column":15,"nodeType":"851","endLine":255,"endColumn":65},{"ruleId":"849","severity":1,"message":"850","line":352,"column":17,"nodeType":"851","endLine":352,"endColumn":77},{"ruleId":"849","severity":1,"message":"850","line":353,"column":17,"nodeType":"851","endLine":353,"endColumn":75},{"ruleId":"825","severity":1,"message":"938","line":1,"column":17,"nodeType":"827","messageId":"828","endLine":1,"endColumn":26},{"ruleId":"825","severity":1,"message":"1002","line":6,"column":10,"nodeType":"827","messageId":"828","endLine":6,"endColumn":11},{"ruleId":"825","severity":1,"message":"1003","line":6,"column":13,"nodeType":"827","messageId":"828","endLine":6,"endColumn":17},{"ruleId":"825","severity":1,"message":"893","line":7,"column":10,"nodeType":"827","messageId":"828","endLine":7,"endColumn":11},{"ruleId":"825","severity":1,"message":"1004","line":7,"column":13,"nodeType":"827","messageId":"828","endLine":7,"endColumn":17},{"ruleId":"825","severity":1,"message":"1005","line":2,"column":39,"nodeType":"827","messageId":"828","endLine":2,"endColumn":47},{"ruleId":"825","severity":1,"message":"1006","line":2,"column":49,"nodeType":"827","messageId":"828","endLine":2,"endColumn":53},{"ruleId":"825","severity":1,"message":"1007","line":21,"column":10,"nodeType":"827","messageId":"828","endLine":21,"endColumn":18},{"ruleId":"837","severity":1,"message":"894","line":54,"column":6,"nodeType":"839","endLine":54,"endColumn":29,"suggestions":"1008"},{"ruleId":"825","severity":1,"message":"1009","line":53,"column":7,"nodeType":"827","messageId":"828","endLine":53,"endColumn":21},{"ruleId":"825","severity":1,"message":"882","line":90,"column":20,"nodeType":"827","messageId":"828","endLine":90,"endColumn":31},{"ruleId":"825","severity":1,"message":"953","line":91,"column":11,"nodeType":"827","messageId":"828","endLine":91,"endColumn":17},{"ruleId":"837","severity":1,"message":"1010","line":182,"column":6,"nodeType":"839","endLine":182,"endColumn":8,"suggestions":"1011"},{"ruleId":"1012","severity":1,"message":"1013","line":227,"column":16,"nodeType":"936","messageId":"1014","endLine":227,"endColumn":18},{"ruleId":"825","severity":1,"message":"966","line":4,"column":3,"nodeType":"827","messageId":"828","endLine":4,"endColumn":18},{"ruleId":"825","severity":1,"message":"1015","line":6,"column":3,"nodeType":"827","messageId":"828","endLine":6,"endColumn":17},{"ruleId":"825","severity":1,"message":"1016","line":8,"column":10,"nodeType":"827","messageId":"828","endLine":8,"endColumn":22},{"ruleId":"825","severity":1,"message":"1017","line":9,"column":10,"nodeType":"827","messageId":"828","endLine":9,"endColumn":31},{"ruleId":"825","severity":1,"message":"1018","line":38,"column":10,"nodeType":"827","messageId":"828","endLine":38,"endColumn":20},{"ruleId":"825","severity":1,"message":"1019","line":45,"column":10,"nodeType":"827","messageId":"828","endLine":45,"endColumn":15},{"ruleId":"825","severity":1,"message":"1020","line":45,"column":17,"nodeType":"827","messageId":"828","endLine":45,"endColumn":25},{"ruleId":"825","severity":1,"message":"883","line":47,"column":10,"nodeType":"827","messageId":"828","endLine":47,"endColumn":17},{"ruleId":"825","severity":1,"message":"992","line":13,"column":10,"nodeType":"827","messageId":"828","endLine":13,"endColumn":14},{"ruleId":"825","severity":1,"message":"1021","line":23,"column":11,"nodeType":"827","messageId":"828","endLine":23,"endColumn":14},{"ruleId":"837","severity":1,"message":"1022","line":20,"column":3,"nodeType":"827","endLine":20,"endColumn":12,"suggestions":"1023"},{"ruleId":"825","severity":1,"message":"999","line":3,"column":22,"nodeType":"827","messageId":"828","endLine":3,"endColumn":26},{"ruleId":"825","severity":1,"message":"893","line":9,"column":10,"nodeType":"827","messageId":"828","endLine":9,"endColumn":11},{"ruleId":"825","severity":1,"message":"1024","line":10,"column":10,"nodeType":"827","messageId":"828","endLine":10,"endColumn":18},{"ruleId":"825","severity":1,"message":"882","line":10,"column":20,"nodeType":"827","messageId":"828","endLine":10,"endColumn":31},{"ruleId":"837","severity":1,"message":"913","line":16,"column":6,"nodeType":"839","endLine":16,"endColumn":8,"suggestions":"1025"},{"ruleId":"825","severity":1,"message":"1026","line":1,"column":17,"nodeType":"827","messageId":"828","endLine":1,"endColumn":29},{"ruleId":"825","severity":1,"message":"1027","line":3,"column":25,"nodeType":"827","messageId":"828","endLine":3,"endColumn":45},{"ruleId":"825","severity":1,"message":"953","line":53,"column":11,"nodeType":"827","messageId":"828","endLine":53,"endColumn":17},{"ruleId":"837","severity":1,"message":"1028","line":100,"column":6,"nodeType":"839","endLine":100,"endColumn":19,"suggestions":"1029"},{"ruleId":"825","severity":1,"message":"882","line":25,"column":20,"nodeType":"827","messageId":"828","endLine":25,"endColumn":31},{"ruleId":"837","severity":1,"message":"1030","line":39,"column":6,"nodeType":"839","endLine":39,"endColumn":8,"suggestions":"1031"},{"ruleId":"837","severity":1,"message":"1032","line":12,"column":6,"nodeType":"839","endLine":12,"endColumn":8,"suggestions":"1033"},{"ruleId":"825","severity":1,"message":"1034","line":19,"column":3,"nodeType":"827","messageId":"828","endLine":19,"endColumn":18},{"ruleId":"825","severity":1,"message":"893","line":33,"column":10,"nodeType":"827","messageId":"828","endLine":33,"endColumn":11},{"ruleId":"825","severity":1,"message":"961","line":86,"column":10,"nodeType":"827","messageId":"828","endLine":86,"endColumn":18},{"ruleId":"825","severity":1,"message":"1024","line":139,"column":10,"nodeType":"827","messageId":"828","endLine":139,"endColumn":18},{"ruleId":"825","severity":1,"message":"882","line":139,"column":20,"nodeType":"827","messageId":"828","endLine":139,"endColumn":31},{"ruleId":"837","severity":1,"message":"1035","line":145,"column":6,"nodeType":"839","endLine":145,"endColumn":8,"suggestions":"1036"},{"ruleId":"1012","severity":1,"message":"1037","line":318,"column":21,"nodeType":"936","messageId":"1038","endLine":318,"endColumn":23},{"ruleId":"825","severity":1,"message":"845","line":19,"column":3,"nodeType":"827","messageId":"828","endLine":19,"endColumn":22},{"ruleId":"825","severity":1,"message":"1039","line":31,"column":3,"nodeType":"827","messageId":"828","endLine":31,"endColumn":17},{"ruleId":"825","severity":1,"message":"1040","line":38,"column":38,"nodeType":"827","messageId":"828","endLine":38,"endColumn":47},{"ruleId":"837","severity":1,"message":"1041","line":131,"column":6,"nodeType":"839","endLine":131,"endColumn":16,"suggestions":"1042"},{"ruleId":"825","severity":1,"message":"1043","line":170,"column":9,"nodeType":"827","messageId":"828","endLine":170,"endColumn":18},{"ruleId":"825","severity":1,"message":"1044","line":56,"column":10,"nodeType":"827","messageId":"828","endLine":56,"endColumn":22},{"ruleId":"837","severity":1,"message":"1045","line":108,"column":6,"nodeType":"839","endLine":108,"endColumn":8,"suggestions":"1046"},{"ruleId":"849","severity":1,"message":"850","line":88,"column":15,"nodeType":"851","endLine":88,"endColumn":67},{"ruleId":"849","severity":1,"message":"850","line":89,"column":15,"nodeType":"851","endLine":89,"endColumn":71},{"ruleId":"849","severity":1,"message":"850","line":90,"column":15,"nodeType":"851","endLine":90,"endColumn":62},{"ruleId":"849","severity":1,"message":"850","line":103,"column":15,"nodeType":"851","endLine":103,"endColumn":56},{"ruleId":"849","severity":1,"message":"850","line":112,"column":15,"nodeType":"851","endLine":112,"endColumn":65},{"ruleId":"849","severity":1,"message":"850","line":118,"column":15,"nodeType":"851","endLine":118,"endColumn":73},{"ruleId":"849","severity":1,"message":"850","line":127,"column":17,"nodeType":"851","endLine":127,"endColumn":75},{"ruleId":"849","severity":1,"message":"850","line":133,"column":17,"nodeType":"851","endLine":133,"endColumn":71},{"ruleId":"849","severity":1,"message":"850","line":139,"column":17,"nodeType":"851","endLine":139,"endColumn":66},{"ruleId":"849","severity":1,"message":"850","line":177,"column":15,"nodeType":"851","endLine":177,"endColumn":66},{"ruleId":"849","severity":1,"message":"850","line":178,"column":15,"nodeType":"851","endLine":178,"endColumn":66},{"ruleId":"849","severity":1,"message":"850","line":203,"column":19,"nodeType":"851","endLine":203,"endColumn":69},{"ruleId":"849","severity":1,"message":"850","line":222,"column":21,"nodeType":"851","endLine":222,"endColumn":74},{"ruleId":"849","severity":1,"message":"850","line":236,"column":17,"nodeType":"851","endLine":236,"endColumn":65},{"ruleId":"849","severity":1,"message":"850","line":237,"column":17,"nodeType":"851","endLine":237,"endColumn":67},{"ruleId":"849","severity":1,"message":"850","line":348,"column":19,"nodeType":"851","endLine":348,"endColumn":79},{"ruleId":"849","severity":1,"message":"850","line":349,"column":19,"nodeType":"851","endLine":349,"endColumn":77},{"ruleId":"825","severity":1,"message":"1047","line":1,"column":17,"nodeType":"827","messageId":"828","endLine":1,"endColumn":27},{"ruleId":"825","severity":1,"message":"1048","line":1,"column":29,"nodeType":"827","messageId":"828","endLine":1,"endColumn":35},{"ruleId":"825","severity":1,"message":"938","line":1,"column":37,"nodeType":"827","messageId":"828","endLine":1,"endColumn":46},{"ruleId":"825","severity":1,"message":"1049","line":5,"column":5,"nodeType":"827","messageId":"828","endLine":5,"endColumn":10},{"ruleId":"825","severity":1,"message":"1050","line":1,"column":17,"nodeType":"827","messageId":"828","endLine":1,"endColumn":25},{"ruleId":"825","severity":1,"message":"893","line":21,"column":10,"nodeType":"827","messageId":"828","endLine":21,"endColumn":11},{"ruleId":"837","severity":1,"message":"1051","line":12,"column":6,"nodeType":"839","endLine":12,"endColumn":8,"suggestions":"1052"},{"ruleId":"825","severity":1,"message":"1053","line":2,"column":25,"nodeType":"827","messageId":"828","endLine":2,"endColumn":37},{"ruleId":"1054","severity":1,"message":"1055","line":44,"column":13,"nodeType":"827","messageId":"1056","endLine":44,"endColumn":14},{"ruleId":"825","severity":1,"message":"1057","line":3,"column":10,"nodeType":"827","messageId":"828","endLine":3,"endColumn":28},"no-unused-vars","'getUserProfileInfo' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Space' is defined but never used.","no-native-reassign",["1058"],"no-negated-in-lhs",["1059"],"'breakContext' is defined but never used.","'exerciseWorkoutTimeTrack' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setExerciseWorkoutTimeTrack'. Either include it or remove the dependency array.","ArrayExpression",["1060"],"React Hook useEffect has missing dependencies: 'currentExercise.index', 'moveToNextExercise', 'playerState', 'setPlayerState', 'setTimerVisible', and 'workout.exercises'. Either include them or remove the dependency array. If 'moveToNextExercise' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1061"],["1058"],["1059"],"'CloseSquareOutlined' is defined but never used.","'createPost' is defined but never used.",["1058"],["1059"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["1058"],["1059"],"React Hook useCallback has missing dependencies: 'checkForType', 'mediaActions', 'mediaType', 'setCurrentFolderName', 'setOpenUploadModal', and 'setRemoteMediaManagerVisible'. Either include them or remove the dependency array. If 'checkForType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1062"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'resetFileMap' is assigned a value but never used.","'StartTransparent' is defined but never used.",["1058"],["1059"],["1058"],["1059"],["1058"],["1059"],["1058"],["1059"],"'Footer' is defined but never used.","'StarOutlined' is defined but never used.","'LikeOutlined' is defined but never used.","'Modal' is defined but never used.","'ChallengeReviewModal' is defined but never used.","'serUserInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["1063"],"React Hook useEffect has a missing dependency: 'fetchInfo'. Either include it or remove the dependency array.",["1064"],"'message' is defined but never used.","'PlusOutlined' is defined but never used.","'setUserInfo' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'thumbnailBase64' is assigned a value but never used.","'setThumbnailBase64' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form' and 'props'. Either include them or remove the dependency array.",["1065"],["1058"],["1059"],"'AuditOutlined' is defined but never used.","'ExclamationCircleOutlined' is defined but never used.","'t' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["1066"],"'Upload' is defined but never used.","'getAllRecipes' is defined but never used.","'UpdateChallenge' is defined but never used.",["1058"],["1059"],"React Hook useEffect has missing dependencies: 'userInfo.id' and 'userInfo.role'. Either include them or remove the dependency array.",["1067"],"'Input' is defined but never used.","'Switch' is defined but never used.",["1058"],["1059"],["1058"],["1059"],"'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["1068"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode",["1058"],["1059"],"no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","unexpected","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allTrainers'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterTrainers' needs the current value of 'allTrainers'.",["1069"],"'currentBreak' is assigned a value but never used.","'playerState' is assigned a value but never used.","'setPlayerState' is assigned a value but never used.","'timerVisible' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'exercise.break', 'moveToNextExercise', 'setCurrentBreak', and 'setTimerVisible'. Either include them or remove the dependency array. If 'moveToNextExercise' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1070"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'RightOutlined' is defined but never used.","'useEffect' is defined but never used.","'language' is assigned a value but never used.","'setLangauge' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has missing dependencies: 'challengesApplicableOn' and 'form'. Either include them or remove the dependency array. You can also do a functional update 'setChallengesApplicableOn(c => ...)' if you only need 'challengesApplicableOn' in the 'setChallengesApplicableOn' call.",["1071"],"'PauseOutlined' is defined but never used.","'setExerciseWorkoutTimeTrack' is assigned a value but never used.","'s' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getNextChallenges'. Either include it or remove the dependency array.",["1072"],"'_' is defined but never used.","'ForwardOutlined' is defined but never used.","'height' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchData', 'props.history', 'setUserInfo', and 'userInfo'. Either include them or remove the dependency array.",["1073"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has a missing dependency: 'setLangauge'. Either include it or remove the dependency array.",["1074"],"'products' is assigned a value but never used.","'checkUser' is defined but never used.","'set' is defined but never used.","'selectedChallenge' is assigned a value but never used.",["1075"],"'LoadingOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'fethData'. Either include it or remove the dependency array.",["1076"],"'selectBefore' is assigned a value but never used.",["1058"],["1059"],"React Hook useEffect has missing dependencies: 'exerciseValues' and 'form'. Either include them or remove the dependency array.",["1077"],"'PlayerState' is defined but never used.","'setCurrentBreak' is assigned a value but never used.","'width' is assigned a value but never used.","'playing' is assigned a value but never used.","'setPlaying' is assigned a value but never used.","'newPrice' is assigned a value but never used.","'setNewPrice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedChallenge.price'. Either include it or remove the dependency array.",["1078"],"React Hook useEffect has missing dependencies: 'form', 'selectedFaq.answer', 'selectedFaq.category', 'selectedFaq.isPublic', and 'selectedFaq.question'. Either include them or remove the dependency array. If 'setIsPublic' needs the current value of 'selectedFaq.isPublic', you can also switch to useReducer instead of useState and read 'selectedFaq.isPublic' in the reducer.",["1079"],"'setFullscreen' is assigned a value but never used.","'Tag' is defined but never used.","'slug' is defined but never used.","Duplicate key 'margin'.",["1080"],"React Hook useEffect has a missing dependency: 'challanges'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterChallenges' needs the current value of 'challanges'.",["1081"],"'form' is assigned a value but never used.","'Option' is assigned a value but never used.",["1082"],"React Hook useEffect has missing dependencies: 'form', 'postInfo.image', 'postInfo.text', 'postInfo.title', and 'postInfo.type'. Either include them or remove the dependency array. If 'setType' needs the current value of 'postInfo.type', you can also switch to useReducer instead of useState and read 'postInfo.type' in the reducer.",["1083"],"React Hook useEffect has a missing dependency: 'userInfo.id'. Either include it or remove the dependency array.",["1084"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'props.history' and 'props.onPricingPage'. Either include them or remove the dependency array.",["1085"],"'a' is assigned a value but never used.","'setA' is assigned a value but never used.","'setT' is assigned a value but never used.","'Checkbox' is defined but never used.","'List' is defined but never used.","'category' is assigned a value but never used.",["1086"],"'iconsListStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'eatingBehave', 'fetchData', 'recommandedWeekDiet', 'selectedrRecipes', 'setMealsForTheWeek', and 'userProfile'. Either include them or remove the dependency array. You can also do a functional update 'setEatingBehave(e => ...)' if you only need 'eatingBehave' in the 'setEatingBehave' call.",["1087"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'UploadOutlined' is defined but never used.","'registerUser' is defined but never used.","'createCustomerDetails' is defined but never used.","'membership' is assigned a value but never used.","'goals' is assigned a value but never used.","'setGoals' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect contains a call to 'setShowModal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["1088"],"'userInfo' is assigned a value but never used.",["1089"],"'ReactElement' is defined but never used.","'ChonkyFileActionData' is defined but never used.","React Hook useEffect has missing dependencies: 'gender', 'months', and 'recommandedChal'. Either include them or remove the dependency array. If 'setMybody' needs the current value of 'gender', you can also switch to useReducer instead of useState and read 'gender' in the reducer.",["1090"],"React Hook useEffect has missing dependencies: 'props.history' and 'userInfo'. Either include them or remove the dependency array.",["1091"],"React Hook useEffect has a missing dependency: 'verifyEmailSendToken'. Either include it or remove the dependency array.",["1092"],"'createChallenge' is defined but never used.","React Hook useEffect has a missing dependency: 'addStuffToMainTabForm'. Either include it or remove the dependency array.",["1093"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'createProducts' is defined but never used.","'Draggable' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchExercises'. Either include it or remove the dependency array.",["1094"],"'rmProduct' is assigned a value but never used.","'fetchLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fechUserInfo'. Either include it or remove the dependency array.",["1095"],"'useContext' is defined but never used.","'useRef' is defined but never used.","'count' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'createSub'. Either include it or remove the dependency array.",["1096"],"'UserOutlined' is defined but never used.","no-redeclare","'n' is already defined.","redeclared","'updateBlogCategory' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1097","fix":"1098"},{"desc":"1099","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1103","fix":"1104"},{"desc":"1105","fix":"1106"},{"desc":"1107","fix":"1108"},{"desc":"1109","fix":"1110"},{"desc":"1111","fix":"1112"},{"desc":"1113","fix":"1114"},{"desc":"1115","fix":"1116"},{"desc":"1117","fix":"1118"},{"desc":"1119","fix":"1120"},{"desc":"1121","fix":"1122"},{"desc":"1123","fix":"1124"},{"desc":"1125","fix":"1126"},{"desc":"1127","fix":"1128"},{"desc":"1129","fix":"1130"},{"desc":"1131","fix":"1132"},{"desc":"1133","fix":"1134"},{"desc":"1135","fix":"1136"},{"desc":"1103","fix":"1137"},{"desc":"1138","fix":"1139"},{"desc":"1103","fix":"1140"},{"desc":"1141","fix":"1142"},{"desc":"1143","fix":"1144"},{"desc":"1145","fix":"1146"},{"desc":"1147","fix":"1148"},{"desc":"1149","fix":"1150"},{"desc":"1151","fix":"1152"},{"desc":"1113","fix":"1153"},{"desc":"1154","fix":"1155"},{"desc":"1156","fix":"1157"},{"desc":"1158","fix":"1159"},{"desc":"1160","fix":"1161"},{"desc":"1162","fix":"1163"},{"desc":"1164","fix":"1165"},{"desc":"1166","fix":"1167"},"Update the dependencies array to be: [setExerciseWorkoutTimeTrack, workout]",{"range":"1168","text":"1169"},"Update the dependencies array to be: [currentExercise.index, exerciseSeconds, moveToNextExercise, playerState, setPlayerState, setTimerVisible, workout.exercises]",{"range":"1170","text":"1171"},"Update the dependencies array to be: [checkForType, deleteFiles, mediaActions, mediaType, setCurrentFolderId, setCurrentFolderName, setOpenUploadModal, setRemoteMediaManagerVisible]",{"range":"1172","text":"1173"},"Update the dependencies array to be: [fetchData]",{"range":"1174","text":"1175"},"Update the dependencies array to be: [fetchInfo]",{"range":"1176","text":"1177"},"Update the dependencies array to be: [form, props]",{"range":"1178","text":"1179"},"Update the dependencies array to be: [blogInfo, form]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [userInfo.id, userInfo.role]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [props.history]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [allTrainers, filterGender]",{"range":"1186","text":"1187"},"Update the dependencies array to be: [exercise.break, moveToNextExercise, setCurrentBreak, setTimerVisible]",{"range":"1188","text":"1189"},"Update the dependencies array to be: [challengesApplicableOn, form, selectedCoupon]",{"range":"1190","text":"1191"},"Update the dependencies array to be: [getNextChallenges]",{"range":"1192","text":"1193"},"Update the dependencies array to be: [fetchData, props.history, setUserInfo, userInfo]",{"range":"1194","text":"1195"},"Update the dependencies array to be: [setLangauge]",{"range":"1196","text":"1197"},"Update the dependencies array to be: [fetchData, userInfo]",{"range":"1198","text":"1199"},"Update the dependencies array to be: [fethData]",{"range":"1200","text":"1201"},"Update the dependencies array to be: [exerciseValues, form]",{"range":"1202","text":"1203"},"Update the dependencies array to be: [selectedChallenge.price]",{"range":"1204","text":"1205"},"Update the dependencies array to be: [form, selectedFaq.answer, selectedFaq.category, selectedFaq.isPublic, selectedFaq.question]",{"range":"1206","text":"1207"},{"range":"1208","text":"1175"},"Update the dependencies array to be: [challanges, filterByBodyFocus, filterByEquipments, filterByGoal, filterByIntensity]",{"range":"1209","text":"1210"},{"range":"1211","text":"1175"},"Update the dependencies array to be: [form, postInfo.image, postInfo.text, postInfo.title, postInfo.type]",{"range":"1212","text":"1213"},"Update the dependencies array to be: [item, userInfo.id]",{"range":"1214","text":"1215"},"Update the dependencies array to be: [props.history, props.onPricingPage]",{"range":"1216","text":"1217"},"Update the dependencies array to be: [form, props.selectedProduct]",{"range":"1218","text":"1219"},"Update the dependencies array to be: [eatingBehave, fetchData, recommandedWeekDiet, selectedrRecipes, setMealsForTheWeek, userProfile]",{"range":"1220","text":"1221"},"Add dependencies array: []",{"range":"1222","text":"1223"},{"range":"1224","text":"1185"},"Update the dependencies array to be: [gender, months, recommandedChal, userProfile]",{"range":"1225","text":"1226"},"Update the dependencies array to be: [props.history, userInfo]",{"range":"1227","text":"1228"},"Update the dependencies array to be: [verifyEmailSendToken]",{"range":"1229","text":"1230"},"Update the dependencies array to be: [addStuffToMainTabForm]",{"range":"1231","text":"1232"},"Update the dependencies array to be: [fetchExercises, trainers]",{"range":"1233","text":"1234"},"Update the dependencies array to be: [fechUserInfo]",{"range":"1235","text":"1236"},"Update the dependencies array to be: [createSub]",{"range":"1237","text":"1238"},[2345,2354],"[setExerciseWorkoutTimeTrack, workout]",[3167,3184],"[currentExercise.index, exerciseSeconds, moveToNextExercise, playerState, setPlayerState, setTimerVisible, workout.exercises]",[22726,22784],"[checkForType, deleteFiles, mediaActions, mediaType, setCurrentFolderId, setCurrentFolderName, setOpenUploadModal, setRemoteMediaManagerVisible]",[1675,1677],"[fetchData]",[1146,1148],"[fetchInfo]",[6493,6495],"[form, props]",[2556,2566],"[blogInfo, form]",[1169,1171],"[userInfo.id, userInfo.role]",[1297,1299],"[props.history]",[1357,1371],"[allTrainers, filterGender]",[791,793],"[exercise.break, moveToNextExercise, setCurrentBreak, setTimerVisible]",[1240,1256],"[challengesApplicableOn, form, selectedCoupon]",[1756,1758],"[getNextChallenges]",[2670,2672],"[fetchData, props.history, setUserInfo, userInfo]",[3496,3498],"[setLangauge]",[4845,4855],"[fetchData, userInfo]",[2898,2900],"[fethData]",[1499,1501],"[exerciseValues, form]",[20454,20456],"[selectedChallenge.price]",[1626,1628],"[form, selectedFaq.answer, selectedFaq.category, selectedFaq.isPublic, selectedFaq.question]",[1789,1791],[3683,3755],"[challanges, filterByBodyFocus, filterByEquipments, filterByGoal, filterByIntensity]",[2234,2236],[922,924],"[form, postInfo.image, postInfo.text, postInfo.title, postInfo.type]",[1733,1739],"[item, userInfo.id]",[1020,1022],"[props.history, props.onPricingPage]",[2139,2162],"[form, props.selectedProduct]",[5821,5823],"[eatingBehave, fetchData, recommandedWeekDiet, selectedrRecipes, setMealsForTheWeek, userProfile]",[837,837],", []",[555,557],[3148,3161],"[gender, months, recommandedChal, userProfile]",[1302,1304],"[props.history, userInfo]",[537,539],"[verifyEmailSendToken]",[6491,6493],"[addStuffToMainTabForm]",[3469,3479],"[fetchExercises, trainers]",[3604,3606],"[fechUserInfo]",[391,393],"[createSub]"]